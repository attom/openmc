!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
100	ace.F90	/^100   format(A70,A10\/4(I7,F11.0)\/4(I7,F11.0)\/4(I7,F11.0)\/4(I7,F11.0)\/&$/;"	l	subroutine:read_ace_table	file:
100	output.F90	/^100 format (1X,A,T15,A)$/;"	l	subroutine:print_overlap_check	file:
100	output.F90	/^100 format (1X,A,T25,A)$/;"	l	subroutine:print_plot	file:
100	output.F90	/^100 format (1X,A,T35,A)$/;"	l	subroutine:write_summary	file:
100	output.F90	/^100 format (1X,A,T36,"= ",ES11.4," seconds")$/;"	l	subroutine:print_runtime	file:
101	output.F90	/^101 format (1X,A,T35,I11)$/;"	l	subroutine:write_summary	file:
101	output.F90	/^101 format (1X,A,T36,"=  ",A," neutrons\/second")$/;"	l	subroutine:print_runtime	file:
101	output.F90	/^101 format (1X,I8,T15,I12)$/;"	l	subroutine:print_overlap_check	file:
102	output.F90	/^102 format (1X,A,T30,"= ",F8.5," +\/- ",F8.5)$/;"	l	subroutine:print_results	file:
103	output.F90	/^103 format (1X,A,T30,"= ",F8.5)$/;"	l	subroutine:print_results	file:
A	geometry.F90	/^    real(8) :: A /;"	L	function:sense	file:
A	physics.F90	/^    real(8) :: A /;"	L	subroutine:inelastic_scatter	file:
A	physics.F90	/^    real(8), intent(in),    optional :: A /;"	L	subroutine:sample_energy	file:
ACE_DOSIMETRY	constants.F90	/^       ACE_THERMAL   = 2, & ! thermal S(a,b) scattering data$/;"	v	module:constants
ACE_NEUTRON	constants.F90	/^  integer, parameter :: &$/;"	v	module:constants
ACE_THERMAL	constants.F90	/^       ACE_NEUTRON   = 1, & ! continuous-energy neutron$/;"	v	module:constants
ALBEDO_REJECT	constants.F90	/^  real(8), parameter :: ALBEDO_REJECT /;"	v	module:constants
AMU	constants.F90	/^       MASS_PROTON  = 1.007276466812,    & ! mass of a proton in amu$/;"	v	module:constants
ANGLE_32_EQUI	constants.F90	/^       ANGLE_ISOTROPIC = 1, & ! Isotropic angular distribution$/;"	v	module:constants
ANGLE_ISOTROPIC	constants.F90	/^  integer, parameter :: &$/;"	v	module:constants
ANGLE_TABULAR	constants.F90	/^       ANGLE_32_EQUI   = 2, & ! 32 equiprobable bins$/;"	v	module:constants
ASCII	constants.F90	/^  integer, parameter :: &$/;"	v	module:constants
ATTR_NODE	xml_interface.F90	/^  integer, parameter :: ATTR_NODE /;"	v	module:xml_interface
A_k	physics.F90	/^    real(8) :: A_k,/;"	L	subroutine:sample_energy	file:
A_k1	physics.F90	/^    real(8) :: A_k, A_k1 /;"	L	subroutine:sample_energy	file:
A_target	doppler.F90	/^    integer, intent(in)  :: A_target /;"	L	subroutine:broaden	file:
Ak	doppler.F90	/^    real(8)              :: Ak,/;"	L	subroutine:broaden	file:
Ap	physics.F90	/^    real(8) :: Ap /;"	L	subroutine:sample_energy	file:
B	geometry.F90	/^    real(8) :: B /;"	L	function:sense	file:
BASE_UNIVERSE	geometry_header.F90	/^  integer :: BASE_UNIVERSE$/;"	v	module:geometry_header
BC_PERIODIC	constants.F90	/^       BC_REFLECT  = 2,  & ! Reflecting boundary condition$/;"	v	module:constants
BC_REFLECT	constants.F90	/^       BC_VACUUM   = 1,  & ! Vacuum boundary condition$/;"	v	module:constants
BC_TRANSMIT	constants.F90	/^  integer, parameter ::  &$/;"	v	module:constants
BC_VACUUM	constants.F90	/^       BC_TRANSMIT = 0,  & ! Transmission boundary condition (default)$/;"	v	module:constants
BINARY	constants.F90	/^       ASCII  = 1, & ! ASCII cross section file$/;"	v	module:constants
Bank	bank_header.F90	/^  type Bank$/;"	t	module:bank_header
BinaryOutput	output_interface.F90	/^  type, public :: BinaryOutput$/;"	t	module:output_interface
Bk	doppler.F90	/^    real(8)              :: Ak, Bk /;"	L	subroutine:broaden	file:
C	geometry.F90	/^    real(8) :: C /;"	L	function:sense	file:
CELL_FILL	constants.F90	/^       CELL_NORMAL  = 1, & ! Cell with a specified material$/;"	v	module:constants
CELL_LATTICE	constants.F90	/^       CELL_FILL    = 2, & ! Cell filled by a separate universe$/;"	v	module:constants
CELL_NORMAL	constants.F90	/^  integer, parameter ::  &$/;"	v	module:constants
CMFD_NOACCEL	constants.F90	/^  integer, parameter :: CMFD_NOACCEL /;"	v	module:constants
CMFD_NORES	constants.F90	/^  real(8), parameter :: CMFD_NORES /;"	v	module:constants
CONFIDENCE_LEVEL	constants.F90	/^  real(8), parameter :: CONFIDENCE_LEVEL /;"	v	module:constants
Cell	geometry_header.F90	/^  type Cell$/;"	t	module:geometry_header
D	geometry.F90	/^    real(8) :: D /;"	L	function:sense	file:
DICT_KEY_LENGTH	dict_header.F90	/^  integer, parameter          :: DICT_KEY_LENGTH /;"	v	module:dict_header
DICT_NULL	dict_header.F90	/^  integer, parameter, private :: DICT_NULL /;"	v	module:dict_header
DictCharInt	dict_header.F90	/^  type, public :: DictCharInt$/;"	t	module:dict_header
DictIntInt	dict_header.F90	/^  type, public :: DictIntInt$/;"	t	module:dict_header
DistAngle	ace_header.F90	/^  type DistAngle$/;"	t	module:ace_header
DistEnergy	ace_header.F90	/^  type DistEnergy$/;"	t	module:ace_header
DistEnergySab	ace_header.F90	/^  type DistEnergySab$/;"	t	module:ace_header
E	ace.F90	/^    real(8) :: E /;"	L	subroutine:generate_nu_fission	file:
E	bank_header.F90	/^    real(8)    :: E /;"	k	type:Bank
E	cross_section.F90	/^    real(8), intent(in) :: E /;"	L	subroutine:calculate_nuclide_xs	file:
E	cross_section.F90	/^    real(8), intent(in) :: E /;"	L	subroutine:calculate_sab_xs	file:
E	cross_section.F90	/^    real(8), intent(in) :: E /;"	L	subroutine:calculate_urr_xs	file:
E	cross_section.F90	/^    real(8), intent(in) :: E /;"	L	subroutine:find_energy_index	file:
E	energy_grid.F90	/^    real(8) :: E /;"	L	subroutine:add_grid_points	file:
E	fission.F90	/^    real(8), intent(in)    :: E /;"	L	function:nu_delayed	file:
E	fission.F90	/^    real(8), intent(in)    :: E /;"	L	function:nu_prompt	file:
E	fission.F90	/^    real(8), intent(in)    :: E /;"	L	function:nu_total	file:
E	particle_header.F90	/^    real(8)    :: E /;"	k	type:Particle
E	physics.F90	/^    real(8),        intent(in) :: E /;"	L	function:sample_angle	file:
E	physics.F90	/^    real(8), intent(in)     :: E /;"	L	function:sample_fission_energy	file:
E	physics.F90	/^    real(8), intent(in)     :: E$/;"	L	subroutine:sample_target_velocity	file:
E	physics.F90	/^    real(8), intent(inout)  :: E /;"	L	subroutine:inelastic_scatter	file:
E	physics.F90	/^    real(8), intent(inout)  :: E /;"	L	subroutine:sab_scatter	file:
E	physics.F90	/^    real(8), intent(inout)  :: E$/;"	L	subroutine:elastic_scatter	file:
E	tally.F90	/^    real(8) :: E /;"	L	subroutine:get_scoring_bins	file:
E0	output.F90	/^    real(8)              :: E0 /;"	L	function:get_label	file:
E1	output.F90	/^    real(8)              :: E1 /;"	L	function:get_label	file:
ELASTIC	constants.F90	/^       TOTAL_XS    = 1, &$/;"	v	module:constants
ELECTRON	constants.F90	/^       PHOTON   = 2, &$/;"	v	module:constants
ELEM_NODE	xml_interface.F90	/^  integer, parameter :: ELEM_NODE /;"	v	module:xml_interface
ENDF_BVII0	constants.F90	/^  integer, parameter :: &$/;"	v	module:constants
ENDF_BVII1	constants.F90	/^       ENDF_BVII0 = 1, &$/;"	v	module:constants
ERROR_INT	constants.F90	/^  integer, parameter :: ERROR_INT /;"	v	module:constants
ERROR_REAL	constants.F90	/^  real(8), parameter :: ERROR_REAL /;"	v	module:constants
ESTIMATOR_ANALOG	constants.F90	/^  integer, parameter :: &$/;"	v	module:constants
ESTIMATOR_TRACKLENGTH	constants.F90	/^       ESTIMATOR_ANALOG      = 1, &$/;"	v	module:constants
EVENT_ABSORB	constants.F90	/^       EVENT_SCATTER =  1, &$/;"	v	module:constants
EVENT_LATTICE	constants.F90	/^       EVENT_SURFACE = -2, &$/;"	v	module:constants
EVENT_SCATTER	constants.F90	/^       EVENT_LATTICE = -1, &$/;"	v	module:constants
EVENT_SURFACE	constants.F90	/^  integer, parameter :: &$/;"	v	module:constants
E_1	physics.F90	/^    real(8) :: E_1,/;"	L	subroutine:sample_energy	file:
E_K	physics.F90	/^    real(8) :: E_1, E_K /;"	L	subroutine:sample_energy	file:
E_cm	physics.F90	/^    real(8) :: E_cm /;"	L	subroutine:inelastic_scatter	file:
E_i1_1	physics.F90	/^    real(8) :: E_i1_1,/;"	L	subroutine:sample_energy	file:
E_i1_K	physics.F90	/^    real(8) :: E_i1_1, E_i1_K /;"	L	subroutine:sample_energy	file:
E_i1j	physics.F90	/^    real(8) :: E_i1j /;"	L	subroutine:sab_scatter	file:
E_i_1	physics.F90	/^    real(8) :: E_i_1,/;"	L	subroutine:sample_energy	file:
E_i_K	physics.F90	/^    real(8) :: E_i_1, E_i_K /;"	L	subroutine:sample_energy	file:
E_ij	physics.F90	/^    real(8) :: E_ij /;"	L	subroutine:sab_scatter	file:
E_in	physics.F90	/^    real(8) :: E_in /;"	L	subroutine:inelastic_scatter	file:
E_in	physics.F90	/^    real(8), intent(in)              :: E_in /;"	L	subroutine:sample_energy	file:
E_l_k	physics.F90	/^    real(8) :: E_l_k,/;"	L	subroutine:sample_energy	file:
E_l_k1	physics.F90	/^    real(8) :: E_l_k, E_l_k1 /;"	L	subroutine:sample_energy	file:
E_max	physics.F90	/^    real(8) :: E_max /;"	L	subroutine:sample_energy	file:
E_out	math.F90	/^    real(8)              :: E_out /;"	L	function:maxwell_spectrum	file:
E_out	math.F90	/^    real(8)             :: E_out /;"	L	function:watt_spectrum	file:
E_out	physics.F90	/^    real(8)                 :: E_out /;"	L	function:sample_fission_energy	file:
E_out	physics.F90	/^    real(8), intent(out)             :: E_out /;"	L	subroutine:sample_energy	file:
E_out	tally.F90	/^    real(8) :: E_out /;"	L	subroutine:score_fission_eout	file:
ElemKeyValueCI	dict_header.F90	/^  type ElemKeyValueCI$/;"	t	module:dict_header
ElemKeyValueII	dict_header.F90	/^  type ElemKeyValueII$/;"	t	module:dict_header
ExtSource	source_header.F90	/^  type ExtSource$/;"	t	module:source_header
F	doppler.F90	/^    real(8), intent(inout) :: F(/;"	L	subroutine:calculate_F	file:
FILETYPE_PARTICLE_RESTART	constants.F90	/^       FILETYPE_STATEPOINT       = -1, &$/;"	v	module:constants
FILETYPE_SOURCE	constants.F90	/^       FILETYPE_PARTICLE_RESTART = -2, &$/;"	v	module:constants
FILETYPE_STATEPOINT	constants.F90	/^  integer, parameter :: &$/;"	v	module:constants
FILTER_CELL	constants.F90	/^       FILTER_MATERIAL  = 2, &$/;"	v	module:constants
FILTER_CELLBORN	constants.F90	/^       FILTER_CELL      = 3, &$/;"	v	module:constants
FILTER_ENERGYIN	constants.F90	/^       FILTER_MESH      = 6, &$/;"	v	module:constants
FILTER_ENERGYOUT	constants.F90	/^       FILTER_ENERGYIN  = 7, &$/;"	v	module:constants
FILTER_MATERIAL	constants.F90	/^       FILTER_UNIVERSE  = 1, &$/;"	v	module:constants
FILTER_MESH	constants.F90	/^       FILTER_SURFACE   = 5, &$/;"	v	module:constants
FILTER_SURFACE	constants.F90	/^       FILTER_CELLBORN  = 4, &$/;"	v	module:constants
FILTER_UNIVERSE	constants.F90	/^  integer, parameter :: &$/;"	v	module:constants
FP_COINCIDENT	constants.F90	/^  real(8), parameter :: FP_COINCIDENT /;"	v	module:constants
FP_PRECISION	constants.F90	/^  real(8), parameter :: FP_PRECISION /;"	v	module:constants
FP_REL_PRECISION	constants.F90	/^  real(8), parameter :: FP_REL_PRECISION /;"	v	module:constants
FREE_GAS_THRESHOLD	constants.F90	/^  real(8), parameter :: FREE_GAS_THRESHOLD /;"	v	module:constants
F_a	doppler.F90	/^    real(8)              :: F_a(/;"	L	subroutine:broaden	file:
F_b	doppler.F90	/^    real(8)              :: F_b(/;"	L	subroutine:broaden	file:
GMRESSolver	solver_interface.F90	/^  type, public :: GMRESSolver /;"	t	module:solver_interface
GRID_LETHARGY	constants.F90	/^       GRID_UNION    = 2, & ! union grid with pointers$/;"	v	module:constants
GRID_NUCLIDE	constants.F90	/^  integer, parameter :: &$/;"	v	module:constants
GRID_UNION	constants.F90	/^       GRID_NUCLIDE  = 1, & ! non-unionized energy grid$/;"	v	module:constants
H	doppler.F90	/^    real(8)              :: H(/;"	L	subroutine:broaden	file:
HASH_MULTIPLIER	dict_header.F90	/^  integer, parameter, private :: HASH_MULTIPLIER /;"	v	module:dict_header
HASH_SIZE	dict_header.F90	/^  integer, parameter, private :: HASH_SIZE /;"	v	module:dict_header
HISTOGRAM	constants.F90	/^  integer, parameter ::   &$/;"	v	module:constants
HashListCI	dict_header.F90	/^  type, private :: HashListCI$/;"	t	module:dict_header
HashListII	dict_header.F90	/^  type, private :: HashListII$/;"	t	module:dict_header
IDAT	ace.F90	/^    integer :: IDAT /;"	L	subroutine:get_energy_dist	file:
IE	ace.F90	/^    integer :: IE /;"	L	subroutine:read_reactions	file:
INFINITY	constants.F90	/^       K_BOLTZMANN  = 8.6173324e-11,     & ! Boltzmann constant in MeV\/K$/;"	v	module:constants
INTT	physics.F90	/^    integer :: INTT /;"	L	subroutine:sample_energy	file:
INTTp	physics.F90	/^    integer :: INTTp /;"	L	subroutine:sample_energy	file:
IN_FRONT	constants.F90	/^       OUT_RIGHT = 2,   &$/;"	v	module:constants
IN_RIGHT	constants.F90	/^  integer, parameter :: &$/;"	v	module:constants
IN_TOP	constants.F90	/^       OUT_FRONT = 4,   &$/;"	v	module:constants
Image	ppmlib.F90	/^  type Image$/;"	t	module:ppmlib
JEFF_311	constants.F90	/^       ENDF_BVII1 = 2, &$/;"	v	module:constants
JEFF_312	constants.F90	/^       JEFF_311   = 3, &$/;"	v	module:constants
JEFF_32	constants.F90	/^       JEFF_312   = 4, &$/;"	v	module:constants
JENDL_32	constants.F90	/^       JEFF_32    = 5, &$/;"	v	module:constants
JENDL_33	constants.F90	/^       JENDL_32   = 6, &$/;"	v	module:constants
JENDL_40	constants.F90	/^       JENDL_33   = 7, &$/;"	v	module:constants
JFNKSolver	solver_interface.F90	/^  type, public :: JFNKSolver /;"	t	module:solver_interface
JJ	physics.F90	/^    integer :: JJ /;"	L	subroutine:sample_energy	file:
JXS	ace.F90	/^  integer :: JXS(/;"	v	module:ace
JXS2	ace.F90	/^    integer :: JXS2 /;"	L	subroutine:read_nu_data	file:
JXS23	ace.F90	/^    integer :: JXS23 /;"	L	subroutine:read_unr_res	file:
JXS24	ace.F90	/^    integer :: JXS24 /;"	L	subroutine:read_nu_data	file:
JXS4	ace.F90	/^    integer :: JXS4 /;"	L	subroutine:read_reactions	file:
JXS4	ace.F90	/^    integer :: JXS4 /;"	L	subroutine:read_thermal_data	file:
JXS5	ace.F90	/^    integer :: JXS5 /;"	L	subroutine:read_reactions	file:
JXS7	ace.F90	/^    integer :: JXS7 /;"	L	subroutine:read_reactions	file:
JXS8	ace.F90	/^    integer :: JXS8 /;"	L	subroutine:read_angular_dist	file:
JXS9	ace.F90	/^    integer :: JXS9 /;"	L	subroutine:read_angular_dist	file:
Jfnk_ctx	solver_interface.F90	/^  type, public :: Jfnk_ctx$/;"	t	module:solver_interface
KM_A	physics.F90	/^    real(8) :: KM_A /;"	L	subroutine:sample_energy	file:
KM_R	physics.F90	/^    real(8) :: KM_R /;"	L	subroutine:sample_energy	file:
KNU	ace.F90	/^    integer :: KNU /;"	L	subroutine:read_nu_data	file:
K_ABSORPTION	constants.F90	/^       K_COLLISION   = 1, &$/;"	v	module:constants
K_BOLTZMANN	constants.F90	/^       N_AVOGADRO   = 0.602214129,       & ! Avogadro's number in 10^24\/mol$/;"	v	module:constants
K_COLLISION	constants.F90	/^  integer, parameter :: &$/;"	v	module:constants
K_TRACKLENGTH	constants.F90	/^       K_ABSORPTION  = 2, &$/;"	v	module:constants
L	ace.F90	/^    real(8), allocatable :: L(/;"	L	function:length_energy_dist	file:
L	search.F90	/^    integer :: L$/;"	L	function:binary_search_int4	file:
L	search.F90	/^    integer :: L$/;"	L	function:binary_search_int8	file:
L	search.F90	/^    integer :: L$/;"	L	function:binary_search_real	file:
L2_dist	clustering_kmeans.F90	/^    real(8) :: L2_dist,/;"	L	subroutine:kms_compute_distances	file:
L2_err	ace_header.F90	/^    real(8) :: L2_err /;"	k	type:RrrData
L2_err	clustering_kmeans.F90	/^    real(8), intent(out) :: L2_err /;"	L	subroutine:kms_compute_distances	file:
L2_err	clustering_kmeans.F90	/^    real(8), intent(out) :: L2_err /;"	L	subroutine:perform_kms	file:
LATTICE_BACK	constants.F90	/^       LATTICE_RIGHT  = 2, & ! Flag for crossing right (x) lattice boundary$/;"	v	module:constants
LATTICE_BOTTOM	constants.F90	/^       LATTICE_FRONT  = 4, & ! Flag for crossing front (y) lattice boundary$/;"	v	module:constants
LATTICE_FRONT	constants.F90	/^       LATTICE_BACK   = 3, & ! Flag for crossing back (y) lattice boundary$/;"	v	module:constants
LATTICE_HEX	constants.F90	/^       LATTICE_RECT = 1, & ! Rectangular lattice$/;"	v	module:constants
LATTICE_LEFT	constants.F90	/^  integer, parameter ::    &$/;"	v	module:constants
LATTICE_RECT	constants.F90	/^  integer, parameter ::  &$/;"	v	module:constants
LATTICE_RIGHT	constants.F90	/^       LATTICE_LEFT   = 1, & ! Flag for crossing left (x) lattice boundary$/;"	v	module:constants
LATTICE_TOP	constants.F90	/^       LATTICE_BOTTOM = 5, & ! Flag for crossing bottom (z) lattice boundary$/;"	v	module:constants
LAW	ace.F90	/^    integer :: LAW /;"	L	subroutine:get_energy_dist	file:
LC	ace.F90	/^    integer :: LC /;"	L	subroutine:read_angular_dist	file:
LDIS	ace.F90	/^    integer :: LDIS /;"	L	subroutine:get_energy_dist	file:
LDIS	ace.F90	/^    integer :: LDIS /;"	L	subroutine:read_nu_data	file:
LEAKAGE	constants.F90	/^       K_TRACKLENGTH = 3, &$/;"	v	module:constants
LED	ace.F90	/^    integer :: LED /;"	L	subroutine:read_energy_dist	file:
LED	ace.F90	/^    integer :: LED /;"	L	subroutine:read_nu_data	file:
LINEAR_LINEAR	constants.F90	/^       HISTOGRAM     = 1, & ! y is constant in x$/;"	v	module:constants
LINEAR_LOG	constants.F90	/^       LINEAR_LINEAR = 2, & ! y is linear in x$/;"	v	module:constants
LMT	ace.F90	/^    integer :: LMT /;"	L	subroutine:read_reactions	file:
LNU	ace.F90	/^    integer :: LNU /;"	L	subroutine:read_nu_data	file:
LNW	ace.F90	/^    integer :: LNW /;"	L	subroutine:get_energy_dist	file:
LOCA	ace.F90	/^    integer :: LOCA /;"	L	subroutine:read_reactions	file:
LOCB	ace.F90	/^    integer :: LOCB /;"	L	subroutine:read_angular_dist	file:
LOCC	ace.F90	/^    integer :: LOCC /;"	L	subroutine:read_energy_dist	file:
LOCC	ace.F90	/^    integer :: LOCC /;"	L	subroutine:read_nu_data	file:
LOCC	ace.F90	/^    integer(8), allocatable :: LOCC(/;"	L	subroutine:read_thermal_data	file:
LOCC	ace.F90	/^    integer, intent(in) :: LOCC /;"	L	function:length_energy_dist	file:
LOG_LINEAR	constants.F90	/^       LINEAR_LOG    = 3, & ! y is linear in ln(x)$/;"	v	module:constants
LOG_LOG	constants.F90	/^       LOG_LINEAR    = 4, & ! ln(y) is linear in x$/;"	v	module:constants
LXS	ace.F90	/^    integer :: LXS /;"	L	subroutine:read_reactions	file:
Lattice	geometry_header.F90	/^  type Lattice$/;"	t	module:geometry_header
Linf_dist	clustering_kmeans.F90	/^    real(8) :: L2_dist, min_L2_dist, Linf_dist$/;"	L	subroutine:kms_compute_distances	file:
Linf_err	ace_header.F90	/^    real(8) :: Linf_err /;"	k	type:RrrData
Linf_err	clustering_kmeans.F90	/^    real(8), intent(out) :: Linf_err /;"	L	subroutine:kms_compute_distances	file:
Linf_err	clustering_kmeans.F90	/^    real(8), intent(out) :: Linf_err /;"	L	subroutine:perform_kms	file:
ListChar	list_header.F90	/^  type, public :: ListChar$/;"	t	module:list_header
ListElemChar	list_header.F90	/^  type :: ListElemChar$/;"	t	module:list_header
ListElemInt	list_header.F90	/^  type :: ListElemInt$/;"	t	module:list_header
ListElemReal	list_header.F90	/^  type :: ListElemReal$/;"	t	module:list_header
ListInt	list_header.F90	/^  type, public :: ListInt$/;"	t	module:list_header
ListReal	list_header.F90	/^  type, public :: ListReal$/;"	t	module:list_header
LocalCoord	particle_header.F90	/^  type LocalCoord$/;"	t	module:particle_header
M	ace.F90	/^    integer :: M /;"	L	subroutine:read_unr_res	file:
MASS_NEUTRON	constants.F90	/^       PI           = 3.1415926535898_8, & ! pi$/;"	v	module:constants
MASS_PROTON	constants.F90	/^       MASS_NEUTRON = 1.008664916,       & ! mass of a neutron in amu$/;"	v	module:constants
MATERIAL_VOID	constants.F90	/^  integer, parameter :: MATERIAL_VOID /;"	v	module:constants
MAX_ANG_ORDER	constants.F90	/^  integer, parameter :: MAX_ANG_ORDER /;"	v	module:constants
MAX_EVENTS	constants.F90	/^  integer, parameter :: MAX_EVENTS /;"	v	module:constants
MAX_EXTSRC_RESAMPLES	constants.F90	/^  integer, parameter :: MAX_EXTSRC_RESAMPLES /;"	v	module:constants
MAX_FILE_LEN	constants.F90	/^  integer, parameter :: MAX_FILE_LEN /;"	v	module:constants
MAX_ITERATION	search.F90	/^  integer, parameter :: MAX_ITERATION /;"	v	module:search
MAX_LINE_LEN	constants.F90	/^  integer, parameter :: MAX_LINE_LEN /;"	v	module:constants
MAX_LOST_PARTICLES	constants.F90	/^  integer, parameter :: MAX_LOST_PARTICLES /;"	v	module:constants
MAX_SAMPLE	constants.F90	/^  integer, parameter :: MAX_SAMPLE /;"	v	module:constants
MAX_WORDS	constants.F90	/^  integer, parameter :: MAX_WORDS /;"	v	module:constants
MAX_WORD_LEN	constants.F90	/^  integer, parameter :: MAX_WORD_LEN /;"	v	module:constants
MISC	constants.F90	/^       N_LEVEL     = 4, &$/;"	v	module:constants
MODE_EIGENVALUE	constants.F90	/^       MODE_FIXEDSOURCE = 1, & ! Fixed source mode$/;"	v	module:constants
MODE_FIXEDSOURCE	constants.F90	/^  integer, parameter ::        &$/;"	v	module:constants
MODE_PARTICLE	constants.F90	/^       MODE_PLOTTING    = 3, & ! Plotting mode$/;"	v	module:constants
MODE_PLOTTING	constants.F90	/^       MODE_EIGENVALUE  = 2, & ! K eigenvalue mode$/;"	v	module:constants
MOMENT_N_STRS	constants.F90	/^                              "nu-scatter-y"\/), &$/;"	v	module:constants
MOMENT_STRS	constants.F90	/^  character(*), parameter :: &$/;"	v	module:constants
MT	ace_header.F90	/^    integer :: MT /;"	k	type:Reaction
MT	endf.F90	/^    integer, intent(in) :: MT$/;"	L	function:is_fission	file:
MT	endf.F90	/^    integer, intent(in) :: MT$/;"	L	function:is_scatter	file:
MT	endf.F90	/^    integer, intent(in) :: MT$/;"	L	function:reaction_name	file:
MT	input_xml.F90	/^    integer :: MT /;"	L	subroutine:read_tallies_xml	file:
Material	material_header.F90	/^  type Material$/;"	t	module:material_header
MaterialMacroXS	ace_header.F90	/^  type MaterialMacroXS$/;"	t	module:ace_header
Matrix	matrix_header.F90	/^  type, public :: Matrix$/;"	t	module:matrix_header
N	ace.F90	/^    integer :: N /;"	L	subroutine:read_unr_res	file:
NC	ace.F90	/^    integer :: NC /;"	L	subroutine:read_nu_data	file:
NC	fission.F90	/^    integer :: NC /;"	L	function:nu_prompt	file:
NC	fission.F90	/^    integer :: NC /;"	L	function:nu_total	file:
ND	physics.F90	/^    integer :: ND /;"	L	subroutine:sample_energy	file:
NE	ace.F90	/^    integer :: NE /;"	L	function:length_energy_dist	file:
NE	ace.F90	/^    integer :: NE /;"	L	subroutine:get_energy_dist	file:
NE	ace.F90	/^    integer :: NE /;"	L	subroutine:read_angular_dist	file:
NE	ace.F90	/^    integer :: NE /;"	L	subroutine:read_esz	file:
NE	ace.F90	/^    integer :: NE /;"	L	subroutine:read_nu_data	file:
NE	ace.F90	/^    integer :: NE /;"	L	subroutine:read_reactions	file:
NE	physics.F90	/^    integer :: NE /;"	L	function:sample_fission_energy	file:
NE	physics.F90	/^    integer :: NE /;"	L	subroutine:sample_energy	file:
NET	physics.F90	/^    integer :: NET /;"	L	subroutine:sample_energy	file:
NEUTRON	constants.F90	/^  integer, parameter :: &$/;"	v	module:constants
NE_in	ace.F90	/^    integer :: NE_in /;"	L	subroutine:read_thermal_data	file:
NE_out	ace.F90	/^    integer :: NE_out /;"	L	subroutine:read_thermal_data	file:
NEa	ace.F90	/^    integer :: NEa /;"	L	function:length_energy_dist	file:
NEb	ace.F90	/^    integer :: NEb /;"	L	function:length_energy_dist	file:
NMT	ace.F90	/^    integer :: NMT /;"	L	subroutine:read_reactions	file:
NMU	ace.F90	/^    integer :: NMU /;"	L	function:length_energy_dist	file:
NMU	ace.F90	/^    integer :: NMU /;"	L	subroutine:read_thermal_data	file:
NONE	constants.F90	/^  integer, parameter :: NONE /;"	v	module:constants
NO_BIN_FOUND	constants.F90	/^  integer, parameter :: NO_BIN_FOUND /;"	v	module:constants
NP	ace.F90	/^    integer :: NP /;"	L	function:length_energy_dist	file:
NP	ace.F90	/^    integer :: NP /;"	L	subroutine:read_angular_dist	file:
NP	physics.F90	/^    integer        :: NP /;"	L	function:sample_angle	file:
NP	physics.F90	/^    integer :: NP /;"	L	subroutine:sample_energy	file:
NPCR	ace.F90	/^    integer :: NPCR /;"	L	subroutine:read_nu_data	file:
NR	ace.F90	/^    integer :: NR /;"	L	function:length_energy_dist	file:
NR	ace.F90	/^    integer :: NR /;"	L	subroutine:get_energy_dist	file:
NR	ace.F90	/^    integer :: NR /;"	L	subroutine:read_nu_data	file:
NR	physics.F90	/^    integer :: NR /;"	L	function:sample_fission_energy	file:
NR	physics.F90	/^    integer :: NR /;"	L	subroutine:sample_energy	file:
NRa	ace.F90	/^    integer :: NRa /;"	L	function:length_energy_dist	file:
NRb	ace.F90	/^    integer :: NRb /;"	L	function:length_energy_dist	file:
NU_NONE	constants.F90	/^  integer, parameter ::   &$/;"	v	module:constants
NU_POLYNOMIAL	constants.F90	/^       NU_NONE       = 0, & ! No nu values (non-fissionable)$/;"	v	module:constants
NU_TABULAR	constants.F90	/^       NU_POLYNOMIAL = 1, & ! Nu values given by polynomial$/;"	v	module:constants
NXS	ace.F90	/^  integer :: NXS(/;"	v	module:ace
N_2A	constants.F90	/^       N_A         = 107, &$/;"	v	module:constants
N_2N	constants.F90	/^       N_2ND/;"	v	module:constants
N_2N2A	constants.F90	/^       N_N2A       = 29, &$/;"	v	module:constants
N_2NA	constants.F90	/^       N_N3A       = 23, &$/;"	v	module:constants
N_2ND	constants.F90	/^       MISC        = 5, &$/;"	v	module:constants
N_2NF	constants.F90	/^       N_NF        = 20, &$/;"	v	module:constants
N_2NP	constants.F90	/^       N_3NF       = 38, &$/;"	v	module:constants
N_2P	constants.F90	/^       N_3A        = 109, &$/;"	v	module:constants
N_3A	constants.F90	/^       N_2A        = 108, &$/;"	v	module:constants
N_3HE	constants.F90	/^       N_T         = 105, &$/;"	v	module:constants
N_3N	constants.F90	/^       N_2N        = 16, &$/;"	v	module:constants
N_3NA	constants.F90	/^       N_2NA       = 24, &$/;"	v	module:constants
N_3NF	constants.F90	/^       N_4N        = 37, &$/;"	v	module:constants
N_3NP	constants.F90	/^       N_2NP       = 41, &$/;"	v	module:constants
N_4N	constants.F90	/^       N_NT2A      = 36, &$/;"	v	module:constants
N_A	constants.F90	/^       N_3HE       = 106, &$/;"	v	module:constants
N_AVOGADRO	constants.F90	/^       AMU          = 1.660538921e-27,   & ! 1 amu in kg$/;"	v	module:constants
N_D	constants.F90	/^       N_P         = 103, &$/;"	v	module:constants
N_D2A	constants.F90	/^       N_T2A       = 113, &$/;"	v	module:constants
N_DA	constants.F90	/^       N_PT        = 116, &$/;"	v	module:constants
N_DISAPPEAR	constants.F90	/^       N_NC        = 91, &$/;"	v	module:constants
N_F	constants.F90	/^       N_FI/;"	v	module:constants
N_FILTER_TYPES	constants.F90	/^  integer, parameter :: N_FILTER_TYPES /;"	v	module:constants
N_FISSION	constants.F90	/^       N_3N        = 17, &$/;"	v	module:constants
N_GAMMA	constants.F90	/^       N_DISAPPEAR = 101, &$/;"	v	module:constants
N_GLOBAL_TALLIES	constants.F90	/^  integer, parameter :: N_GLOBAL_TALLIES /;"	v	module:constants
N_LEVEL	constants.F90	/^       ELASTIC     = 2, &$/;"	v	module:constants
N_N1	constants.F90	/^       N_NPA       = 45, &$/;"	v	module:constants
N_N2A	constants.F90	/^       N_NP        = 28, &$/;"	v	module:constants
N_N2P	constants.F90	/^       N_3NP       = 42, &$/;"	v	module:constants
N_N3A	constants.F90	/^       N_NA        = 22, &$/;"	v	module:constants
N_N3HE	constants.F90	/^       N_NT        = 33, &$/;"	v	module:constants
N_N40	constants.F90	/^       N_N1        = 51, &$/;"	v	module:constants
N_NA	constants.F90	/^       N_2NF       = 21, &$/;"	v	module:constants
N_NC	constants.F90	/^       N_N40       = 90, &$/;"	v	module:constants
N_ND	constants.F90	/^       N_2N2A      = 30, &$/;"	v	module:constants
N_ND2A	constants.F90	/^       N_N3HE      = 34, &$/;"	v	module:constants
N_NF	constants.F90	/^       N_F         = 19, &$/;"	v	module:constants
N_NP	constants.F90	/^       N_3NA       = 25, &$/;"	v	module:constants
N_NPA	constants.F90	/^       N_N2P       = 44, &$/;"	v	module:constants
N_NT	constants.F90	/^       N_ND        = 32, &$/;"	v	module:constants
N_NT2A	constants.F90	/^       N_ND2A      = 35, &$/;"	v	module:constants
N_P	constants.F90	/^       N_GAMMA     = 102, &$/;"	v	module:constants
N_PA	constants.F90	/^       N_2P        = 111, &$/;"	v	module:constants
N_PD	constants.F90	/^       N_D2A       = 114, &$/;"	v	module:constants
N_PT	constants.F90	/^       N_PD        = 115, &$/;"	v	module:constants
N_SCORE_TYPES	constants.F90	/^  integer, parameter :: N_SCORE_TYPES /;"	v	module:constants
N_STREAMS	random_lcg.F90	/^  integer, parameter :: N_STREAMS /;"	v	module:random_lcg
N_T	constants.F90	/^       N_D         = 104, &$/;"	v	module:constants
N_T2A	constants.F90	/^       N_PA        = 112, &$/;"	v	module:constants
Nuclide	ace_header.F90	/^  type Nuclide$/;"	t	module:ace_header
NuclideMicroXS	ace_header.F90	/^  type NuclideMicroXS$/;"	t	module:ace_header
ONE	constants.F90	/^       ZERO         = 0.0_8,             &$/;"	v	module:constants
OP_DIFFERENCE	constants.F90	/^       OP_UNION       = huge(0) - 2, & ! Union operator$/;"	v	module:constants
OP_LEFT_PAREN	constants.F90	/^  integer, parameter ::              &$/;"	v	module:constants
OP_RIGHT_PAREN	constants.F90	/^       OP_LEFT_PAREN  = huge(0),     & ! Left parentheses$/;"	v	module:constants
OP_UNION	constants.F90	/^       OP_RIGHT_PAREN = huge(0) - 1, & ! Right parentheses$/;"	v	module:constants
OUT_FRONT	constants.F90	/^       IN_FRONT  = 3,   &$/;"	v	module:constants
OUT_RIGHT	constants.F90	/^       IN_RIGHT  = 1,   &$/;"	v	module:constants
OUT_TOP	constants.F90	/^       IN_TOP    = 5,   &$/;"	v	module:constants
ObjectColor	plot_header.F90	/^  type ObjectColor$/;"	t	module:plot_header
ObjectPlot	plot_header.F90	/^  type ObjectPlot$/;"	t	module:plot_header
PARTIAL_FISSION_MAX	constants.F90	/^  integer, parameter :: PARTIAL_FISSION_MAX /;"	v	module:constants
PHOTON	constants.F90	/^       NEUTRON  = 1, &$/;"	v	module:constants
PI	constants.F90	/^  real(8), parameter ::            &$/;"	v	module:constants
PLOT_BASIS_XY	plot_header.F90	/^  integer, parameter :: PLOT_BASIS_XY /;"	v	module:plot_header
PLOT_BASIS_XZ	plot_header.F90	/^  integer, parameter :: PLOT_BASIS_XZ /;"	v	module:plot_header
PLOT_BASIS_YZ	plot_header.F90	/^  integer, parameter :: PLOT_BASIS_YZ /;"	v	module:plot_header
PLOT_COLOR_CELLS	plot_header.F90	/^  integer, parameter :: PLOT_COLOR_CELLS /;"	v	module:plot_header
PLOT_COLOR_MATS	plot_header.F90	/^  integer, parameter :: PLOT_COLOR_MATS /;"	v	module:plot_header
PLOT_TYPE_SLICE	plot_header.F90	/^  integer, parameter :: PLOT_TYPE_SLICE /;"	v	module:plot_header
PLOT_TYPE_VOXEL	plot_header.F90	/^  integer, parameter :: PLOT_TYPE_VOXEL /;"	v	module:plot_header
Particle	particle_header.F90	/^  type Particle$/;"	t	module:particle_header
ProgressBar	progress_header.F90	/^  type ProgressBar$/;"	t	module:progress_header
Q	physics.F90	/^    real(8) :: Q /;"	L	subroutine:inelastic_scatter	file:
Q	physics.F90	/^    real(8), intent(in),    optional :: Q /;"	L	subroutine:sample_energy	file:
Q_value	ace_header.F90	/^    real(8) :: Q_value /;"	k	type:Reaction
R	geometry.F90	/^    real(8) :: R /;"	L	subroutine:cross_surface	file:
R	search.F90	/^    integer :: R$/;"	L	function:binary_search_int4	file:
R	search.F90	/^    integer :: R$/;"	L	function:binary_search_int8	file:
R	search.F90	/^    integer :: R$/;"	L	function:binary_search_real	file:
REVISION_PARTICLE_RESTART	constants.F90	/^  integer, parameter :: REVISION_PARTICLE_RESTART /;"	v	module:constants
REVISION_STATEPOINT	constants.F90	/^  integer, parameter :: REVISION_STATEPOINT /;"	v	module:constants
R_k	physics.F90	/^    real(8) :: R_k,/;"	L	subroutine:sample_energy	file:
R_k1	physics.F90	/^    real(8) :: R_k, R_k1 /;"	L	subroutine:sample_energy	file:
Reaction	ace_header.F90	/^  type Reaction$/;"	t	module:ace_header
RrrData	ace_header.F90	/^  type RrrData$/;"	t	module:ace_header
S	eigenvalue.F90	/^    real(8) :: S(/;"	L	subroutine:calculate_combined_keff	file:
SAB_ELASTIC_DISCRETE	constants.F90	/^  integer, parameter :: &$/;"	v	module:constants
SAB_ELASTIC_EXACT	constants.F90	/^       SAB_ELASTIC_DISCRETE = 3, & ! Sample from discrete cosines$/;"	v	module:constants
SAB_SECONDARY_CONT	constants.F90	/^       SAB_SECONDARY_SKEWED = 1, & ! Skewed outgoing energy bins$/;"	v	module:constants
SAB_SECONDARY_EQUAL	constants.F90	/^  integer, parameter :: &$/;"	v	module:constants
SAB_SECONDARY_SKEWED	constants.F90	/^       SAB_SECONDARY_EQUAL  = 0, & ! Equally-likely outgoing energy bins$/;"	v	module:constants
SAlphaBeta	ace_header.F90	/^  type SAlphaBeta$/;"	t	module:ace_header
SCORE_ABSORPTION	constants.F90	/^       SCORE_N_1N          = -10, & ! (n,1n) rate$/;"	v	module:constants
SCORE_CURRENT	constants.F90	/^       SCORE_KAPPA_FISSION = -14, & ! fission energy production rate$/;"	v	module:constants
SCORE_EVENTS	constants.F90	/^       SCORE_NU_SCATTER_YN = -19, & ! angular flux-weighted nu-scattering moment (0:N)$/;"	v	module:constants
SCORE_FISSION	constants.F90	/^       SCORE_ABSORPTION    = -11, & ! absorption rate$/;"	v	module:constants
SCORE_FLUX	constants.F90	/^  integer, parameter :: &$/;"	v	module:constants
SCORE_FLUX_YN	constants.F90	/^       SCORE_CURRENT       = -15, & ! partial current$/;"	v	module:constants
SCORE_KAPPA_FISSION	constants.F90	/^       SCORE_NU_FISSION    = -13, & ! neutron production rate$/;"	v	module:constants
SCORE_NU_FISSION	constants.F90	/^       SCORE_FISSION       = -12, & ! fission rate$/;"	v	module:constants
SCORE_NU_SCATTER	constants.F90	/^       SCORE_SCATTER       = -3,  & ! scattering rate$/;"	v	module:constants
SCORE_NU_SCATTER_N	constants.F90	/^       SCORE_SCATTER_PN    = -6,  & ! system for scoring 0th through nth moment$/;"	v	module:constants
SCORE_NU_SCATTER_PN	constants.F90	/^       SCORE_NU_SCATTER_N  = -7,  & ! arbitrary nu-scattering moment$/;"	v	module:constants
SCORE_NU_SCATTER_YN	constants.F90	/^       SCORE_SCATTER_YN    = -18, & ! angular flux-weighted scattering moment (0:N)$/;"	v	module:constants
SCORE_N_1N	constants.F90	/^       SCORE_TRANSPORT     = -9,  & ! transport reaction rate$/;"	v	module:constants
SCORE_SCATTER	constants.F90	/^       SCORE_TOTAL         = -2,  & ! total reaction rate$/;"	v	module:constants
SCORE_SCATTER_N	constants.F90	/^       SCORE_NU_SCATTER    = -4,  & ! scattering production rate$/;"	v	module:constants
SCORE_SCATTER_PN	constants.F90	/^       SCORE_SCATTER_N     = -5,  & ! arbitrary scattering moment$/;"	v	module:constants
SCORE_SCATTER_YN	constants.F90	/^       SCORE_TOTAL_YN      = -17, & ! angular moment of total reaction rate$/;"	v	module:constants
SCORE_TOTAL	constants.F90	/^       SCORE_FLUX          = -1,  & ! flux$/;"	v	module:constants
SCORE_TOTAL_YN	constants.F90	/^       SCORE_FLUX_YN       = -16, & ! angular moment of flux$/;"	v	module:constants
SCORE_TRANSPORT	constants.F90	/^       SCORE_NU_SCATTER_PN = -8,  & ! system for scoring 0th through nth nu-scatter moment$/;"	v	module:constants
SMALL	clustering.F90	/^    real(8) :: SMALL /;"	L	subroutine:cluster_one_nuclide	file:
SMALL	clustering.F90	/^    real(8) :: SMALL /;"	L	subroutine:write_clustering	file:
SRC_ANGLE_ISOTROPIC	constants.F90	/^  integer, parameter :: &$/;"	v	module:constants
SRC_ANGLE_MONO	constants.F90	/^       SRC_ANGLE_ISOTROPIC = 1, & ! Isotropic angular$/;"	v	module:constants
SRC_ANGLE_TABULAR	constants.F90	/^       SRC_ANGLE_MONO      = 2, & ! Monodirectional source$/;"	v	module:constants
SRC_ENERGY_MAXWELL	constants.F90	/^       SRC_ENERGY_MONO    = 1, & ! Monoenergetic source$/;"	v	module:constants
SRC_ENERGY_MONO	constants.F90	/^  integer, parameter :: &$/;"	v	module:constants
SRC_ENERGY_TABULAR	constants.F90	/^       SRC_ENERGY_WATT    = 3, & ! Watt fission spectrum$/;"	v	module:constants
SRC_ENERGY_WATT	constants.F90	/^       SRC_ENERGY_MAXWELL = 2, & ! Maxwell fission spectrum$/;"	v	module:constants
SRC_SPACE_BOX	constants.F90	/^  integer, parameter :: &$/;"	v	module:constants
SRC_SPACE_POINT	constants.F90	/^       SRC_SPACE_BOX   = 1, & ! Source in a rectangular prism$/;"	v	module:constants
STREAM_TALLIES	random_lcg.F90	/^  integer, parameter :: STREAM_TALLIES /;"	v	module:random_lcg
STREAM_TRACKING	random_lcg.F90	/^  integer, parameter :: STREAM_TRACKING /;"	v	module:random_lcg
SURF_CONE_X	constants.F90	/^       SURF_SPHERE =  8, & ! Sphere$/;"	v	module:constants
SURF_CONE_Y	constants.F90	/^       SURF_CONE_X =  9, & ! Cone parallel to x-axis$/;"	v	module:constants
SURF_CONE_Z	constants.F90	/^       SURF_CONE_Y = 10, & ! Cone parallel to y-axis$/;"	v	module:constants
SURF_CYL_X	constants.F90	/^       SURF_PLANE  =  4, & ! Arbitrary plane$/;"	v	module:constants
SURF_CYL_Y	constants.F90	/^       SURF_CYL_X  =  5, & ! Cylinder along x-axis$/;"	v	module:constants
SURF_CYL_Z	constants.F90	/^       SURF_CYL_Y  =  6, & ! Cylinder along y-axis$/;"	v	module:constants
SURF_PLANE	constants.F90	/^       SURF_PZ     =  3, & ! Plane parallel to z-plane$/;"	v	module:constants
SURF_PX	constants.F90	/^  integer, parameter ::  &$/;"	v	module:constants
SURF_PY	constants.F90	/^       SURF_PX     =  1, & ! Plane parallel to x-plane$/;"	v	module:constants
SURF_PZ	constants.F90	/^       SURF_PY     =  2, & ! Plane parallel to y-plane$/;"	v	module:constants
SURF_SPHERE	constants.F90	/^       SURF_CYL_Z  =  7, & ! Cylinder along z-axis$/;"	v	module:constants
SetChar	set_header.F90	/^  type :: SetChar$/;"	t	module:set_header
SetInt	set_header.F90	/^  type :: SetInt$/;"	t	module:set_header
StructuredMesh	mesh_header.F90	/^  type StructuredMesh$/;"	t	module:mesh_header
Surface	geometry_header.F90	/^  type Surface$/;"	t	module:geometry_header
T	doppler.F90	/^    real(8), intent(in)  :: T /;"	L	subroutine:broaden	file:
T	math.F90	/^    real(8), intent(in)  :: T /;"	L	function:maxwell_spectrum	file:
T	physics.F90	/^    real(8) :: T /;"	L	subroutine:sample_energy	file:
TALLY_SURFACE_CURRENT	constants.F90	/^       TALLY_VOLUME          = 1, &$/;"	v	module:constants
TALLY_VOLUME	constants.F90	/^  integer, parameter :: &$/;"	v	module:constants
TINY_BIT	constants.F90	/^  real(8), parameter :: TINY_BIT /;"	v	module:constants
TOTAL_XS	constants.F90	/^  integer, parameter :: &$/;"	v	module:constants
TWO	constants.F90	/^       ONE          = 1.0_8,             &$/;"	v	module:constants
Tab1	endf_header.F90	/^  type Tab1$/;"	t	module:endf_header
TallyFilter	tally_header.F90	/^  type TallyFilter$/;"	t	module:tally_header
TallyMap	tally_header.F90	/^  type TallyMap$/;"	t	module:tally_header
TallyMapElement	tally_header.F90	/^  type TallyMapElement$/;"	t	module:tally_header
TallyMapItem	tally_header.F90	/^  type TallyMapItem$/;"	t	module:tally_header
TallyObject	tally_header.F90	/^  type TallyObject$/;"	t	module:tally_header
TallyResult	tally_header.F90	/^  type TallyResult$/;"	t	module:tally_header
Timer	timer_header.F90	/^  type Timer$/;"	t	module:timer_header
U	physics.F90	/^    real(8) :: U /;"	L	subroutine:sample_energy	file:
UNIT_OUTPUT	constants.F90	/^  integer, parameter :: UNIT_OUTPUT /;"	v	module:constants
UNIT_PARTICLE	constants.F90	/^  integer, parameter :: UNIT_PARTICLE /;"	v	module:constants
UNIT_PLOT	constants.F90	/^  integer, parameter :: UNIT_PLOT /;"	v	module:constants
UNIT_SUMMARY	constants.F90	/^  integer, parameter :: UNIT_SUMMARY /;"	v	module:constants
UNIT_TALLY	constants.F90	/^  integer, parameter :: UNIT_TALLY /;"	v	module:constants
UNIT_XS	constants.F90	/^  integer, parameter :: UNIT_XS /;"	v	module:constants
URR_CUM_PROB	constants.F90	/^  integer, parameter :: &$/;"	v	module:constants
URR_ELASTIC	constants.F90	/^       URR_TOTAL    = 2, &$/;"	v	module:constants
URR_FISSION	constants.F90	/^       URR_ELASTIC  = 3, &$/;"	v	module:constants
URR_HEATING	constants.F90	/^       URR_N_GAMMA  = 5, &$/;"	v	module:constants
URR_N_GAMMA	constants.F90	/^       URR_FISSION  = 4, &$/;"	v	module:constants
URR_TOTAL	constants.F90	/^       URR_CUM_PROB = 1, &$/;"	v	module:constants
Universe	geometry_header.F90	/^  type Universe$/;"	t	module:geometry_header
UrrData	ace_header.F90	/^  type UrrData$/;"	t	module:ace_header
VERSION_MAJOR	constants.F90	/^  integer, parameter :: VERSION_MAJOR /;"	v	module:constants
VERSION_MINOR	constants.F90	/^  integer, parameter :: VERSION_MINOR /;"	v	module:constants
VERSION_RELEASE	constants.F90	/^  integer, parameter :: VERSION_RELEASE /;"	v	module:constants
Vector	vector_header.F90	/^  type, public :: Vector /;"	t	module:vector_header
Watt_a	physics.F90	/^    real(8) :: Watt_a,/;"	L	subroutine:sample_energy	file:
Watt_b	physics.F90	/^    real(8) :: Watt_a, Watt_b /;"	L	subroutine:sample_energy	file:
XSS	ace.F90	/^  real(8), allocatable :: XSS(/;"	v	module:ace
XSS_index	ace.F90	/^  integer :: XSS_index /;"	v	module:ace
XsListing	ace_header.F90	/^  type XsListing$/;"	t	module:ace_header
YN_LOC	constants.F90	/^  integer, parameter :: YN_LOC /;"	v	module:constants
ZERO	constants.F90	/^       INFINITY     = huge(0.0_8),       & ! positive infinity$/;"	v	module:constants
ZERO_FLUX	constants.F90	/^  real(8), parameter :: ZERO_FLUX /;"	v	module:constants
a	doppler.F90	/^    real/;"	L	subroutine:broaden	file:
a	doppler.F90	/^    real/;"	L	subroutine:calculate_F	file:
a	geometry.F90	/^    real/;"	L	subroutine:distance_to_boundary	file:
a	math.F90	/^    real/;"	L	function:normal_percentile	file:
a	math.F90	/^    real/;"	L	function:watt_spectrum	file:
a	physics.F90	/^    real/;"	L	function:rotate_angle	file:
a	source.F90	/^    real/;"	L	subroutine:sample_external_source	file:
absorb_wgt	particle_header.F90	/^    real(8)    :: absorb_wgt /;"	k	type:Particle
absorption	ace_header.F90	/^    real(8) :: absorption /;"	k	type:MaterialMacroXS
absorption	ace_header.F90	/^    real(8) :: absorption /;"	k	type:NuclideMicroXS
absorption	ace_header.F90	/^    real(8), allocatable :: absorption(/;"	k	type:Nuclide
absorption	physics.F90	/^  subroutine absorption(/;"	s	module:physics
absorption_flag	ace_header.F90	/^    integer :: absorption_flag /;"	k	type:UrrData
accept_prob	physics.F90	/^    real(8) :: accept_prob /;"	L	subroutine:sample_target_velocity	file:
accumulate_result	tally.F90	/^  elemental subroutine accumulate_result(/;"	s	module:tally
accumulate_tally	tally.F90	/^  subroutine accumulate_tally(/;"	s	module:tally
ace	ace.F90	/^module ace$/;"	m
ace_header	ace_header.F90	/^module ace_header$/;"	m
actual_sense	geometry.F90	/^    logical :: actual_sense /;"	L	function:simple_cell_contains	file:
add_grid_points	energy_grid.F90	/^  subroutine add_grid_points(/;"	s	module:energy_grid
add_map_element	tally_initialize.F90	/^  subroutine add_map_element(/;"	s	module:tally_initialize
add_tallies	tally_initialize.F90	/^  subroutine add_tallies(/;"	s	module:tally_initialize
adist	ace_header.F90	/^    type(DistAngle)           :: adist /;"	k	type:Reaction
adj_keff	cmfd_header.F90	/^    real(8) :: adj_keff /;"	k	type:cmfd_type
adj_phi	cmfd_header.F90	/^    real(8), allocatable :: adj_phi(/;"	k	type:cmfd_type
adjoint	cmfd_jfnk_solver.F90	/^    logical, intent(in), optional :: adjoint /;"	L	subroutine:cmfd_jfnk_execute	file:
adjoint	cmfd_loss_operator.F90	/^    logical, intent(in), optional :: adjoint /;"	L	subroutine:build_loss_matrix	file:
adjoint	cmfd_power_solver.F90	/^    logical, intent(in) :: adjoint /;"	L	subroutine:init_data	file:
adjoint	cmfd_power_solver.F90	/^    logical, intent(in), optional :: adjoint /;"	L	subroutine:cmfd_power_execute	file:
adjoint	cmfd_prod_operator.F90	/^    logical, intent(in), optional :: adjoint /;"	L	subroutine:build_prod_matrix	file:
adjoint_calc	cmfd_jfnk_solver.F90	/^  logical          :: adjoint_calc /;"	v	module:cmfd_jfnk_solver
adjoint_calc	cmfd_loss_operator.F90	/^    logical :: adjoint_calc /;"	L	subroutine:build_loss_matrix	file:
adjoint_calc	cmfd_power_solver.F90	/^  logical :: adjoint_calc /;"	v	module:cmfd_power_solver
adjoint_calc	cmfd_prod_operator.F90	/^    logical :: adjoint_calc /;"	L	subroutine:build_prod_matrix	file:
adjust_indices	initialize.F90	/^  subroutine adjust_indices(/;"	s	module:initialize
albedo	cmfd_data.F90	/^    real(8) :: albedo /;"	L	function:get_reflector_albedo	file:
albedo	cmfd_data.F90	/^    real(8) :: albedo(/;"	L	subroutine:compute_dtilde	file:
albedo	cmfd_header.F90	/^    real(8) :: albedo(/;"	k	type:cmfd_type
alias	ace.F90	/^    character(12)  :: alias /;"	L	subroutine:read_xs	file:
alias	ace_header.F90	/^    character(12) :: alias /;"	k	type:XsListing
alias	input_xml.F90	/^    character(12) :: alias /;"	L	subroutine:read_materials_xml	file:
alive	particle_header.F90	/^    logical    :: alive /;"	k	type:Particle
all_nuclides	tally_header.F90	/^    logical              :: all_nuclides /;"	k	type:TallyObject
alloc_err	initialize.F90	/^    integer :: alloc_err /;"	L	subroutine:allocate_banks	file:
allocate_banks	initialize.F90	/^  subroutine allocate_banks(/;"	s	module:initialize
allocate_cmfd	cmfd_header.F90	/^  subroutine allocate_cmfd(/;"	s	module:cmfd_header
allocate_image	ppmlib.F90	/^  subroutine allocate_image(/;"	s	module:ppmlib
alpha	doppler.F90	/^    real(8)              :: alpha /;"	L	subroutine:broaden	file:
alpha	eigenvalue.F90	/^    real(8) :: alpha /;"	L	subroutine:calculate_average_keff	file:
alpha	output.F90	/^    real(8) :: alpha /;"	L	subroutine:print_results	file:
alpha	output.F90	/^    real(8) :: alpha /;"	L	subroutine:write_tallies	file:
alpha	physics.F90	/^    real(8) :: alpha /;"	L	subroutine:sample_target_velocity	file:
apply_clustering_to_all_xs	clustering.F90	/^  subroutine apply_clustering_to_all_xs(/;"	s	module:clustering
argc	initialize.F90	/^    integer :: argc /;"	L	subroutine:read_command_line	file:
argv	initialize.F90	/^    character(MAX_WORD_LEN), allocatable :: argv(/;"	L	subroutine:read_command_line	file:
array	ace.F90	/^    integer             :: array(/;"	L	function:get_int	file:
array	ace.F90	/^    real(8)             :: array(/;"	L	function:get_real	file:
array	search.F90	/^    integer(8), intent(in) :: array(/;"	L	function:binary_search_int8	file:
array	search.F90	/^    integer, intent(in) :: array(/;"	L	function:binary_search_int4	file:
array	search.F90	/^    real(8), intent(in) :: array(/;"	L	function:binary_search_real	file:
array_index	search.F90	/^    integer                :: array_index$/;"	L	function:binary_search_int8	file:
array_index	search.F90	/^    integer             :: array_index$/;"	L	function:binary_search_int4	file:
array_index	search.F90	/^    integer             :: array_index$/;"	L	function:binary_search_real	file:
atom_density	cross_section.F90	/^    real(8) :: atom_density /;"	L	subroutine:calculate_xs	file:
atom_density	material_header.F90	/^    real(8), allocatable :: atom_density(/;"	k	type:Material
atom_density	physics.F90	/^    real(8) :: atom_density /;"	L	function:sample_nuclide	file:
atom_density	tally.F90	/^    real(8) :: atom_density /;"	L	subroutine:score_all_nuclides	file:
atom_density	tally.F90	/^    real(8) :: atom_density /;"	L	subroutine:score_tl_on_mesh	file:
atom_density	tally.F90	/^    real(8) :: atom_density /;"	L	subroutine:score_tracklength_tally	file:
attr_str	hdf5_interface.F90	/^    character(*),   intent(in) :: attr_str /;"	L	subroutine:hdf5_write_attribute_string	file:
attr_str	output_interface.F90	/^    character(*), intent(in)           :: attr_str /;"	L	subroutine:write_attribute_string	file:
attr_type	hdf5_interface.F90	/^    character(*),   intent(in) :: attr_type /;"	L	subroutine:hdf5_write_attribute_string	file:
attr_type	output_interface.F90	/^    character(*), intent(in)           :: attr_type /;"	L	subroutine:write_attribute_string	file:
awr	ace.F90	/^    real(8)       :: awr /;"	L	subroutine:read_ace_table	file:
awr	ace_header.F90	/^    real(8)       :: awr /;"	k	type:Nuclide
awr	ace_header.F90	/^    real(8)       :: awr /;"	k	type:SAlphaBeta
awr	ace_header.F90	/^    real(8)       :: awr /;"	k	type:XsListing
awr	initialize.F90	/^    real(8)        :: awr /;"	L	subroutine:normalize_ao	file:
awr	physics.F90	/^    real(8) :: awr /;"	L	subroutine:elastic_scatter	file:
awrs	ace.F90	/^    real(8)       :: awrs(/;"	L	subroutine:read_ace_table	file:
b	doppler.F90	/^    real(8)              :: a, b /;"	L	subroutine:broaden	file:
b	geometry.F90	/^    real(8) :: a,b,/;"	L	subroutine:distance_to_boundary	file:
b	initialize.F90	/^    type(Bank)       :: b$/;"	L	subroutine:initialize_mpi	file:
b	math.F90	/^    real(8), intent(in) :: b /;"	L	function:watt_spectrum	file:
b	math.F90	/^    real(8), parameter :: b(/;"	L	function:normal_percentile	file:
b	physics.F90	/^    real(8) :: b /;"	L	function:rotate_angle	file:
b	ppmlib.F90	/^    integer,     intent(in)    :: r, g, b /;"	L	subroutine:set_pixel	file:
b	source.F90	/^    real(8) :: b /;"	L	subroutine:sample_external_source	file:
b	tally.F90	/^    integer :: b /;"	L	subroutine:score_tl_on_mesh	file:
balance	cmfd_header.F90	/^    real(8), allocatable :: balance(/;"	k	type:cmfd_type
bank_array	mesh.F90	/^    type(Bank), intent(in)        :: bank_array(/;"	L	subroutine:count_bank_sites	file:
bank_blocks	initialize.F90	/^    integer                   :: bank_blocks(/;"	L	subroutine:initialize_mpi	file:
bank_disp	initialize.F90	/^    integer(MPI_ADDRESS_KIND) :: bank_disp(/;"	L	subroutine:initialize_mpi	file:
bank_header	bank_header.F90	/^module bank_header$/;"	m
bank_position	eigenvalue.F90	/^    integer(8), save, allocatable :: &$/;"	L	subroutine:synchronize_bank	file:
bank_types	initialize.F90	/^    integer                   :: bank_types(/;"	L	subroutine:initialize_mpi	file:
bar	progress_header.F90	/^    character(len=72) :: bar=/;"	k	type:ProgressBar
bar_set_value	progress_header.F90	/^  subroutine bar_set_value(/;"	s	module:progress_header
base	physics.F90	/^    character(7),   intent(in) :: base /;"	L	function:sample_nuclide	file:
basis	plot_header.F90	/^    integer :: basis /;"	k	type:ObjectPlot
bc	geometry_header.F90	/^     integer :: bc /;"	k	type:Surface
beta	physics.F90	/^    real(8) :: beta /;"	L	function:sample_fission_energy	file:
beta_vn	physics.F90	/^    real(8) :: beta_vn /;"	L	subroutine:sample_target_velocity	file:
beta_vt	physics.F90	/^    real(8) :: beta_vt /;"	L	subroutine:sample_target_velocity	file:
beta_vt_sq	physics.F90	/^    real(8) :: beta_vt_sq /;"	L	subroutine:sample_target_velocity	file:
bin	mesh.F90	/^    integer                       :: bin$/;"	L	function:mesh_indices_to_bin	file:
bin	mesh.F90	/^    integer, intent(in)           :: bin$/;"	L	subroutine:bin_to_mesh_indices	file:
bin	mesh.F90	/^    integer, intent(out)          :: bin /;"	L	subroutine:get_mesh_bin	file:
bin	output.F90	/^    integer :: bin$/;"	L	function:get_label	file:
bin	tally.F90	/^    integer             :: bin /;"	L	function:get_next_bin	file:
bin	tally_initialize.F90	/^    integer :: bin /;"	L	subroutine:setup_tally_maps	file:
bin_energyout	tally.F90	/^    integer :: bin_energyout /;"	L	subroutine:score_fission_eout	file:
bin_to_mesh_indices	mesh.F90	/^  subroutine bin_to_mesh_indices(/;"	s	module:mesh
binary_search	search.F90	/^  interface binary_search$/;"	i	module:search
binary_search_int4	search.F90	/^  function binary_search_int4(/;"	f	module:search
binary_search_int8	search.F90	/^  function binary_search_int8(/;"	f	module:search
binary_search_real	search.F90	/^  function binary_search_real(/;"	f	module:search
binout	track_output.F90	/^    type(BinaryOutput)       :: binout$/;"	L	subroutine:finalize_particle_track	file:
blue	ppmlib.F90	/^    integer, dimension(:,:), pointer :: red, green, blue$/;"	k	type:Image
bound	cmfd_data.F90	/^    integer :: bound(/;"	L	subroutine:compute_dhat	file:
bound	cmfd_data.F90	/^    integer :: bound(/;"	L	subroutine:compute_dtilde	file:
bound	cmfd_loss_operator.F90	/^    integer :: bound(/;"	L	function:preallocate_loss_matrix	file:
bound	cmfd_loss_operator.F90	/^    integer :: bound(/;"	L	subroutine:build_loss_matrix	file:
boundary_exists	input_xml.F90	/^    logical :: boundary_exists$/;"	L	subroutine:read_geometry_xml	file:
broaden	doppler.F90	/^  subroutine broaden(/;"	s	module:doppler
buffer	hdf5_interface.F90	/^    character(*),   intent(in)    :: buffer /;"	L	subroutine:hdf5_write_string	file:
buffer	hdf5_interface.F90	/^    character(*),   intent(in)    :: buffer /;"	L	subroutine:hdf5_write_string_parallel	file:
buffer	hdf5_interface.F90	/^    character(*),   intent(inout) :: buffer /;"	L	subroutine:hdf5_read_string	file:
buffer	hdf5_interface.F90	/^    character(*),   intent(inout) :: buffer /;"	L	subroutine:hdf5_read_string_parallel	file:
buffer	hdf5_interface.F90	/^    integer(8), target, intent(in) :: buffer /;"	L	subroutine:hdf5_write_long	file:
buffer	hdf5_interface.F90	/^    integer(8), target, intent(in) :: buffer /;"	L	subroutine:hdf5_write_long_parallel	file:
buffer	hdf5_interface.F90	/^    integer(8), target, intent(out) :: buffer /;"	L	subroutine:hdf5_read_long	file:
buffer	hdf5_interface.F90	/^    integer(8), target, intent(out) :: buffer /;"	L	subroutine:hdf5_read_long_parallel	file:
buffer	hdf5_interface.F90	/^    integer,        intent(in)    :: buffer(/;"	L	subroutine:hdf5_write_integer_4Darray	file:
buffer	hdf5_interface.F90	/^    integer,        intent(in) :: buffer /;"	L	subroutine:hdf5_write_integer	file:
buffer	hdf5_interface.F90	/^    integer,        intent(in) :: buffer(/;"	L	subroutine:hdf5_write_integer_1Darray	file:
buffer	hdf5_interface.F90	/^    integer,        intent(in) :: buffer(/;"	L	subroutine:hdf5_write_integer_2Darray	file:
buffer	hdf5_interface.F90	/^    integer,        intent(in) :: buffer(/;"	L	subroutine:hdf5_write_integer_3Darray	file:
buffer	hdf5_interface.F90	/^    integer,        intent(inout) :: buffer /;"	L	subroutine:hdf5_read_integer	file:
buffer	hdf5_interface.F90	/^    integer,        intent(inout) :: buffer(/;"	L	subroutine:hdf5_read_integer_1Darray	file:
buffer	hdf5_interface.F90	/^    integer,        intent(inout) :: buffer(/;"	L	subroutine:hdf5_read_integer_2Darray	file:
buffer	hdf5_interface.F90	/^    integer,        intent(inout) :: buffer(/;"	L	subroutine:hdf5_read_integer_3Darray	file:
buffer	hdf5_interface.F90	/^    integer,        intent(inout) :: buffer(/;"	L	subroutine:hdf5_read_integer_4Darray	file:
buffer	hdf5_interface.F90	/^    integer, target, intent(inout) :: buffer /;"	L	subroutine:hdf5_read_integer_parallel	file:
buffer	hdf5_interface.F90	/^    integer, target, intent(inout) :: buffer(/;"	L	subroutine:hdf5_read_integer_1Darray_parallel	file:
buffer	hdf5_interface.F90	/^    integer,target, intent(in)    :: buffer(/;"	L	subroutine:hdf5_write_integer_4Darray_parallel	file:
buffer	hdf5_interface.F90	/^    integer,target, intent(in) :: buffer /;"	L	subroutine:hdf5_write_integer_parallel	file:
buffer	hdf5_interface.F90	/^    integer,target, intent(in) :: buffer(/;"	L	subroutine:hdf5_write_integer_1Darray_parallel	file:
buffer	hdf5_interface.F90	/^    integer,target, intent(in) :: buffer(/;"	L	subroutine:hdf5_write_integer_2Darray_parallel	file:
buffer	hdf5_interface.F90	/^    integer,target, intent(in) :: buffer(/;"	L	subroutine:hdf5_write_integer_3Darray_parallel	file:
buffer	hdf5_interface.F90	/^    integer,target, intent(inout) :: buffer(/;"	L	subroutine:hdf5_read_integer_2Darray_parallel	file:
buffer	hdf5_interface.F90	/^    integer,target, intent(inout) :: buffer(/;"	L	subroutine:hdf5_read_integer_3Darray_parallel	file:
buffer	hdf5_interface.F90	/^    integer,target, intent(inout) :: buffer(/;"	L	subroutine:hdf5_read_integer_4Darray_parallel	file:
buffer	hdf5_interface.F90	/^    real(8),        intent(in)    :: buffer(/;"	L	subroutine:hdf5_write_double_4Darray	file:
buffer	hdf5_interface.F90	/^    real(8),        intent(in) :: buffer /;"	L	subroutine:hdf5_write_double	file:
buffer	hdf5_interface.F90	/^    real(8),        intent(in) :: buffer(/;"	L	subroutine:hdf5_write_double_1Darray	file:
buffer	hdf5_interface.F90	/^    real(8),        intent(in) :: buffer(/;"	L	subroutine:hdf5_write_double_2Darray	file:
buffer	hdf5_interface.F90	/^    real(8),        intent(in) :: buffer(/;"	L	subroutine:hdf5_write_double_3Darray	file:
buffer	hdf5_interface.F90	/^    real(8),        intent(inout) :: buffer /;"	L	subroutine:hdf5_read_double	file:
buffer	hdf5_interface.F90	/^    real(8),        intent(inout) :: buffer(/;"	L	subroutine:hdf5_read_double_1Darray	file:
buffer	hdf5_interface.F90	/^    real(8),        intent(inout) :: buffer(/;"	L	subroutine:hdf5_read_double_2Darray	file:
buffer	hdf5_interface.F90	/^    real(8),        intent(inout) :: buffer(/;"	L	subroutine:hdf5_read_double_3Darray	file:
buffer	hdf5_interface.F90	/^    real(8),        intent(inout) :: buffer(/;"	L	subroutine:hdf5_read_double_4Darray	file:
buffer	hdf5_interface.F90	/^    real(8), target, intent(inout) :: buffer /;"	L	subroutine:hdf5_read_double_parallel	file:
buffer	hdf5_interface.F90	/^    real(8),target,  intent(inout) :: buffer(/;"	L	subroutine:hdf5_read_double_1Darray_parallel	file:
buffer	hdf5_interface.F90	/^    real(8),target, intent(in)    :: buffer(/;"	L	subroutine:hdf5_write_double_4Darray_parallel	file:
buffer	hdf5_interface.F90	/^    real(8),target, intent(in) :: buffer /;"	L	subroutine:hdf5_write_double_parallel	file:
buffer	hdf5_interface.F90	/^    real(8),target, intent(in) :: buffer(/;"	L	subroutine:hdf5_write_double_1Darray_parallel	file:
buffer	hdf5_interface.F90	/^    real(8),target, intent(in) :: buffer(/;"	L	subroutine:hdf5_write_double_2Darray_parallel	file:
buffer	hdf5_interface.F90	/^    real(8),target, intent(in) :: buffer(/;"	L	subroutine:hdf5_write_double_3Darray_parallel	file:
buffer	hdf5_interface.F90	/^    real(8),target, intent(inout) :: buffer(/;"	L	subroutine:hdf5_read_double_2Darray_parallel	file:
buffer	hdf5_interface.F90	/^    real(8),target, intent(inout) :: buffer(/;"	L	subroutine:hdf5_read_double_3Darray_parallel	file:
buffer	hdf5_interface.F90	/^    real(8),target, intent(inout) :: buffer(/;"	L	subroutine:hdf5_read_double_4Darray_parallel	file:
buffer	mpiio_interface.F90	/^    character(*), intent(in) :: buffer /;"	L	subroutine:mpi_write_string	file:
buffer	mpiio_interface.F90	/^    character(*), intent(inout) :: buffer /;"	L	subroutine:mpi_read_string	file:
buffer	mpiio_interface.F90	/^    integer(8), intent(in) :: buffer /;"	L	subroutine:mpi_write_long	file:
buffer	mpiio_interface.F90	/^    integer(8), intent(inout) :: buffer /;"	L	subroutine:mpi_read_long	file:
buffer	mpiio_interface.F90	/^    integer, intent(in) :: buffer /;"	L	subroutine:mpi_write_integer	file:
buffer	mpiio_interface.F90	/^    integer, intent(in) :: buffer(/;"	L	subroutine:mpi_write_integer_1Darray	file:
buffer	mpiio_interface.F90	/^    integer, intent(in) :: buffer(/;"	L	subroutine:mpi_write_integer_2Darray	file:
buffer	mpiio_interface.F90	/^    integer, intent(in) :: buffer(/;"	L	subroutine:mpi_write_integer_3Darray	file:
buffer	mpiio_interface.F90	/^    integer, intent(in) :: buffer(/;"	L	subroutine:mpi_write_integer_4Darray	file:
buffer	mpiio_interface.F90	/^    integer, intent(inout) :: buffer /;"	L	subroutine:mpi_read_integer	file:
buffer	mpiio_interface.F90	/^    integer, intent(inout) :: buffer(/;"	L	subroutine:mpi_read_integer_1Darray	file:
buffer	mpiio_interface.F90	/^    integer, intent(inout) :: buffer(/;"	L	subroutine:mpi_read_integer_2Darray	file:
buffer	mpiio_interface.F90	/^    integer, intent(inout) :: buffer(/;"	L	subroutine:mpi_read_integer_3Darray	file:
buffer	mpiio_interface.F90	/^    integer, intent(inout) :: buffer(/;"	L	subroutine:mpi_read_integer_4Darray	file:
buffer	mpiio_interface.F90	/^    real(8), intent(in) :: buffer /;"	L	subroutine:mpi_write_double	file:
buffer	mpiio_interface.F90	/^    real(8), intent(in) :: buffer(/;"	L	subroutine:mpi_write_double_1Darray	file:
buffer	mpiio_interface.F90	/^    real(8), intent(in) :: buffer(/;"	L	subroutine:mpi_write_double_2Darray	file:
buffer	mpiio_interface.F90	/^    real(8), intent(in) :: buffer(/;"	L	subroutine:mpi_write_double_3Darray	file:
buffer	mpiio_interface.F90	/^    real(8), intent(in) :: buffer(/;"	L	subroutine:mpi_write_double_4Darray	file:
buffer	mpiio_interface.F90	/^    real(8), intent(inout) :: buffer /;"	L	subroutine:mpi_read_double	file:
buffer	mpiio_interface.F90	/^    real(8), intent(inout) :: buffer(/;"	L	subroutine:mpi_read_double_1Darray	file:
buffer	mpiio_interface.F90	/^    real(8), intent(inout) :: buffer(/;"	L	subroutine:mpi_read_double_2Darray	file:
buffer	mpiio_interface.F90	/^    real(8), intent(inout) :: buffer(/;"	L	subroutine:mpi_read_double_3Darray	file:
buffer	mpiio_interface.F90	/^    real(8), intent(inout) :: buffer(/;"	L	subroutine:mpi_read_double_4Darray	file:
buffer	output_interface.F90	/^    character(*), intent(in)           :: buffer /;"	L	subroutine:write_string	file:
buffer	output_interface.F90	/^    character(*), intent(inout)        :: buffer /;"	L	subroutine:read_string	file:
buffer	output_interface.F90	/^    integer(8),   intent(in)           :: buffer /;"	L	subroutine:write_long	file:
buffer	output_interface.F90	/^    integer(8),   intent(inout)        :: buffer /;"	L	subroutine:read_long	file:
buffer	output_interface.F90	/^    integer,        intent(inout)        :: buffer(/;"	L	subroutine:read_integer_1Darray	file:
buffer	output_interface.F90	/^    integer,      intent(in)           :: buffer /;"	L	subroutine:write_integer	file:
buffer	output_interface.F90	/^    integer,      intent(in)           :: buffer(/;"	L	subroutine:write_integer_1Darray	file:
buffer	output_interface.F90	/^    integer,      intent(in)           :: buffer(/;"	L	subroutine:write_integer_2Darray	file:
buffer	output_interface.F90	/^    integer,      intent(in)           :: buffer(/;"	L	subroutine:write_integer_3Darray	file:
buffer	output_interface.F90	/^    integer,      intent(in)           :: buffer(/;"	L	subroutine:write_integer_4Darray	file:
buffer	output_interface.F90	/^    integer,      intent(inout)        :: buffer /;"	L	subroutine:read_integer	file:
buffer	output_interface.F90	/^    integer,      intent(inout)        :: buffer(/;"	L	subroutine:read_integer_2Darray	file:
buffer	output_interface.F90	/^    integer,      intent(inout)        :: buffer(/;"	L	subroutine:read_integer_3Darray	file:
buffer	output_interface.F90	/^    integer,      intent(inout)        :: buffer(/;"	L	subroutine:read_integer_4Darray	file:
buffer	output_interface.F90	/^    real(8),        intent(inout)        :: buffer(/;"	L	subroutine:read_double_1Darray	file:
buffer	output_interface.F90	/^    real(8),      intent(in)           :: buffer /;"	L	subroutine:write_double	file:
buffer	output_interface.F90	/^    real(8),      intent(in)           :: buffer(/;"	L	subroutine:write_double_1Darray	file:
buffer	output_interface.F90	/^    real(8),      intent(in)           :: buffer(/;"	L	subroutine:write_double_2Darray	file:
buffer	output_interface.F90	/^    real(8),      intent(in)           :: buffer(/;"	L	subroutine:write_double_3Darray	file:
buffer	output_interface.F90	/^    real(8),      intent(in)           :: buffer(/;"	L	subroutine:write_double_4Darray	file:
buffer	output_interface.F90	/^    real(8),      intent(inout)        :: buffer /;"	L	subroutine:read_double	file:
buffer	output_interface.F90	/^    real(8),      intent(inout)        :: buffer(/;"	L	subroutine:read_double_2Darray	file:
buffer	output_interface.F90	/^    real(8),      intent(inout)        :: buffer(/;"	L	subroutine:read_double_3Darray	file:
buffer	output_interface.F90	/^    real(8),      intent(inout)        :: buffer(/;"	L	subroutine:read_double_4Darray	file:
buffer	output_interface.F90	/^    type(TallyResult), intent(in), target   :: buffer(/;"	L	subroutine:write_tally_result	file:
buffer	output_interface.F90	/^    type(TallyResult), intent(inout), target :: buffer(/;"	L	subroutine:read_tally_result	file:
buffer_copy	hdf5_interface.F90	/^    integer :: buffer_copy(/;"	L	subroutine:hdf5_read_integer	file:
buffer_copy	hdf5_interface.F90	/^    real(8) :: buffer_copy(/;"	L	subroutine:hdf5_read_double	file:
build_jacobian_matrix	cmfd_jfnk_solver.F90	/^  subroutine build_jacobian_matrix(/;"	s	module:cmfd_jfnk_solver
build_loss_matrix	cmfd_loss_operator.F90	/^  subroutine build_loss_matrix(/;"	s	module:cmfd_loss_operator
build_prod_matrix	cmfd_prod_operator.F90	/^  subroutine build_prod_matrix(/;"	s	module:cmfd_prod_operator
c	fission.F90	/^    real(8) :: c /;"	L	function:nu_prompt	file:
c	fission.F90	/^    real(8) :: c /;"	L	function:nu_total	file:
c	geometry.F90	/^    real(8) :: a,b,c,/;"	L	subroutine:distance_to_boundary	file:
c	geometry.F90	/^    type(Cell),       pointer, save :: c /;"	L	subroutine:check_cell_overlap	file:
c	geometry.F90	/^    type(Cell),     pointer       :: c$/;"	L	function:simple_cell_contains	file:
c	geometry.F90	/^    type(Cell),     pointer, save :: c /;"	L	subroutine:find_cell	file:
c	geometry.F90	/^    type(Cell),    pointer  :: c$/;"	L	subroutine:neighbor_lists	file:
c	hdf5_summary.F90	/^    type(Cell),     pointer :: c /;"	L	subroutine:hdf5_write_geometry	file:
c	initialize.F90	/^    type(Cell),        pointer :: c /;"	L	subroutine:adjust_indices	file:
c	input_xml.F90	/^    type(Cell),    pointer :: c /;"	L	subroutine:read_geometry_xml	file:
c	math.F90	/^    real(8) :: c /;"	L	function:maxwell_spectrum	file:
c	math.F90	/^    real(8), parameter :: c(/;"	L	function:normal_percentile	file:
c	output.F90	/^    type(Cell),           pointer :: c /;"	L	subroutine:print_tally	file:
c	output.F90	/^    type(Cell),       pointer :: c /;"	L	subroutine:print_particle	file:
c	output.F90	/^    type(Cell), pointer     :: c /;"	L	subroutine:print_universe	file:
c	output.F90	/^    type(Cell), pointer :: c /;"	L	subroutine:print_surface	file:
c	output.F90	/^    type(Cell), pointer :: c$/;"	L	subroutine:print_cell	file:
c	physics.F90	/^    real(8) :: c /;"	L	subroutine:sample_target_velocity	file:
c	plot.F90	/^    type(Cell), pointer :: c /;"	L	subroutine:position_rgb	file:
c	random_lcg.F90	/^    integer(8) :: c /;"	L	function:prn_skip_ahead	file:
c_done	clustering.F90	/^    logical, allocatable :: c_done(/;"	L	subroutine:reorder_clusters	file:
c_k	physics.F90	/^    real(8)        :: c_k /;"	L	function:sample_angle	file:
c_k	physics.F90	/^    real(8) :: c_k,/;"	L	subroutine:sample_energy	file:
c_k1	physics.F90	/^    real(8)        :: c_k1 /;"	L	function:sample_angle	file:
c_k1	physics.F90	/^    real(8) :: c_k, c_k1 /;"	L	subroutine:sample_energy	file:
c_map	clustering.F90	/^    integer, allocatable :: c_map(/;"	L	subroutine:reorder_clusters	file:
c_new	random_lcg.F90	/^    integer(8) :: c_new /;"	L	function:prn_skip_ahead	file:
c_scratch	clustering.F90	/^    integer, allocatable :: c_scratch(/;"	L	subroutine:thin_energy_grid	file:
calc_fission_source	cmfd_execute.F90	/^  subroutine calc_fission_source(/;"	s	module:cmfd_execute
calc_pn	math.F90	/^  pure function calc_pn(/;"	f	module:math
calc_rn	math.F90	/^  pure function calc_rn(/;"	f	module:math
calculate_F	doppler.F90	/^  subroutine calculate_F(/;"	s	module:doppler
calculate_average_keff	eigenvalue.F90	/^  subroutine calculate_average_keff(/;"	s	module:eigenvalue
calculate_combined_keff	eigenvalue.F90	/^  subroutine calculate_combined_keff(/;"	s	module:eigenvalue
calculate_generation_keff	eigenvalue.F90	/^  subroutine calculate_generation_keff(/;"	s	module:eigenvalue
calculate_nuclide_xs	cross_section.F90	/^  subroutine calculate_nuclide_xs(/;"	s	module:cross_section
calculate_sab_xs	cross_section.F90	/^  subroutine calculate_sab_xs(/;"	s	module:cross_section
calculate_urr_xs	cross_section.F90	/^  subroutine calculate_urr_xs(/;"	s	module:cross_section
calculate_work	initialize.F90	/^  subroutine calculate_work(/;"	s	module:initialize
calculate_xs	cross_section.F90	/^  subroutine calculate_xs(/;"	s	module:cross_section
capture	cross_section.F90	/^    real(8) :: capture /;"	L	subroutine:calculate_urr_xs	file:
cell	particle_header.F90	/^    integer :: cell /;"	k	type:LocalCoord
cell_born	particle_header.F90	/^    integer    :: cell_born /;"	k	type:Particle
cell_dc	cmfd_data.F90	/^    real(8) :: cell_dc /;"	L	subroutine:compute_dtilde	file:
cell_dict	global.F90	/^  type(DictIntInt) :: cell_dict$/;"	v	module:global
cell_dtilde	cmfd_data.F90	/^    real(8) :: cell_dtilde(/;"	L	subroutine:compute_dhat	file:
cell_flux	cmfd_data.F90	/^    real(8) :: cell_flux /;"	L	subroutine:compute_dhat	file:
cell_hxyz	cmfd_data.F90	/^    real(8) :: cell_hxyz(/;"	L	subroutine:compute_dtilde	file:
cells	geometry_header.F90	/^     integer, allocatable :: cells(/;"	k	type:Universe
cells	global.F90	/^  type(Cell),      allocatable, target :: cells(/;"	v	module:global
cells_in_univ_dict	input_xml.F90	/^  type(DictIntInt) :: cells_in_univ_dict /;"	v	module:input_xml
change	clustering_kmeans.F90	/^    real(8) :: change /;"	L	subroutine:perform_kms	file:
change	clustering_kmeans.F90	/^    real(8), intent(in) :: change /;"	L	subroutine:print_kms	file:
char_count	output.F90	/^    integer :: char_count /;"	L	subroutine:print_sab_table	file:
check_cell_overlap	geometry.F90	/^  subroutine check_cell_overlap(/;"	s	module:geometry
check_for_node	xml_interface.F90	/^  function check_for_node(/;"	f	module:xml_interface
check_isatty	progress_header.F90	/^      integer(c_int)        :: check_isatty$/;"	L	function:check_isatty	file:
check_isatty	progress_header.F90	/^    function check_isatty(/;"	f	module:progress_header
check_sab	cross_section.F90	/^    logical :: check_sab /;"	L	subroutine:calculate_xs	file:
chr	string.F90	/^    character(1)  :: chr /;"	L	subroutine:split_string	file:
chr	string.F90	/^    character(1)  :: chr /;"	L	subroutine:split_string_wl	file:
cl	geometry.F90	/^    type(Cell),       pointer, save :: cl /;"	L	subroutine:distance_to_boundary	file:
clear_particle	particle_header.F90	/^  subroutine clear_particle(/;"	s	module:particle_header
close_group	output_interface.F90	/^  subroutine close_group(/;"	s	module:output_interface
close_xmldoc	xml_interface.F90	/^  subroutine close_xmldoc(/;"	s	module:xml_interface
closest_clust	clustering_kmeans.F90	/^    integer :: closest_clust$/;"	L	subroutine:kms_compute_distances	file:
clust_cen	clustering.F90	/^    real(8), allocatable :: clust_cen(/;"	L	subroutine:cluster_one_nuclide	file:
clust_cen	clustering.F90	/^    real(8), allocatable :: clust_cen(/;"	L	subroutine:write_clustering	file:
clust_cen	clustering_kmeans.F90	/^    real(8), allocatable, intent(in) :: clust_cen(/;"	L	subroutine:kms_compute_distances	file:
clust_cen	clustering_kmeans.F90	/^    real(8), allocatable, intent(in) :: clust_cen(/;"	L	subroutine:print_kms	file:
clust_cen	clustering_kmeans.F90	/^    real(8), allocatable, intent(inout) :: clust_cen(/;"	L	subroutine:kms_update_clust_cen	file:
clust_cen	clustering_kmeans.F90	/^    real(8), allocatable, intent(inout) :: clust_cen(/;"	L	subroutine:perform_kms	file:
clust_cen	clustering_kmeans.F90	/^    real(8), allocatable, intent(out) :: clust_cen(/;"	L	subroutine:kms_uniform_clust_cen	file:
clust_count	clustering_kmeans.F90	/^    integer, allocatable :: clust_count(/;"	L	subroutine:kms_update_clust_cen	file:
clust_max_it	global.F90	/^  integer :: clust_max_it /;"	v	module:global
clust_tol	global.F90	/^  real(8) :: clust_tol /;"	v	module:global
cluster_all_nuclides	clustering.F90	/^  subroutine cluster_all_nuclides(/;"	s	module:clustering
cluster_one_nuclide	clustering.F90	/^  subroutine cluster_one_nuclide(/;"	s	module:clustering
clustering	clustering.F90	/^module clustering$/;"	m
clustering_kmeans	clustering_kmeans.F90	/^module clustering_kmeans$/;"	m
clustering_on	global.F90	/^  logical :: clustering_on /;"	v	module:global
cmfd_data	cmfd_data.F90	/^module cmfd_data$/;"	m
cmfd_execute	cmfd_execute.F90	/^module cmfd_execute /;"	m
cmfd_header	cmfd_header.F90	/^module cmfd_header /;"	m
cmfd_init_batch	cmfd_execute.F90	/^  subroutine cmfd_init_batch(/;"	s	module:cmfd_execute
cmfd_input	cmfd_input.F90	/^module cmfd_input$/;"	m
cmfd_jfnk_execute	cmfd_jfnk_solver.F90	/^  subroutine cmfd_jfnk_execute(/;"	s	module:cmfd_jfnk_solver
cmfd_jfnk_solver	cmfd_jfnk_solver.F90	/^module cmfd_jfnk_solver$/;"	m
cmfd_loss_operator	cmfd_loss_operator.F90	/^module cmfd_loss_operator$/;"	m
cmfd_power_execute	cmfd_power_solver.F90	/^  subroutine cmfd_power_execute(/;"	s	module:cmfd_power_solver
cmfd_power_solver	cmfd_power_solver.F90	/^module cmfd_power_solver$/;"	m
cmfd_prod_operator	cmfd_prod_operator.F90	/^module cmfd_prod_operator$/;"	m
cmfd_reweight	cmfd_execute.F90	/^  subroutine cmfd_reweight(/;"	s	module:cmfd_execute
cmfd_slepc_solver	cmfd_slepc_solver.F90	/^module cmfd_slepc_solver$/;"	m
cmfd_src	cmfd_header.F90	/^    real(8), allocatable :: cmfd_src(/;"	k	type:cmfd_type
cmfd_tally_reset	cmfd_execute.F90	/^  subroutine cmfd_tally_reset(/;"	s	module:cmfd_execute
cmfd_type	cmfd_header.F90	/^  type, public :: cmfd_type$/;"	t	module:cmfd_header
cnt	cmfd_data.F90	/^    integer :: cnt /;"	L	subroutine:neutron_balance	file:
cnt	mesh.F90	/^    real(8),    intent(out)       :: cnt(/;"	L	subroutine:count_bank_sites	file:
code	error.F90	/^    integer :: code /;"	L	subroutine:fatal_error	file:
codebook	ace_header.F90	/^        integer, allocatable :: codebook(/;"	k	type:RrrData
codebook	clustering.F90	/^    integer, allocatable, intent(in) :: codebook(/;"	L	subroutine:condense_one_xs	file:
codebook	clustering.F90	/^    integer, allocatable, intent(inout) :: codebook(/;"	L	subroutine:reorder_clusters	file:
codebook	clustering_kmeans.F90	/^    integer, allocatable, intent(in) :: codebook(/;"	L	subroutine:kms_update_clust_cen	file:
codebook	clustering_kmeans.F90	/^    integer, allocatable, intent(in) :: codebook(/;"	L	subroutine:print_kms	file:
codebook	clustering_kmeans.F90	/^    integer, allocatable, intent(inout) :: codebook(/;"	L	subroutine:kms_compute_distances	file:
codebook	clustering_kmeans.F90	/^    integer, allocatable, intent(out) :: codebook(/;"	L	subroutine:perform_kms	file:
coeffs	geometry_header.F90	/^     real(8), allocatable :: coeffs(/;"	k	type:Surface
coeffs_reqd	input_xml.F90	/^    integer :: coeffs_reqd$/;"	L	subroutine:read_geometry_xml	file:
coeffs_reqd	input_xml.F90	/^    integer :: coeffs_reqd$/;"	L	subroutine:read_settings_xml	file:
col	matrix_header.F90	/^    integer :: col(/;"	L	subroutine:sort_csr	file:
col	matrix_header.F90	/^    integer :: col(/;"	L	subroutine:split	file:
col	matrix_header.F90	/^    integer, allocatable :: col(/;"	k	type:Matrix
col	matrix_header.F90	/^    integer, intent(in) :: col /;"	L	subroutine:matrix_add_value	file:
col_id	input_xml.F90	/^    integer n_cols, col_id,/;"	L	subroutine:read_plots_xml	file:
collect	hdf5_interface.F90	/^    logical,            intent(in)  :: collect /;"	L	subroutine:hdf5_read_long_parallel	file:
collect	hdf5_interface.F90	/^    logical,            intent(in) :: collect /;"	L	subroutine:hdf5_write_long_parallel	file:
collect	hdf5_interface.F90	/^    logical,         intent(in)    :: collect /;"	L	subroutine:hdf5_read_double_1Darray_parallel	file:
collect	hdf5_interface.F90	/^    logical,         intent(in)    :: collect /;"	L	subroutine:hdf5_read_double_parallel	file:
collect	hdf5_interface.F90	/^    logical,         intent(in)    :: collect /;"	L	subroutine:hdf5_read_integer_1Darray_parallel	file:
collect	hdf5_interface.F90	/^    logical,         intent(in)    :: collect /;"	L	subroutine:hdf5_read_integer_parallel	file:
collect	hdf5_interface.F90	/^    logical,        intent(in)    :: collect /;"	L	subroutine:hdf5_read_double_2Darray_parallel	file:
collect	hdf5_interface.F90	/^    logical,        intent(in)    :: collect /;"	L	subroutine:hdf5_read_double_3Darray_parallel	file:
collect	hdf5_interface.F90	/^    logical,        intent(in)    :: collect /;"	L	subroutine:hdf5_read_double_4Darray_parallel	file:
collect	hdf5_interface.F90	/^    logical,        intent(in)    :: collect /;"	L	subroutine:hdf5_read_integer_2Darray_parallel	file:
collect	hdf5_interface.F90	/^    logical,        intent(in)    :: collect /;"	L	subroutine:hdf5_read_integer_3Darray_parallel	file:
collect	hdf5_interface.F90	/^    logical,        intent(in)    :: collect /;"	L	subroutine:hdf5_read_integer_4Darray_parallel	file:
collect	hdf5_interface.F90	/^    logical,        intent(in)    :: collect /;"	L	subroutine:hdf5_read_string_parallel	file:
collect	hdf5_interface.F90	/^    logical,        intent(in)    :: collect /;"	L	subroutine:hdf5_write_double_4Darray_parallel	file:
collect	hdf5_interface.F90	/^    logical,        intent(in)    :: collect /;"	L	subroutine:hdf5_write_integer_4Darray_parallel	file:
collect	hdf5_interface.F90	/^    logical,        intent(in)    :: collect /;"	L	subroutine:hdf5_write_string_parallel	file:
collect	hdf5_interface.F90	/^    logical,        intent(in) :: collect /;"	L	subroutine:hdf5_write_double_1Darray_parallel	file:
collect	hdf5_interface.F90	/^    logical,        intent(in) :: collect /;"	L	subroutine:hdf5_write_double_2Darray_parallel	file:
collect	hdf5_interface.F90	/^    logical,        intent(in) :: collect /;"	L	subroutine:hdf5_write_double_3Darray_parallel	file:
collect	hdf5_interface.F90	/^    logical,        intent(in) :: collect /;"	L	subroutine:hdf5_write_double_parallel	file:
collect	hdf5_interface.F90	/^    logical,        intent(in) :: collect /;"	L	subroutine:hdf5_write_integer_1Darray_parallel	file:
collect	hdf5_interface.F90	/^    logical,        intent(in) :: collect /;"	L	subroutine:hdf5_write_integer_2Darray_parallel	file:
collect	hdf5_interface.F90	/^    logical,        intent(in) :: collect /;"	L	subroutine:hdf5_write_integer_3Darray_parallel	file:
collect	hdf5_interface.F90	/^    logical,        intent(in) :: collect /;"	L	subroutine:hdf5_write_integer_parallel	file:
collect	mpiio_interface.F90	/^    logical,      intent(in)    :: collect /;"	L	subroutine:mpi_read_string	file:
collect	mpiio_interface.F90	/^    logical,      intent(in) :: collect /;"	L	subroutine:mpi_write_string	file:
collect	mpiio_interface.F90	/^    logical,    intent(in)    :: collect /;"	L	subroutine:mpi_read_long	file:
collect	mpiio_interface.F90	/^    logical,    intent(in) :: collect /;"	L	subroutine:mpi_write_long	file:
collect	mpiio_interface.F90	/^    logical, intent(in)    :: collect /;"	L	subroutine:mpi_read_double	file:
collect	mpiio_interface.F90	/^    logical, intent(in)    :: collect /;"	L	subroutine:mpi_read_double_1Darray	file:
collect	mpiio_interface.F90	/^    logical, intent(in)    :: collect /;"	L	subroutine:mpi_read_double_2Darray	file:
collect	mpiio_interface.F90	/^    logical, intent(in)    :: collect /;"	L	subroutine:mpi_read_double_3Darray	file:
collect	mpiio_interface.F90	/^    logical, intent(in)    :: collect /;"	L	subroutine:mpi_read_double_4Darray	file:
collect	mpiio_interface.F90	/^    logical, intent(in)    :: collect /;"	L	subroutine:mpi_read_integer	file:
collect	mpiio_interface.F90	/^    logical, intent(in)    :: collect /;"	L	subroutine:mpi_read_integer_1Darray	file:
collect	mpiio_interface.F90	/^    logical, intent(in)    :: collect /;"	L	subroutine:mpi_read_integer_2Darray	file:
collect	mpiio_interface.F90	/^    logical, intent(in)    :: collect /;"	L	subroutine:mpi_read_integer_3Darray	file:
collect	mpiio_interface.F90	/^    logical, intent(in)    :: collect /;"	L	subroutine:mpi_read_integer_4Darray	file:
collect	mpiio_interface.F90	/^    logical, intent(in) :: collect /;"	L	subroutine:mpi_write_double	file:
collect	mpiio_interface.F90	/^    logical, intent(in) :: collect /;"	L	subroutine:mpi_write_double_1Darray	file:
collect	mpiio_interface.F90	/^    logical, intent(in) :: collect /;"	L	subroutine:mpi_write_double_2Darray	file:
collect	mpiio_interface.F90	/^    logical, intent(in) :: collect /;"	L	subroutine:mpi_write_double_3Darray	file:
collect	mpiio_interface.F90	/^    logical, intent(in) :: collect /;"	L	subroutine:mpi_write_double_4Darray	file:
collect	mpiio_interface.F90	/^    logical, intent(in) :: collect /;"	L	subroutine:mpi_write_integer	file:
collect	mpiio_interface.F90	/^    logical, intent(in) :: collect /;"	L	subroutine:mpi_write_integer_1Darray	file:
collect	mpiio_interface.F90	/^    logical, intent(in) :: collect /;"	L	subroutine:mpi_write_integer_2Darray	file:
collect	mpiio_interface.F90	/^    logical, intent(in) :: collect /;"	L	subroutine:mpi_write_integer_3Darray	file:
collect	mpiio_interface.F90	/^    logical, intent(in) :: collect /;"	L	subroutine:mpi_write_integer_4Darray	file:
collect	output_interface.F90	/^    logical,        intent(in), optional :: collect /;"	L	subroutine:read_double_1Darray	file:
collect	output_interface.F90	/^    logical,        intent(in), optional :: collect /;"	L	subroutine:read_integer_1Darray	file:
collect	output_interface.F90	/^    logical,      intent(in), optional :: collect /;"	L	subroutine:read_double	file:
collect	output_interface.F90	/^    logical,      intent(in), optional :: collect /;"	L	subroutine:read_double_2Darray	file:
collect	output_interface.F90	/^    logical,      intent(in), optional :: collect /;"	L	subroutine:read_double_3Darray	file:
collect	output_interface.F90	/^    logical,      intent(in), optional :: collect /;"	L	subroutine:read_double_4Darray	file:
collect	output_interface.F90	/^    logical,      intent(in), optional :: collect /;"	L	subroutine:read_integer	file:
collect	output_interface.F90	/^    logical,      intent(in), optional :: collect /;"	L	subroutine:read_integer_2Darray	file:
collect	output_interface.F90	/^    logical,      intent(in), optional :: collect /;"	L	subroutine:read_integer_3Darray	file:
collect	output_interface.F90	/^    logical,      intent(in), optional :: collect /;"	L	subroutine:read_integer_4Darray	file:
collect	output_interface.F90	/^    logical,      intent(in), optional :: collect /;"	L	subroutine:read_long	file:
collect	output_interface.F90	/^    logical,      intent(in), optional :: collect /;"	L	subroutine:read_string	file:
collect	output_interface.F90	/^    logical,      intent(in), optional :: collect /;"	L	subroutine:write_double	file:
collect	output_interface.F90	/^    logical,      intent(in), optional :: collect /;"	L	subroutine:write_double_1Darray	file:
collect	output_interface.F90	/^    logical,      intent(in), optional :: collect /;"	L	subroutine:write_double_2Darray	file:
collect	output_interface.F90	/^    logical,      intent(in), optional :: collect /;"	L	subroutine:write_double_3Darray	file:
collect	output_interface.F90	/^    logical,      intent(in), optional :: collect /;"	L	subroutine:write_double_4Darray	file:
collect	output_interface.F90	/^    logical,      intent(in), optional :: collect /;"	L	subroutine:write_integer	file:
collect	output_interface.F90	/^    logical,      intent(in), optional :: collect /;"	L	subroutine:write_integer_1Darray	file:
collect	output_interface.F90	/^    logical,      intent(in), optional :: collect /;"	L	subroutine:write_integer_2Darray	file:
collect	output_interface.F90	/^    logical,      intent(in), optional :: collect /;"	L	subroutine:write_integer_3Darray	file:
collect	output_interface.F90	/^    logical,      intent(in), optional :: collect /;"	L	subroutine:write_integer_4Darray	file:
collect	output_interface.F90	/^    logical,      intent(in), optional :: collect /;"	L	subroutine:write_long	file:
collect	output_interface.F90	/^    logical,      intent(in), optional :: collect /;"	L	subroutine:write_string	file:
collision	physics.F90	/^  subroutine collision(/;"	s	module:physics
color	cmfd_input.F90	/^    integer :: color /;"	L	subroutine:configure_cmfd	file:
color_by	plot_header.F90	/^    integer :: color_by /;"	k	type:ObjectPlot
colors	plot_header.F90	/^    type(ObjectColor), allocatable :: colors(/;"	k	type:ObjectPlot
comment	ace.F90	/^    character(70) :: comment /;"	L	subroutine:read_ace_table	file:
compute_adjoint	cmfd_jfnk_solver.F90	/^  subroutine compute_adjoint(/;"	s	module:cmfd_jfnk_solver
compute_adjoint	cmfd_power_solver.F90	/^  subroutine compute_adjoint(/;"	s	module:cmfd_power_solver
compute_dhat	cmfd_data.F90	/^  subroutine compute_dhat(/;"	s	module:cmfd_data
compute_dtilde	cmfd_data.F90	/^  subroutine compute_dtilde(/;"	s	module:cmfd_data
compute_effective_downscatter	cmfd_data.F90	/^  subroutine compute_effective_downscatter(/;"	s	module:cmfd_data
compute_nonlinear_residual	cmfd_jfnk_solver.F90	/^  subroutine compute_nonlinear_residual(/;"	s	module:cmfd_jfnk_solver
compute_xs	cmfd_data.F90	/^  subroutine compute_xs(/;"	s	module:cmfd_data
concatenate	string.F90	/^  function concatenate(/;"	f	module:string
condense_one_xs	clustering.F90	/^  subroutine condense_one_xs(/;"	s	module:clustering
configure_cmfd	cmfd_input.F90	/^  subroutine configure_cmfd(/;"	s	module:cmfd_input
configure_tallies	tally_initialize.F90	/^  subroutine configure_tallies(/;"	s	module:tally_initialize
constants	constants.F90	/^module constants$/;"	m
convergence	cmfd_power_solver.F90	/^  subroutine convergence(/;"	s	module:cmfd_power_solver
coord	particle_header.F90	/^    type(LocalCoord), pointer :: coord /;"	k	type:Particle
coord	particle_header.F90	/^    type(LocalCoord), pointer :: coord$/;"	L	subroutine:deallocate_coord	file:
coord	tracking.F90	/^    type(LocalCoord), pointer, save :: coord /;"	L	subroutine:transport	file:
coord0	particle_header.F90	/^    type(LocalCoord), pointer :: coord0 /;"	k	type:Particle
coordinates_t	initialize.F90	/^    integer(HID_T)            :: coordinates_t /;"	L	subroutine:hdf5_initialize	file:
coords	track_output.F90	/^  real(8), private, allocatable     :: coords(/;"	v	module:track_output
copy_source_attributes	source.F90	/^  subroutine copy_source_attributes(/;"	s	module:source
coremap	cmfd_header.F90	/^    integer, allocatable :: coremap(/;"	k	type:cmfd_type
cosphi	physics.F90	/^    real(8) :: cosphi /;"	L	function:rotate_angle	file:
count	list_header.F90	/^    integer :: count /;"	k	type:ListChar
count	list_header.F90	/^    integer :: count /;"	k	type:ListInt
count	list_header.F90	/^    integer :: count /;"	k	type:ListReal
count_bank_sites	mesh.F90	/^  subroutine count_bank_sites(/;"	s	module:mesh
count_negative	geometry.F90	/^    integer, allocatable :: count_negative(/;"	L	subroutine:neighbor_lists	file:
count_positive	geometry.F90	/^    integer, allocatable :: count_positive(/;"	L	subroutine:neighbor_lists	file:
count_source_for_ufs	eigenvalue.F90	/^  subroutine count_source_for_ufs(/;"	s	module:eigenvalue
counter	cmfd_data.F90	/^    integer :: counter=/;"	L	subroutine:set_coremap	file:
cov	eigenvalue.F90	/^    real(8) :: cov(/;"	L	subroutine:calculate_combined_keff	file:
create_3d_dump	plot.F90	/^  subroutine create_3d_dump(/;"	s	module:plot
create_cmfd_tally	cmfd_input.F90	/^  subroutine create_cmfd_tally(/;"	s	module:cmfd_input
create_fission_sites	physics.F90	/^  subroutine create_fission_sites(/;"	s	module:physics
create_ppm	plot.F90	/^  subroutine create_ppm(/;"	s	module:plot
cross_lattice	geometry.F90	/^  subroutine cross_lattice(/;"	s	module:geometry
cross_section	cross_section.F90	/^module cross_section$/;"	m
cross_surface	geometry.F90	/^  subroutine cross_surface(/;"	s	module:geometry
ctx	solver_interface.F90	/^    type(Jfnk_ctx)/;"	L	subroutine:petsc_jfnk_compute_jacobian	file:
ctx	solver_interface.F90	/^    type(Jfnk_ctx)/;"	L	subroutine:petsc_jfnk_compute_residual	file:
current	cmfd_data.F90	/^    real(8) :: current(/;"	L	function:get_reflector_albedo	file:
current	cmfd_data.F90	/^    real(8) :: current(/;"	L	subroutine:compute_dhat	file:
current	cmfd_header.F90	/^    real(8), allocatable :: current(/;"	k	type:cmfd_type
current	energy_grid.F90	/^    integer :: current /;"	L	subroutine:add_grid_points	file:
current_time	output.F90	/^    character(19) :: current_time /;"	L	function:time_stamp	file:
current_time	state_point.F90	/^    character(19)           :: current_time$/;"	L	subroutine:load_state_point	file:
cutoff	physics.F90	/^    real(8) :: cutoff$/;"	L	function:sample_nuclide	file:
cutoff	physics.F90	/^    real(8) :: cutoff$/;"	L	subroutine:sample_fission	file:
cutoff	physics.F90	/^    real(8) :: cutoff$/;"	L	subroutine:scatter	file:
d	geometry.F90	/^    real(8) :: d /;"	L	subroutine:distance_to_boundary	file:
d	math.F90	/^    real(8), parameter :: d(/;"	L	function:normal_percentile	file:
d	tally.F90	/^    real(8) :: d(/;"	L	subroutine:score_surface_current	file:
d	tally.F90	/^    real(8) :: d(/;"	L	subroutine:score_tl_on_mesh	file:
d_boundary	tracking.F90	/^    real(8) :: d_boundary /;"	L	subroutine:transport	file:
d_collision	tracking.F90	/^    real(8) :: d_collision /;"	L	subroutine:transport	file:
d_track	tally.F90	/^    real(8),        intent(in) :: d_track$/;"	L	subroutine:score_tl_on_mesh	file:
data	ace_header.F90	/^    real(8), allocatable :: data(/;"	k	type:DistAngle
data	ace_header.F90	/^    real(8), allocatable :: data(/;"	k	type:DistEnergy
data	interpolation.F90	/^    real(8), intent(in)           :: data(/;"	L	function:interpolate_tab1_array	file:
data	list_header.F90	/^    character(MAX_WORD_LEN) :: data$/;"	k	type:ListElemChar
data	list_header.F90	/^    integer :: data$/;"	k	type:ListElemInt
data	list_header.F90	/^    real(8) :: data$/;"	k	type:ListElemReal
data	vector_header.F90	/^    real(8), allocatable :: data(/;"	k	type:Vector
date_	ace.F90	/^    character(10) :: date_ /;"	L	subroutine:read_ace_table	file:
date_	output.F90	/^    character(8)  :: date_ /;"	L	function:time_stamp	file:
deallocate_cmfd	cmfd_header.F90	/^  subroutine deallocate_cmfd(/;"	s	module:cmfd_header
deallocate_coord	particle_header.F90	/^  recursive subroutine deallocate_coord(/;"	s	module:particle_header
deallocate_image	ppmlib.F90	/^  subroutine deallocate_image(/;"	s	module:ppmlib
decimal	string.F90	/^    integer      :: decimal /;"	L	function:real_to_str	file:
default_expand	global.F90	/^  integer :: default_expand /;"	v	module:global
default_xs	global.F90	/^  character(3):: default_xs$/;"	v	module:global
delayed_n	ace.F90	/^    logical, optional         :: delayed_n /;"	L	subroutine:get_energy_dist	file:
density	input_xml.F90	/^    real(8),        intent(in)    :: density$/;"	L	subroutine:expand_natural_element	file:
density	material_header.F90	/^    real(8)              :: density /;"	k	type:Material
density	output.F90	/^    real(8) :: density /;"	L	subroutine:print_material	file:
density_in_atom	initialize.F90	/^    logical        :: density_in_atom /;"	L	subroutine:normalize_ao	file:
df	math.F90	/^    integer, intent(in) :: df /;"	L	function:t_percentile	file:
dhat	cmfd_data.F90	/^    real(8) :: dhat /;"	L	subroutine:compute_dhat	file:
dhat	cmfd_header.F90	/^    real(8), allocatable :: dhat(/;"	k	type:cmfd_type
dhat	cmfd_loss_operator.F90	/^    real(8) :: dhat(/;"	L	subroutine:build_loss_matrix	file:
dhat_reset	cmfd_data.F90	/^  logical :: dhat_reset /;"	v	module:cmfd_data
dict_add_key_ci	dict_header.F90	/^  subroutine dict_add_key_ci(/;"	s	module:dict_header
dict_add_key_ii	dict_header.F90	/^  subroutine dict_add_key_ii(/;"	s	module:dict_header
dict_clear_ci	dict_header.F90	/^  subroutine dict_clear_ci(/;"	s	module:dict_header
dict_clear_ii	dict_header.F90	/^  subroutine dict_clear_ii(/;"	s	module:dict_header
dict_get_elem_ci	dict_header.F90	/^  function dict_get_elem_ci(/;"	f	module:dict_header
dict_get_elem_ii	dict_header.F90	/^  function dict_get_elem_ii(/;"	f	module:dict_header
dict_get_key_ci	dict_header.F90	/^  function dict_get_key_ci(/;"	f	module:dict_header
dict_get_key_ii	dict_header.F90	/^  function dict_get_key_ii(/;"	f	module:dict_header
dict_has_key_ci	dict_header.F90	/^  function dict_has_key_ci(/;"	f	module:dict_header
dict_has_key_ii	dict_header.F90	/^  function dict_has_key_ii(/;"	f	module:dict_header
dict_hash_key_ci	dict_header.F90	/^  function dict_hash_key_ci(/;"	f	module:dict_header
dict_hash_key_ii	dict_header.F90	/^  function dict_hash_key_ii(/;"	f	module:dict_header
dict_header	dict_header.F90	/^module dict_header$/;"	m
dict_keys_ci	dict_header.F90	/^  function dict_keys_ci(/;"	f	module:dict_header
dict_keys_ii	dict_header.F90	/^  function dict_keys_ii(/;"	f	module:dict_header
diffcof	cmfd_header.F90	/^    real(8), allocatable :: diffcof(/;"	k	type:cmfd_type
dimension	geometry_header.F90	/^     integer, allocatable :: dimension(/;"	k	type:Lattice
dimension	mesh_header.F90	/^    integer, allocatable :: dimension(/;"	k	type:StructuredMesh
dims	initialize.F90	/^    integer(HSIZE_T)          :: dims(/;"	L	subroutine:hdf5_initialize	file:
dims1	hdf5_interface.F90	/^  integer(HSIZE_T) :: dims1(/;"	v	module:hdf5_interface
dims2	hdf5_interface.F90	/^  integer(HSIZE_T) :: dims2(/;"	v	module:hdf5_interface
dims3	hdf5_interface.F90	/^  integer(HSIZE_T) :: dims3(/;"	v	module:hdf5_interface
dims4	hdf5_interface.F90	/^  integer(HSIZE_T) :: dims4(/;"	v	module:hdf5_interface
dir_idx	cmfd_data.F90	/^    integer :: dir_idx /;"	L	subroutine:compute_dhat	file:
dir_idx	cmfd_data.F90	/^    integer :: dir_idx /;"	L	subroutine:compute_dtilde	file:
dir_idx	cmfd_loss_operator.F90	/^    integer :: dir_idx /;"	L	function:preallocate_loss_matrix	file:
dir_idx	cmfd_loss_operator.F90	/^    integer :: dir_idx /;"	L	subroutine:build_loss_matrix	file:
directory	input_xml.F90	/^    character(MAX_WORD_LEN)  :: directory /;"	L	subroutine:read_cross_sections_xml	file:
dist	geometry.F90	/^    real(8),        intent(out)   :: dist$/;"	L	subroutine:distance_to_boundary	file:
distance	tally.F90	/^    real(8) :: distance /;"	L	subroutine:score_surface_current	file:
distance	tally.F90	/^    real(8) :: distance /;"	L	subroutine:score_tl_on_mesh	file:
distance	tally.F90	/^    real(8),        intent(in) :: distance$/;"	L	subroutine:score_tracklength_tally	file:
distance	tracking.F90	/^    real(8) :: distance /;"	L	subroutine:transport	file:
distance_to_boundary	geometry.F90	/^  subroutine distance_to_boundary(/;"	s	module:geometry
distangle_clear	ace_header.F90	/^    subroutine distangle_clear(/;"	s	module:ace_header
distenergy_clear	ace_header.F90	/^    recursive subroutine distenergy_clear(/;"	s	module:ace_header
distortion	clustering_kmeans.F90	/^    real(8), intent(in) :: distortion /;"	L	subroutine:print_kms	file:
doc	cmfd_input.F90	/^    type(Node), pointer :: doc /;"	L	subroutine:create_cmfd_tally	file:
doc	cmfd_input.F90	/^    type(Node), pointer :: doc /;"	L	subroutine:read_cmfd_xml	file:
doc	input_xml.F90	/^    type(Node), pointer :: doc /;"	L	subroutine:read_settings_xml	file:
dom	cmfd_header.F90	/^    real(8), allocatable :: dom(/;"	k	type:cmfd_type
doppler	doppler.F90	/^module doppler$/;"	m
dot_prod	geometry.F90	/^    real(8) :: dot_prod /;"	L	subroutine:cross_surface	file:
dset	hdf5_interface.F90	/^  integer(HID_T)   :: dset /;"	v	module:hdf5_interface
dspace	hdf5_interface.F90	/^  integer(HID_T)   :: dspace /;"	v	module:hdf5_interface
dtilde	cmfd_data.F90	/^    real(8) :: dtilde /;"	L	subroutine:compute_dtilde	file:
dtilde	cmfd_header.F90	/^    real(8), allocatable :: dtilde(/;"	k	type:cmfd_type
dtilde	cmfd_loss_operator.F90	/^    real(8) :: dtilde(/;"	L	subroutine:build_loss_matrix	file:
dummy	mesh.F90	/^    real(8) :: dummy /;"	L	subroutine:count_bank_sites	file:
dummy	state_point.F90	/^    real(8) :: dummy /;"	L	subroutine:write_tally_results_nr	file:
dummy	tally.F90	/^    real(8) :: dummy /;"	L	subroutine:reduce_tally_results	file:
e_bin	cmfd_execute.F90	/^    integer :: e_bin /;"	L	subroutine:cmfd_reweight	file:
e_bin	mesh.F90	/^    integer :: e_bin /;"	L	subroutine:count_bank_sites	file:
e_grid	global.F90	/^  real(8), allocatable :: e_grid(/;"	v	module:global
e_high	ace_header.F90	/^    real(8) :: e_high /;"	k	type:RrrData
e_low	ace_header.F90	/^    real(8) :: e_low /;"	k	type:RrrData
e_out	ace_header.F90	/^    real(8), allocatable :: e_out(/;"	k	type:DistEnergySab
e_out_cdf	ace_header.F90	/^    real(8), allocatable :: e_out_cdf(/;"	k	type:DistEnergySab
e_out_pdf	ace_header.F90	/^    real(8), allocatable :: e_out_pdf(/;"	k	type:DistEnergySab
e_scratch	clustering.F90	/^    real(8), allocatable :: e_scratch(/;"	L	subroutine:thin_energy_grid	file:
edist	ace.F90	/^    type(DistEnergy), pointer :: edist /;"	L	subroutine:get_energy_dist	file:
edist	ace.F90	/^    type(DistEnergy), pointer :: edist /;"	L	subroutine:read_nu_data	file:
edist	ace_header.F90	/^    type(DistEnergy), pointer :: edist /;"	k	type:Reaction
edist	physics.F90	/^    type(DistEnergy),  pointer       :: edist$/;"	L	subroutine:sample_energy	file:
edist	physics.F90	/^    type(DistEnergy), pointer, save :: edist /;"	L	function:sample_fission_energy	file:
egrid	cmfd_execute.F90	/^    real(8), allocatable :: egrid(/;"	L	subroutine:cmfd_reweight	file:
egrid	cmfd_header.F90	/^    real(8), allocatable :: egrid(/;"	k	type:cmfd_type
eigenvalue	eigenvalue.F90	/^module eigenvalue$/;"	m
elapsed	timer_header.F90	/^    real(8), public :: elapsed /;"	k	type:Timer
elastic	ace_header.F90	/^    real(8) :: elastic /;"	k	type:MaterialMacroXS
elastic	ace_header.F90	/^    real(8) :: elastic /;"	k	type:NuclideMicroXS
elastic	ace_header.F90	/^    real(8), allocatable :: elastic(/;"	k	type:Nuclide
elastic	cross_section.F90	/^    real(8) :: elastic /;"	L	subroutine:calculate_sab_xs	file:
elastic	cross_section.F90	/^    real(8) :: elastic /;"	L	subroutine:calculate_urr_xs	file:
elastic_P	ace_header.F90	/^    real(8), allocatable :: elastic_P(/;"	k	type:SAlphaBeta
elastic_e_in	ace_header.F90	/^    real(8), allocatable :: elastic_e_in(/;"	k	type:SAlphaBeta
elastic_mode	ace_header.F90	/^    integer :: elastic_mode /;"	k	type:SAlphaBeta
elastic_mu	ace_header.F90	/^    real(8), allocatable :: elastic_mu(/;"	k	type:SAlphaBeta
elastic_sab	ace_header.F90	/^    real(8) :: elastic_sab /;"	k	type:NuclideMicroXS
elastic_scatter	physics.F90	/^  subroutine elastic_scatter(/;"	s	module:physics
elem_list	xml_interface.F90	/^    type(NodeList), pointer :: elem_list /;"	L	subroutine:get_node_ptr	file:
elem_list	xml_interface.F90	/^    type(NodeList), pointer :: elem_list$/;"	L	function:check_for_node	file:
elem_list	xml_interface.F90	/^    type(NodeList), pointer :: elem_list$/;"	L	subroutine:get_node	file:
element_name	input_xml.F90	/^    character(2) :: element_name$/;"	L	subroutine:expand_natural_element	file:
elements	set_header.F90	/^    type(ListChar) :: elements$/;"	k	type:SetChar
elements	set_header.F90	/^    type(ListInt) :: elements$/;"	k	type:SetInt
elements	tally_header.F90	/^    type(TallyMapElement), allocatable :: elements(/;"	k	type:TallyMapItem
end_in_mesh	tally.F90	/^    logical :: end_in_mesh /;"	L	subroutine:score_surface_current	file:
end_in_mesh	tally.F90	/^    logical :: end_in_mesh /;"	L	subroutine:score_tl_on_mesh	file:
endd	clustering.F90	/^    integer :: i, strt, endd,/;"	L	subroutine:condense_one_xs	file:
endf	endf.F90	/^module endf$/;"	m
endf_header	endf_header.F90	/^module endf_header$/;"	m
ends_with	string.F90	/^  logical function ends_with(/;"	f	module:string
energies	mesh.F90	/^    real(8),    optional          :: energies(/;"	L	subroutine:count_bank_sites	file:
energy	ace_header.F90	/^    real(8), allocatable :: energy(/;"	k	type:DistAngle
energy	ace_header.F90	/^    real(8), allocatable :: energy(/;"	k	type:Nuclide
energy	ace_header.F90	/^    real(8), allocatable :: energy(/;"	k	type:UrrData
energy	doppler.F90	/^    real(8), intent(in)  :: energy(/;"	L	subroutine:broaden	file:
energy	energy_grid.F90	/^    real(8) :: energy /;"	L	subroutine:grid_pointers	file:
energy	energy_grid.F90	/^    real(8), intent(in) :: energy(/;"	L	subroutine:add_grid_points	file:
energy_grid	energy_grid.F90	/^module energy_grid$/;"	m
ent_idx	eigenvalue.F90	/^    integer :: ent_idx /;"	L	subroutine:shannon_entropy	file:
entries	ace.F90	/^    integer       :: entries /;"	L	subroutine:read_ace_table	file:
entries	ace_header.F90	/^    integer       :: entries /;"	k	type:XsListing
entries	input_xml.F90	/^    integer :: entries /;"	L	subroutine:read_cross_sections_xml	file:
entropy	cmfd_header.F90	/^    real(8), allocatable :: entropy(/;"	k	type:cmfd_type
env_variable	input_xml.F90	/^    character(MAX_FILE_LEN) :: env_variable$/;"	L	subroutine:read_settings_xml	file:
epstype	cmfd_slepc_solver.F90	/^    character(LEN=20) :: epstype,/;"	L	subroutine:init_solver	file:
err_flag	clustering.F90	/^    logical err_flag /;"	L	subroutine:cluster_one_nuclide	file:
err_flag	clustering_kmeans.F90	/^    logical, intent(out) :: err_flag /;"	L	subroutine:kms_update_clust_cen	file:
err_flag	clustering_kmeans.F90	/^    logical, intent(out) :: err_flag /;"	L	subroutine:perform_kms	file:
error	error.F90	/^module error$/;"	m
error_code	error.F90	/^    integer, optional :: error_code /;"	L	subroutine:fatal_error	file:
estimator	tally_header.F90	/^    integer :: estimator /;"	k	type:TallyObject
eu	output.F90	/^  integer :: eu /;"	v	module:output
event	particle_header.F90	/^    integer    :: event /;"	k	type:Particle
event_MT	particle_header.F90	/^    integer    :: event_MT /;"	k	type:Particle
event_nuclide	particle_header.F90	/^    integer    :: event_nuclide /;"	k	type:Particle
execute_cmfd	cmfd_execute.F90	/^  subroutine execute_cmfd(/;"	s	module:cmfd_execute
execute_power_iter	cmfd_power_solver.F90	/^  subroutine execute_power_iter(/;"	s	module:cmfd_power_solver
expand_natural_element	input_xml.F90	/^  subroutine expand_natural_element(/;"	s	module:input_xml
extent	initialize.F90	/^    integer(MPI_ADDRESS_KIND) :: extent /;"	L	subroutine:initialize_mpi	file:
extract_results	cmfd_jfnk_solver.F90	/^  subroutine extract_results(/;"	s	module:cmfd_jfnk_solver
extract_results	cmfd_power_solver.F90	/^  subroutine extract_results(/;"	s	module:cmfd_power_solver
extract_results	cmfd_slepc_solver.F90	/^  subroutine extract_results(/;"	s
f	cross_section.F90	/^    real(8) :: f /;"	L	subroutine:calculate_nuclide_xs	file:
f	cross_section.F90	/^    real(8) :: f /;"	L	subroutine:calculate_sab_xs	file:
f	cross_section.F90	/^    real(8) :: f /;"	L	subroutine:calculate_urr_xs	file:
f	eigenvalue.F90	/^    real(8) :: f /;"	L	subroutine:calculate_combined_keff	file:
f	physics.F90	/^    real(8) :: f /;"	L	subroutine:sab_scatter	file:
f	physics.F90	/^    real(8) :: f$/;"	L	subroutine:sample_fission	file:
f	physics.F90	/^    real(8) :: f$/;"	L	subroutine:scatter	file:
f	tally.F90	/^    real(8) :: f /;"	L	subroutine:score_all_nuclides	file:
f	tally.F90	/^    real(8) :: f /;"	L	subroutine:score_tracklength_tally	file:
f_ptr	hdf5_interface.F90	/^  type(c_ptr)      :: f_ptr /;"	v	module:hdf5_interface
fatal_error	error.F90	/^  subroutine fatal_error(/;"	s	module:error
fh	mpiio_interface.F90	/^    integer,      intent(in)    :: fh /;"	L	subroutine:mpi_read_string	file:
fh	mpiio_interface.F90	/^    integer,      intent(in) :: fh /;"	L	subroutine:mpi_write_string	file:
fh	mpiio_interface.F90	/^    integer,      intent(inout) :: fh /;"	L	subroutine:mpi_create_file	file:
fh	mpiio_interface.F90	/^    integer,      intent(inout) :: fh /;"	L	subroutine:mpi_open_file	file:
fh	mpiio_interface.F90	/^    integer,    intent(in)    :: fh /;"	L	subroutine:mpi_read_long	file:
fh	mpiio_interface.F90	/^    integer,    intent(in) :: fh /;"	L	subroutine:mpi_write_long	file:
fh	mpiio_interface.F90	/^    integer, intent(in)    :: fh /;"	L	subroutine:mpi_read_double	file:
fh	mpiio_interface.F90	/^    integer, intent(in)    :: fh /;"	L	subroutine:mpi_read_double_1Darray	file:
fh	mpiio_interface.F90	/^    integer, intent(in)    :: fh /;"	L	subroutine:mpi_read_double_2Darray	file:
fh	mpiio_interface.F90	/^    integer, intent(in)    :: fh /;"	L	subroutine:mpi_read_double_3Darray	file:
fh	mpiio_interface.F90	/^    integer, intent(in)    :: fh /;"	L	subroutine:mpi_read_double_4Darray	file:
fh	mpiio_interface.F90	/^    integer, intent(in)    :: fh /;"	L	subroutine:mpi_read_integer	file:
fh	mpiio_interface.F90	/^    integer, intent(in)    :: fh /;"	L	subroutine:mpi_read_integer_1Darray	file:
fh	mpiio_interface.F90	/^    integer, intent(in)    :: fh /;"	L	subroutine:mpi_read_integer_2Darray	file:
fh	mpiio_interface.F90	/^    integer, intent(in)    :: fh /;"	L	subroutine:mpi_read_integer_3Darray	file:
fh	mpiio_interface.F90	/^    integer, intent(in)    :: fh /;"	L	subroutine:mpi_read_integer_4Darray	file:
fh	mpiio_interface.F90	/^    integer, intent(in) :: fh /;"	L	subroutine:mpi_write_double	file:
fh	mpiio_interface.F90	/^    integer, intent(in) :: fh /;"	L	subroutine:mpi_write_double_1Darray	file:
fh	mpiio_interface.F90	/^    integer, intent(in) :: fh /;"	L	subroutine:mpi_write_double_2Darray	file:
fh	mpiio_interface.F90	/^    integer, intent(in) :: fh /;"	L	subroutine:mpi_write_double_3Darray	file:
fh	mpiio_interface.F90	/^    integer, intent(in) :: fh /;"	L	subroutine:mpi_write_double_4Darray	file:
fh	mpiio_interface.F90	/^    integer, intent(in) :: fh /;"	L	subroutine:mpi_write_integer	file:
fh	mpiio_interface.F90	/^    integer, intent(in) :: fh /;"	L	subroutine:mpi_write_integer_1Darray	file:
fh	mpiio_interface.F90	/^    integer, intent(in) :: fh /;"	L	subroutine:mpi_write_integer_2Darray	file:
fh	mpiio_interface.F90	/^    integer, intent(in) :: fh /;"	L	subroutine:mpi_write_integer_3Darray	file:
fh	mpiio_interface.F90	/^    integer, intent(in) :: fh /;"	L	subroutine:mpi_write_integer_4Darray	file:
fh	mpiio_interface.F90	/^    integer, intent(inout) :: fh /;"	L	subroutine:mpi_close_file	file:
file_close	output_interface.F90	/^  subroutine file_close(/;"	s	module:output_interface
file_create	output_interface.F90	/^  subroutine file_create(/;"	s	module:output_interface
file_exists	ace.F90	/^    logical       :: file_exists /;"	L	subroutine:read_ace_table	file:
file_exists	cmfd_input.F90	/^    logical :: file_exists /;"	L	subroutine:read_cmfd_xml	file:
file_exists	input_xml.F90	/^    logical :: file_exists /;"	L	subroutine:read_cross_sections_xml	file:
file_exists	input_xml.F90	/^    logical :: file_exists /;"	L	subroutine:read_materials_xml	file:
file_exists	input_xml.F90	/^    logical :: file_exists /;"	L	subroutine:read_plots_xml	file:
file_exists	input_xml.F90	/^    logical :: file_exists /;"	L	subroutine:read_tallies_xml	file:
file_exists	input_xml.F90	/^    logical :: file_exists$/;"	L	subroutine:read_geometry_xml	file:
file_exists	input_xml.F90	/^    logical :: file_exists$/;"	L	subroutine:read_settings_xml	file:
file_id	hdf5_interface.F90	/^    integer(HID_T), intent(inout)  :: file_id /;"	L	subroutine:hdf5_file_open	file:
file_id	hdf5_interface.F90	/^    integer(HID_T), intent(inout) :: file_id /;"	L	subroutine:hdf5_file_close	file:
file_id	hdf5_interface.F90	/^    integer(HID_T), intent(inout) :: file_id /;"	L	subroutine:hdf5_file_create	file:
file_id	hdf5_interface.F90	/^    integer(HID_T), intent(inout) :: file_id /;"	L	subroutine:hdf5_file_create_parallel	file:
file_id	hdf5_interface.F90	/^    integer(HID_T), intent(inout) :: file_id /;"	L	subroutine:hdf5_file_open_parallel	file:
file_open	output_interface.F90	/^  subroutine file_open(/;"	s	module:output_interface
filename	ace.F90	/^    character(MAX_FILE_LEN) :: filename /;"	L	subroutine:read_ace_table	file:
filename	cmfd_input.F90	/^    character(MAX_LINE_LEN) :: filename$/;"	L	subroutine:read_cmfd_xml	file:
filename	cmfd_jfnk_solver.F90	/^    character(len=25) :: filename$/;"	L	subroutine:compute_nonlinear_residual	file:
filename	cmfd_power_solver.F90	/^    character(len=25)    :: filename /;"	L	subroutine:extract_results	file:
filename	hdf5_interface.F90	/^    character(*),   intent(in)    :: filename /;"	L	subroutine:hdf5_file_create	file:
filename	hdf5_interface.F90	/^    character(*),   intent(in)    :: filename /;"	L	subroutine:hdf5_file_create_parallel	file:
filename	hdf5_interface.F90	/^    character(*),  intent(in)      :: filename /;"	L	subroutine:hdf5_file_open	file:
filename	hdf5_interface.F90	/^    character(*),  intent(in)     :: filename /;"	L	subroutine:hdf5_file_open_parallel	file:
filename	hdf5_summary.F90	/^    character(MAX_FILE_LEN) :: filename /;"	L	subroutine:hdf5_write_summary	file:
filename	input_xml.F90	/^    character(MAX_LINE_LEN) :: filename /;"	L	subroutine:read_materials_xml	file:
filename	input_xml.F90	/^    character(MAX_LINE_LEN) :: filename /;"	L	subroutine:read_plots_xml	file:
filename	input_xml.F90	/^    character(MAX_LINE_LEN) :: filename$/;"	L	subroutine:read_geometry_xml	file:
filename	input_xml.F90	/^    character(MAX_LINE_LEN) :: filename$/;"	L	subroutine:read_settings_xml	file:
filename	input_xml.F90	/^    character(MAX_LINE_LEN) :: filename$/;"	L	subroutine:read_tallies_xml	file:
filename	matrix_header.F90	/^    character(*), intent(in)  :: filename /;"	L	subroutine:matrix_write_petsc_binary	file:
filename	mpiio_interface.F90	/^    character(*), intent(in)    :: filename /;"	L	subroutine:mpi_create_file	file:
filename	mpiio_interface.F90	/^    character(*), intent(in)    :: filename /;"	L	subroutine:mpi_open_file	file:
filename	output.F90	/^    character(MAX_FILE_LEN) :: filename /;"	L	subroutine:write_tallies	file:
filename	output_interface.F90	/^    character(*),      intent(in) :: filename /;"	L	subroutine:file_create	file:
filename	output_interface.F90	/^    character(*),      intent(in) :: filename /;"	L	subroutine:file_open	file:
filename	particle_restart_write.F90	/^    character(MAX_FILE_LEN) :: filename$/;"	L	subroutine:write_particle_restart	file:
filename	state_point.F90	/^    character(MAX_FILE_LEN) :: filename$/;"	L	subroutine:write_source_point	file:
filename	state_point.F90	/^    character(MAX_FILE_LEN) :: filename$/;"	L	subroutine:write_state_point	file:
filename	vector_header.F90	/^    character(*), intent(in)  :: filename /;"	L	subroutine:vector_write_petsc_binary	file:
filename	xml_interface.F90	/^    character(len=*) :: filename$/;"	L	subroutine:open_xmldoc	file:
filetype	ace.F90	/^    integer       :: filetype /;"	L	subroutine:read_ace_table	file:
filetype	ace_header.F90	/^    integer       :: filetype /;"	k	type:XsListing
filetype	initialize.F90	/^    integer :: filetype$/;"	L	subroutine:read_command_line	file:
filetype	input_xml.F90	/^    integer :: filetype /;"	L	subroutine:read_cross_sections_xml	file:
fill	geometry_header.F90	/^     integer :: fill /;"	k	type:Cell
filter_index	output.F90	/^    integer :: filter_index /;"	L	subroutine:write_surface_current	file:
filter_index	output.F90	/^    integer :: filter_index /;"	L	subroutine:write_tallies	file:
filter_index	tally.F90	/^    integer :: filter_index /;"	L	subroutine:score_analog_tally	file:
filter_index	tally.F90	/^    integer :: filter_index /;"	L	subroutine:score_surface_current	file:
filter_index	tally.F90	/^    integer :: filter_index /;"	L	subroutine:score_tl_on_mesh	file:
filter_index	tally.F90	/^    integer :: filter_index /;"	L	subroutine:score_tracklength_tally	file:
filter_index	tally.F90	/^    integer,        intent(in) :: filter_index$/;"	L	subroutine:score_all_nuclides	file:
filter_name	output.F90	/^    character(15)           :: filter_name(/;"	L	subroutine:write_tallies	file:
filter_type	tally.F90	/^    integer, intent(in) :: filter_type /;"	L	function:get_next_bin	file:
filter_value	tally.F90	/^    integer, intent(in) :: filter_value /;"	L	function:get_next_bin	file:
filters	tally_header.F90	/^    type(TallyFilter), allocatable :: filters(/;"	k	type:TallyObject
finalize	cmfd_jfnk_solver.F90	/^  subroutine finalize(/;"	s	module:cmfd_jfnk_solver
finalize	cmfd_power_solver.F90	/^  subroutine finalize(/;"	s	module:cmfd_power_solver
finalize	cmfd_slepc_solver.F90	/^  subroutine finalize(/;"	s
finalize	finalize.F90	/^module finalize$/;"	m
finalize_batch	eigenvalue.F90	/^  subroutine finalize_batch(/;"	s	module:eigenvalue
finalize_batch	fixed_source.F90	/^  subroutine finalize_batch(/;"	s
finalize_generation	eigenvalue.F90	/^  subroutine finalize_generation(/;"	s	module:eigenvalue
finalize_particle_track	track_output.F90	/^  subroutine finalize_particle_track(/;"	s	module:track_output
finalize_run	finalize.F90	/^  subroutine finalize_run(/;"	s	module:finalize
find_cell	geometry.F90	/^  recursive subroutine find_cell(/;"	s	module:geometry
find_energy_index	cross_section.F90	/^  subroutine find_energy_index(/;"	s	module:cross_section
find_filter	tally_header.F90	/^    integer :: find_filter(/;"	k	type:TallyObject
find_grid_index	clustering.F90	/^  function find_grid_index(/;"	f	module:clustering
finish	eigenvalue.F90	/^    integer(8) :: finish /;"	L	subroutine:synchronize_bank	file:
finished	clustering_kmeans.F90	/^    logical :: finished /;"	L	subroutine:perform_kms	file:
first	matrix_header.F90	/^    integer :: first /;"	L	subroutine:sort_csr	file:
fission	ace_header.F90	/^    real(8) :: fission /;"	k	type:MaterialMacroXS
fission	ace_header.F90	/^    real(8) :: fission /;"	k	type:NuclideMicroXS
fission	ace_header.F90	/^    real(8), allocatable :: fission(/;"	k	type:Nuclide
fission	cmfd_data.F90	/^    real(8) :: fission /;"	L	subroutine:neutron_balance	file:
fission	cross_section.F90	/^    real(8) :: fission /;"	L	subroutine:calculate_urr_xs	file:
fission	fission.F90	/^module fission$/;"	m
fission	particle_header.F90	/^    logical    :: fission /;"	k	type:Particle
fission_event	endf.F90	/^    logical             :: fission_event$/;"	L	function:is_fission	file:
fissionable	ace_header.F90	/^    logical :: fissionable /;"	k	type:Nuclide
fix_neutron_balance	cmfd_data.F90	/^  subroutine fix_neutron_balance(/;"	s	module:cmfd_data
fixed_source	fixed_source.F90	/^module fixed_source$/;"	m
flag	solver_interface.F90	/^    integer, intent(inout)        :: flag /;"	L	subroutine:petsc_jfnk_compute_jacobian	file:
flux	cmfd_data.F90	/^    real(8) :: flux /;"	L	subroutine:compute_xs	file:
flux	cmfd_header.F90	/^    real(8), allocatable :: flux(/;"	k	type:cmfd_type
flux	cmfd_jfnk_solver.F90	/^    type(Vector)      :: flux$/;"	L	subroutine:compute_nonlinear_residual	file:
flux	cmfd_jfnk_solver.F90	/^    type(Vector) :: flux /;"	L	subroutine:build_jacobian_matrix	file:
flux	tally.F90	/^    real(8) :: flux /;"	L	subroutine:score_tl_on_mesh	file:
flux	tally.F90	/^    real(8) :: flux /;"	L	subroutine:score_tracklength_tally	file:
flux	tally.F90	/^    real(8),        intent(in) :: flux$/;"	L	subroutine:score_all_nuclides	file:
flux1	cmfd_data.F90	/^    real(8) :: flux1 /;"	L	subroutine:compute_effective_downscatter	file:
flux1	cmfd_data.F90	/^    real(8) :: flux1 /;"	L	subroutine:fix_neutron_balance	file:
flux2	cmfd_data.F90	/^    real(8) :: flux2 /;"	L	subroutine:compute_effective_downscatter	file:
flux2	cmfd_data.F90	/^    real(8) :: flux2 /;"	L	subroutine:fix_neutron_balance	file:
fmt	string.F90	/^    character(5) :: fmt$/;"	L	function:str_to_int	file:
fmt	string.F90	/^    character(9) :: fmt /;"	L	function:real_to_str	file:
fname	track_output.F90	/^    character(MAX_FILE_LEN)  :: fname$/;"	L	subroutine:finalize_particle_track	file:
force	error.F90	/^    logical, optional :: force /;"	L	subroutine:warning	file:
found	cmfd_input.F90	/^    logical :: found$/;"	L	subroutine:read_cmfd_xml	file:
found	geometry.F90	/^    logical :: found /;"	L	subroutine:cross_lattice	file:
found	geometry.F90	/^    logical :: found /;"	L	subroutine:cross_surface	file:
found	geometry.F90	/^    logical,        intent(inout) :: found$/;"	L	subroutine:find_cell	file:
found	source.F90	/^    logical :: found /;"	L	subroutine:sample_external_source	file:
found	xml_interface.F90	/^    logical :: found$/;"	L	function:check_for_node	file:
found	xml_interface.F90	/^    logical :: found$/;"	L	function:get_arraysize_double	file:
found	xml_interface.F90	/^    logical :: found$/;"	L	function:get_arraysize_integer	file:
found	xml_interface.F90	/^    logical :: found$/;"	L	function:get_arraysize_string	file:
found	xml_interface.F90	/^    logical :: found$/;"	L	subroutine:get_node_array_double	file:
found	xml_interface.F90	/^    logical :: found$/;"	L	subroutine:get_node_array_integer	file:
found	xml_interface.F90	/^    logical :: found$/;"	L	subroutine:get_node_array_string	file:
found	xml_interface.F90	/^    logical :: found$/;"	L	subroutine:get_node_value_double	file:
found	xml_interface.F90	/^    logical :: found$/;"	L	subroutine:get_node_value_integer	file:
found	xml_interface.F90	/^    logical :: found$/;"	L	subroutine:get_node_value_long	file:
found	xml_interface.F90	/^    logical :: found$/;"	L	subroutine:get_node_value_string	file:
found	xml_interface.F90	/^    logical, intent(out) :: found$/;"	L	subroutine:get_node	file:
found	xml_interface.F90	/^    logical, intent(out), optional :: found$/;"	L	subroutine:get_node_ptr	file:
found_	xml_interface.F90	/^    logical :: found_$/;"	L	subroutine:get_node_ptr	file:
found_bin	tally.F90	/^    logical :: found_bin /;"	L	subroutine:score_analog_tally	file:
found_bin	tally.F90	/^    logical :: found_bin /;"	L	subroutine:score_tl_on_mesh	file:
found_bin	tally.F90	/^    logical :: found_bin /;"	L	subroutine:score_tracklength_tally	file:
found_bin	tally.F90	/^    logical,        intent(out) :: found_bin$/;"	L	subroutine:get_scoring_bins	file:
found_cell	plot.F90	/^    logical :: found_cell$/;"	L	subroutine:position_rgb	file:
found_cell	tracking.F90	/^    logical :: found_cell /;"	L	subroutine:transport	file:
frac	physics.F90	/^    real(8)        :: frac /;"	L	function:sample_angle	file:
frac	physics.F90	/^    real(8) :: frac /;"	L	subroutine:sample_energy	file:
fsrc	cmfd_jfnk_solver.F90	/^    type(Vector) :: fsrc /;"	L	subroutine:build_jacobian_matrix	file:
func	geometry.F90	/^    real(8) :: func /;"	L	function:sense	file:
g	cmfd_data.F90	/^    intege/;"	L	function:get_reflector_albedo	file:
g	cmfd_data.F90	/^    intege/;"	L	subroutine:compute_dhat	file:
g	cmfd_data.F90	/^    intege/;"	L	subroutine:compute_dtilde	file:
g	cmfd_data.F90	/^    intege/;"	L	subroutine:compute_xs	file:
g	cmfd_data.F90	/^    intege/;"	L	subroutine:neutron_balance	file:
g	cmfd_execute.F90	/^    intege/;"	L	function:get_matrix_idx	file:
g	cmfd_execute.F90	/^    intege/;"	L	subroutine:calc_fission_source	file:
g	cmfd_loss_operator.F90	/^    intege/;"	L	function:preallocate_loss_matrix	file:
g	cmfd_loss_operator.F90	/^    intege/;"	L	subroutine:build_loss_matrix	file:
g	cmfd_loss_operator.F90	/^    intege/;"	L	subroutine:indices_to_matrix	file:
g	cmfd_loss_operator.F90	/^    intege/;"	L	subroutine:matrix_to_indices	file:
g	cmfd_prod_operator.F90	/^    intege/;"	L	subroutine:build_prod_matrix	file:
g	cmfd_prod_operator.F90	/^    intege/;"	L	subroutine:indices_to_matrix	file:
g	cmfd_prod_operator.F90	/^    intege/;"	L	subroutine:matrix_to_indices	file:
g	eigenvalue.F90	/^    real(8) :: g /;"	L	subroutine:calculate_combined_keff	file:
g	ppmlib.F90	/^    intege/;"	L	subroutine:set_pixel	file:
g	random_lcg.F90	/^    intege/;"	L	function:prn_skip_ahead	file:
g_new	random_lcg.F90	/^    integer(8) :: g_new /;"	L	function:prn_skip_ahead	file:
generate_nu_fission	ace.F90	/^  subroutine generate_nu_fission(/;"	s	module:ace
geometry	geometry.F90	/^module geometry$/;"	m
geometry_header	geometry_header.F90	/^module geometry_header$/;"	m
get_arraysize_double	xml_interface.F90	/^  function get_arraysize_double(/;"	f	module:xml_interface
get_arraysize_integer	xml_interface.F90	/^  function get_arraysize_integer(/;"	f	module:xml_interface
get_arraysize_string	xml_interface.F90	/^  function get_arraysize_string(/;"	f	module:xml_interface
get_energy_dist	ace.F90	/^  recursive subroutine get_energy_dist(/;"	s	module:ace
get_int	ace.F90	/^  function get_int(/;"	f	module:ace
get_label	output.F90	/^  function get_label(/;"	f	module:output
get_list_item	xml_interface.F90	/^  subroutine get_list_item(/;"	s	module:xml_interface
get_list_size	xml_interface.F90	/^  function get_list_size(/;"	f	module:xml_interface
get_matrix_idx	cmfd_execute.F90	/^  function get_matrix_idx(/;"	f	module:cmfd_execute
get_mesh_bin	mesh.F90	/^  subroutine get_mesh_bin(/;"	s	module:mesh
get_mesh_indices	mesh.F90	/^  subroutine get_mesh_indices(/;"	s	module:mesh
get_next_bin	tally.F90	/^  function get_next_bin(/;"	f	module:tally
get_node	xml_interface.F90	/^  subroutine get_node(/;"	s	module:xml_interface
get_node_array	xml_interface.F90	/^  interface get_node_array$/;"	i	module:xml_interface
get_node_array_double	xml_interface.F90	/^  subroutine get_node_array_double(/;"	s	module:xml_interface
get_node_array_integer	xml_interface.F90	/^  subroutine get_node_array_integer(/;"	s	module:xml_interface
get_node_array_string	xml_interface.F90	/^  subroutine get_node_array_string(/;"	s	module:xml_interface
get_node_list	xml_interface.F90	/^  subroutine get_node_list(/;"	s	module:xml_interface
get_node_ptr	xml_interface.F90	/^  subroutine get_node_ptr(/;"	s	module:xml_interface
get_node_value	xml_interface.F90	/^  interface get_node_value$/;"	i	module:xml_interface
get_node_value_double	xml_interface.F90	/^  subroutine get_node_value_double(/;"	s	module:xml_interface
get_node_value_integer	xml_interface.F90	/^  subroutine get_node_value_integer(/;"	s	module:xml_interface
get_node_value_long	xml_interface.F90	/^  subroutine get_node_value_long(/;"	s	module:xml_interface
get_node_value_string	xml_interface.F90	/^  subroutine get_node_value_string(/;"	s	module:xml_interface
get_real	ace.F90	/^  function get_real(/;"	f	module:ace
get_reflector_albedo	cmfd_data.F90	/^    real(8) :: get_reflector_albedo /;"	L	function:get_reflector_albedo	file:
get_reflector_albedo	cmfd_data.F90	/^  function get_reflector_albedo(/;"	f	module:cmfd_data
get_scoring_bins	tally.F90	/^  subroutine get_scoring_bins(/;"	s	module:tally
get_source_particle	source.F90	/^  subroutine get_source_particle(/;"	s	module:source
global	global.F90	/^module global$/;"	m
global_temp	state_point.F90	/^    real(8), target :: global_temp(/;"	L	subroutine:write_tally_results_nr	file:
global_temp	tally.F90	/^    real(8) :: global_temp(/;"	L	subroutine:reduce_tally_results	file:
gmres	cmfd_power_solver.F90	/^  type(GMRESSolver) :: gmres /;"	v	module:cmfd_power_solver
green	ppmlib.F90	/^    integer, dimension(:,:), pointer :: red, green,/;"	k	type:Image
grid	clustering.F90	/^    real(8), intent(in), allocatable :: grid(/;"	L	function:find_grid_index	file:
grid_index	ace_header.F90	/^    integer, allocatable :: grid_index(/;"	k	type:Nuclide
grid_method	global.F90	/^  integer :: grid_method /;"	v	module:global
grid_pointers	energy_grid.F90	/^  subroutine grid_pointers(/;"	s	module:energy_grid
group	hdf5_interface.F90	/^    character(*),   intent(in)    :: group /;"	L	subroutine:hdf5_open_group	file:
group	hdf5_interface.F90	/^    integer(HID_T),     intent(in)  :: group /;"	L	subroutine:hdf5_read_long	file:
group	hdf5_interface.F90	/^    integer(HID_T),     intent(in)  :: group /;"	L	subroutine:hdf5_read_long_parallel	file:
group	hdf5_interface.F90	/^    integer(HID_T),     intent(in) :: group /;"	L	subroutine:hdf5_write_long	file:
group	hdf5_interface.F90	/^    integer(HID_T),     intent(in) :: group /;"	L	subroutine:hdf5_write_long_parallel	file:
group	hdf5_interface.F90	/^    integer(HID_T),  intent(in)    :: group /;"	L	subroutine:hdf5_read_double_1Darray_parallel	file:
group	hdf5_interface.F90	/^    integer(HID_T),  intent(in)    :: group /;"	L	subroutine:hdf5_read_double_parallel	file:
group	hdf5_interface.F90	/^    integer(HID_T),  intent(in)    :: group /;"	L	subroutine:hdf5_read_integer_1Darray_parallel	file:
group	hdf5_interface.F90	/^    integer(HID_T),  intent(in)    :: group /;"	L	subroutine:hdf5_read_integer_parallel	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in)    :: group /;"	L	subroutine:hdf5_read_double	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in)    :: group /;"	L	subroutine:hdf5_read_double_1Darray	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in)    :: group /;"	L	subroutine:hdf5_read_double_2Darray	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in)    :: group /;"	L	subroutine:hdf5_read_double_2Darray_parallel	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in)    :: group /;"	L	subroutine:hdf5_read_double_3Darray	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in)    :: group /;"	L	subroutine:hdf5_read_double_3Darray_parallel	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in)    :: group /;"	L	subroutine:hdf5_read_double_4Darray	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in)    :: group /;"	L	subroutine:hdf5_read_double_4Darray_parallel	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in)    :: group /;"	L	subroutine:hdf5_read_integer	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in)    :: group /;"	L	subroutine:hdf5_read_integer_1Darray	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in)    :: group /;"	L	subroutine:hdf5_read_integer_2Darray	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in)    :: group /;"	L	subroutine:hdf5_read_integer_2Darray_parallel	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in)    :: group /;"	L	subroutine:hdf5_read_integer_3Darray	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in)    :: group /;"	L	subroutine:hdf5_read_integer_3Darray_parallel	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in)    :: group /;"	L	subroutine:hdf5_read_integer_4Darray	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in)    :: group /;"	L	subroutine:hdf5_read_integer_4Darray_parallel	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in)    :: group /;"	L	subroutine:hdf5_read_string	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in)    :: group /;"	L	subroutine:hdf5_read_string_parallel	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in)    :: group /;"	L	subroutine:hdf5_write_double_4Darray	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in)    :: group /;"	L	subroutine:hdf5_write_double_4Darray_parallel	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in)    :: group /;"	L	subroutine:hdf5_write_integer_4Darray	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in)    :: group /;"	L	subroutine:hdf5_write_integer_4Darray_parallel	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in)    :: group /;"	L	subroutine:hdf5_write_string	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in)    :: group /;"	L	subroutine:hdf5_write_string_parallel	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in) :: group /;"	L	subroutine:hdf5_write_attribute_string	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in) :: group /;"	L	subroutine:hdf5_write_double	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in) :: group /;"	L	subroutine:hdf5_write_double_1Darray	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in) :: group /;"	L	subroutine:hdf5_write_double_1Darray_parallel	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in) :: group /;"	L	subroutine:hdf5_write_double_2Darray	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in) :: group /;"	L	subroutine:hdf5_write_double_2Darray_parallel	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in) :: group /;"	L	subroutine:hdf5_write_double_3Darray	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in) :: group /;"	L	subroutine:hdf5_write_double_3Darray_parallel	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in) :: group /;"	L	subroutine:hdf5_write_double_parallel	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in) :: group /;"	L	subroutine:hdf5_write_integer	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in) :: group /;"	L	subroutine:hdf5_write_integer_1Darray	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in) :: group /;"	L	subroutine:hdf5_write_integer_1Darray_parallel	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in) :: group /;"	L	subroutine:hdf5_write_integer_2Darray	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in) :: group /;"	L	subroutine:hdf5_write_integer_2Darray_parallel	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in) :: group /;"	L	subroutine:hdf5_write_integer_3Darray	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in) :: group /;"	L	subroutine:hdf5_write_integer_3Darray_parallel	file:
group	hdf5_interface.F90	/^    integer(HID_T), intent(in) :: group /;"	L	subroutine:hdf5_write_integer_parallel	file:
group	output_interface.F90	/^    character(*),      intent(in), optional  :: group /;"	L	subroutine:read_tally_result	file:
group	output_interface.F90	/^    character(*),      intent(in), optional :: group /;"	L	subroutine:write_tally_result	file:
group	output_interface.F90	/^    character(*),   intent(in), optional :: group /;"	L	subroutine:read_double_1Darray	file:
group	output_interface.F90	/^    character(*),   intent(in), optional :: group /;"	L	subroutine:read_integer_1Darray	file:
group	output_interface.F90	/^    character(*), intent(in) :: group /;"	L	subroutine:open_group	file:
group	output_interface.F90	/^    character(*), intent(in), optional :: group /;"	L	subroutine:read_double	file:
group	output_interface.F90	/^    character(*), intent(in), optional :: group /;"	L	subroutine:read_double_2Darray	file:
group	output_interface.F90	/^    character(*), intent(in), optional :: group /;"	L	subroutine:read_double_3Darray	file:
group	output_interface.F90	/^    character(*), intent(in), optional :: group /;"	L	subroutine:read_double_4Darray	file:
group	output_interface.F90	/^    character(*), intent(in), optional :: group /;"	L	subroutine:read_integer	file:
group	output_interface.F90	/^    character(*), intent(in), optional :: group /;"	L	subroutine:read_integer_2Darray	file:
group	output_interface.F90	/^    character(*), intent(in), optional :: group /;"	L	subroutine:read_integer_3Darray	file:
group	output_interface.F90	/^    character(*), intent(in), optional :: group /;"	L	subroutine:read_integer_4Darray	file:
group	output_interface.F90	/^    character(*), intent(in), optional :: group /;"	L	subroutine:read_long	file:
group	output_interface.F90	/^    character(*), intent(in), optional :: group /;"	L	subroutine:read_string	file:
group	output_interface.F90	/^    character(*), intent(in), optional :: group /;"	L	subroutine:write_attribute_string	file:
group	output_interface.F90	/^    character(*), intent(in), optional :: group /;"	L	subroutine:write_double	file:
group	output_interface.F90	/^    character(*), intent(in), optional :: group /;"	L	subroutine:write_double_1Darray	file:
group	output_interface.F90	/^    character(*), intent(in), optional :: group /;"	L	subroutine:write_double_2Darray	file:
group	output_interface.F90	/^    character(*), intent(in), optional :: group /;"	L	subroutine:write_double_3Darray	file:
group	output_interface.F90	/^    character(*), intent(in), optional :: group /;"	L	subroutine:write_double_4Darray	file:
group	output_interface.F90	/^    character(*), intent(in), optional :: group /;"	L	subroutine:write_integer	file:
group	output_interface.F90	/^    character(*), intent(in), optional :: group /;"	L	subroutine:write_integer_1Darray	file:
group	output_interface.F90	/^    character(*), intent(in), optional :: group /;"	L	subroutine:write_integer_2Darray	file:
group	output_interface.F90	/^    character(*), intent(in), optional :: group /;"	L	subroutine:write_integer_3Darray	file:
group	output_interface.F90	/^    character(*), intent(in), optional :: group /;"	L	subroutine:write_integer_4Darray	file:
group	output_interface.F90	/^    character(*), intent(in), optional :: group /;"	L	subroutine:write_long	file:
group	output_interface.F90	/^    character(*), intent(in), optional :: group /;"	L	subroutine:write_string	file:
guess	cmfd_power_solver.F90	/^    real(8) :: guess /;"	L	subroutine:init_data	file:
h	cmfd_data.F90	/^    integer :: h /;"	L	subroutine:compute_xs	file:
h	cmfd_data.F90	/^    integer :: h /;"	L	subroutine:neutron_balance	file:
h	cmfd_loss_operator.F90	/^    integer :: h /;"	L	function:preallocate_loss_matrix	file:
h	cmfd_loss_operator.F90	/^    integer :: h /;"	L	subroutine:build_loss_matrix	file:
h	cmfd_prod_operator.F90	/^    integer :: h /;"	L	subroutine:build_prod_matrix	file:
h	ppmlib.F90	/^    integer,     intent(in)    :: h /;"	L	subroutine:allocate_image	file:
handle_lost_particle	geometry.F90	/^  subroutine handle_lost_particle(/;"	s	module:geometry
has_angle_dist	ace_header.F90	/^    logical :: has_angle_dist /;"	k	type:Reaction
has_energy_dist	ace_header.F90	/^    logical :: has_energy_dist /;"	k	type:Reaction
has_partial_fission	ace_header.F90	/^    logical :: has_partial_fission /;"	k	type:Nuclide
hdf5_close_group	hdf5_interface.F90	/^  subroutine hdf5_close_group(/;"	s	module:hdf5_interface
hdf5_err	hdf5_interface.F90	/^  integer          :: hdf5_err /;"	v	module:hdf5_interface
hdf5_fh	hdf5_interface.F90	/^    integer(HID_T), intent(in)    :: hdf5_fh /;"	L	subroutine:hdf5_open_group	file:
hdf5_fh	output_interface.F90	/^    integer(HID_T) :: hdf5_fh$/;"	k	type:BinaryOutput
hdf5_file_close	hdf5_interface.F90	/^  subroutine hdf5_file_close(/;"	s	module:hdf5_interface
hdf5_file_create	hdf5_interface.F90	/^  subroutine hdf5_file_create(/;"	s	module:hdf5_interface
hdf5_file_create_parallel	hdf5_interface.F90	/^  subroutine hdf5_file_create_parallel(/;"	s	module:hdf5_interface
hdf5_file_open	hdf5_interface.F90	/^  subroutine hdf5_file_open(/;"	s	module:hdf5_interface
hdf5_file_open_parallel	hdf5_interface.F90	/^  subroutine hdf5_file_open_parallel(/;"	s	module:hdf5_interface
hdf5_grp	hdf5_interface.F90	/^    integer(HID_T), intent(inout) :: hdf5_grp /;"	L	subroutine:hdf5_open_group	file:
hdf5_grp	hdf5_interface.F90	/^    integer(HID_T), intent(inout) :: hdf5_grp$/;"	L	subroutine:hdf5_close_group	file:
hdf5_grp	output_interface.F90	/^    integer(HID_T) :: hdf5_grp$/;"	k	type:BinaryOutput
hdf5_initialize	initialize.F90	/^  subroutine hdf5_initialize(/;"	s	module:initialize
hdf5_interface	hdf5_interface.F90	/^module hdf5_interface$/;"	m
hdf5_open_group	hdf5_interface.F90	/^  subroutine hdf5_open_group(/;"	s	module:hdf5_interface
hdf5_rank	hdf5_interface.F90	/^  integer          :: hdf5_rank /;"	v	module:hdf5_interface
hdf5_read_data	hdf5_interface.F90	/^  interface hdf5_read_data$/;"	i	module:hdf5_interface
hdf5_read_double	hdf5_interface.F90	/^  subroutine hdf5_read_double(/;"	s	module:hdf5_interface
hdf5_read_double_1Darray	hdf5_interface.F90	/^  subroutine hdf5_read_double_1Darray(/;"	s	module:hdf5_interface
hdf5_read_double_1Darray_parallel	hdf5_interface.F90	/^  subroutine hdf5_read_double_1Darray_parallel(/;"	s	module:hdf5_interface
hdf5_read_double_2Darray	hdf5_interface.F90	/^  subroutine hdf5_read_double_2Darray(/;"	s	module:hdf5_interface
hdf5_read_double_2Darray_parallel	hdf5_interface.F90	/^  subroutine hdf5_read_double_2Darray_parallel(/;"	s	module:hdf5_interface
hdf5_read_double_3Darray	hdf5_interface.F90	/^  subroutine hdf5_read_double_3Darray(/;"	s	module:hdf5_interface
hdf5_read_double_3Darray_parallel	hdf5_interface.F90	/^  subroutine hdf5_read_double_3Darray_parallel(/;"	s	module:hdf5_interface
hdf5_read_double_4Darray	hdf5_interface.F90	/^  subroutine hdf5_read_double_4Darray(/;"	s	module:hdf5_interface
hdf5_read_double_4Darray_parallel	hdf5_interface.F90	/^  subroutine hdf5_read_double_4Darray_parallel(/;"	s	module:hdf5_interface
hdf5_read_double_parallel	hdf5_interface.F90	/^  subroutine hdf5_read_double_parallel(/;"	s	module:hdf5_interface
hdf5_read_integer	hdf5_interface.F90	/^  subroutine hdf5_read_integer(/;"	s	module:hdf5_interface
hdf5_read_integer_1Darray	hdf5_interface.F90	/^  subroutine hdf5_read_integer_1Darray(/;"	s	module:hdf5_interface
hdf5_read_integer_1Darray_parallel	hdf5_interface.F90	/^  subroutine hdf5_read_integer_1Darray_parallel(/;"	s	module:hdf5_interface
hdf5_read_integer_2Darray	hdf5_interface.F90	/^  subroutine hdf5_read_integer_2Darray(/;"	s	module:hdf5_interface
hdf5_read_integer_2Darray_parallel	hdf5_interface.F90	/^  subroutine hdf5_read_integer_2Darray_parallel(/;"	s	module:hdf5_interface
hdf5_read_integer_3Darray	hdf5_interface.F90	/^  subroutine hdf5_read_integer_3Darray(/;"	s	module:hdf5_interface
hdf5_read_integer_3Darray_parallel	hdf5_interface.F90	/^  subroutine hdf5_read_integer_3Darray_parallel(/;"	s	module:hdf5_interface
hdf5_read_integer_4Darray	hdf5_interface.F90	/^  subroutine hdf5_read_integer_4Darray(/;"	s	module:hdf5_interface
hdf5_read_integer_4Darray_parallel	hdf5_interface.F90	/^  subroutine hdf5_read_integer_4Darray_parallel(/;"	s	module:hdf5_interface
hdf5_read_integer_parallel	hdf5_interface.F90	/^  subroutine hdf5_read_integer_parallel(/;"	s	module:hdf5_interface
hdf5_read_long	hdf5_interface.F90	/^  subroutine hdf5_read_long(/;"	s	module:hdf5_interface
hdf5_read_long_parallel	hdf5_interface.F90	/^  subroutine hdf5_read_long_parallel(/;"	s	module:hdf5_interface
hdf5_read_string	hdf5_interface.F90	/^  subroutine hdf5_read_string(/;"	s	module:hdf5_interface
hdf5_read_string_parallel	hdf5_interface.F90	/^  subroutine hdf5_read_string_parallel(/;"	s	module:hdf5_interface
hdf5_summary	hdf5_summary.F90	/^module hdf5_summary$/;"	m
hdf5_write_attribute_string	hdf5_interface.F90	/^  subroutine hdf5_write_attribute_string(/;"	s	module:hdf5_interface
hdf5_write_data	hdf5_interface.F90	/^  interface hdf5_write_data$/;"	i	module:hdf5_interface
hdf5_write_double	hdf5_interface.F90	/^  subroutine hdf5_write_double(/;"	s	module:hdf5_interface
hdf5_write_double_1Darray	hdf5_interface.F90	/^  subroutine hdf5_write_double_1Darray(/;"	s	module:hdf5_interface
hdf5_write_double_1Darray_parallel	hdf5_interface.F90	/^  subroutine hdf5_write_double_1Darray_parallel(/;"	s	module:hdf5_interface
hdf5_write_double_2Darray	hdf5_interface.F90	/^  subroutine hdf5_write_double_2Darray(/;"	s	module:hdf5_interface
hdf5_write_double_2Darray_parallel	hdf5_interface.F90	/^  subroutine hdf5_write_double_2Darray_parallel(/;"	s	module:hdf5_interface
hdf5_write_double_3Darray	hdf5_interface.F90	/^  subroutine hdf5_write_double_3Darray(/;"	s	module:hdf5_interface
hdf5_write_double_3Darray_parallel	hdf5_interface.F90	/^  subroutine hdf5_write_double_3Darray_parallel(/;"	s	module:hdf5_interface
hdf5_write_double_4Darray	hdf5_interface.F90	/^  subroutine hdf5_write_double_4Darray(/;"	s	module:hdf5_interface
hdf5_write_double_4Darray_parallel	hdf5_interface.F90	/^  subroutine hdf5_write_double_4Darray_parallel(/;"	s	module:hdf5_interface
hdf5_write_double_parallel	hdf5_interface.F90	/^  subroutine hdf5_write_double_parallel(/;"	s	module:hdf5_interface
hdf5_write_geometry	hdf5_summary.F90	/^  subroutine hdf5_write_geometry(/;"	s	module:hdf5_summary
hdf5_write_header	hdf5_summary.F90	/^  subroutine hdf5_write_header(/;"	s	module:hdf5_summary
hdf5_write_integer	hdf5_interface.F90	/^  subroutine hdf5_write_integer(/;"	s	module:hdf5_interface
hdf5_write_integer_1Darray	hdf5_interface.F90	/^  subroutine hdf5_write_integer_1Darray(/;"	s	module:hdf5_interface
hdf5_write_integer_1Darray_parallel	hdf5_interface.F90	/^  subroutine hdf5_write_integer_1Darray_parallel(/;"	s	module:hdf5_interface
hdf5_write_integer_2Darray	hdf5_interface.F90	/^  subroutine hdf5_write_integer_2Darray(/;"	s	module:hdf5_interface
hdf5_write_integer_2Darray_parallel	hdf5_interface.F90	/^  subroutine hdf5_write_integer_2Darray_parallel(/;"	s	module:hdf5_interface
hdf5_write_integer_3Darray	hdf5_interface.F90	/^  subroutine hdf5_write_integer_3Darray(/;"	s	module:hdf5_interface
hdf5_write_integer_3Darray_parallel	hdf5_interface.F90	/^  subroutine hdf5_write_integer_3Darray_parallel(/;"	s	module:hdf5_interface
hdf5_write_integer_4Darray	hdf5_interface.F90	/^  subroutine hdf5_write_integer_4Darray(/;"	s	module:hdf5_interface
hdf5_write_integer_4Darray_parallel	hdf5_interface.F90	/^  subroutine hdf5_write_integer_4Darray_parallel(/;"	s	module:hdf5_interface
hdf5_write_integer_parallel	hdf5_interface.F90	/^  subroutine hdf5_write_integer_parallel(/;"	s	module:hdf5_interface
hdf5_write_long	hdf5_interface.F90	/^  subroutine hdf5_write_long(/;"	s	module:hdf5_interface
hdf5_write_long_parallel	hdf5_interface.F90	/^  subroutine hdf5_write_long_parallel(/;"	s	module:hdf5_interface
hdf5_write_materials	hdf5_summary.F90	/^  subroutine hdf5_write_materials(/;"	s	module:hdf5_summary
hdf5_write_nuclides	hdf5_summary.F90	/^  subroutine hdf5_write_nuclides(/;"	s	module:hdf5_summary
hdf5_write_string	hdf5_interface.F90	/^  subroutine hdf5_write_string(/;"	s	module:hdf5_interface
hdf5_write_string_parallel	hdf5_interface.F90	/^  subroutine hdf5_write_string_parallel(/;"	s	module:hdf5_interface
hdf5_write_summary	hdf5_summary.F90	/^  subroutine hdf5_write_summary(/;"	s	module:hdf5_summary
hdf5_write_tallies	hdf5_summary.F90	/^  subroutine hdf5_write_tallies(/;"	s	module:hdf5_summary
hdf5_write_timing	hdf5_summary.F90	/^  subroutine hdf5_write_timing(/;"	s	module:hdf5_summary
head	list_header.F90	/^    type(ListElemChar), public, pointer :: head /;"	k	type:ListChar
head	list_header.F90	/^    type(ListElemInt), public, pointer :: head /;"	k	type:ListInt
head	list_header.F90	/^    type(ListElemReal), public, pointer :: head /;"	k	type:ListReal
header	output.F90	/^  subroutine header(/;"	s	module:output
header_level	output.F90	/^    integer :: header_level /;"	L	subroutine:header	file:
heating	ace_header.F90	/^    real(8), allocatable :: heating(/;"	k	type:Nuclide
height	ppmlib.F90	/^    integer                          :: width, height$/;"	k	type:Image
high	matrix_header.F90	/^    integer :: high /;"	L	subroutine:split	file:
hmat_idx	cmfd_prod_operator.F90	/^    integer :: hmat_idx /;"	L	subroutine:build_prod_matrix	file:
hxyz	cmfd_execute.F90	/^    real(8) :: hxyz(/;"	L	subroutine:calc_fission_source	file:
hxyz	cmfd_header.F90	/^    real(8), allocatable :: hxyz(/;"	k	type:cmfd_type
hxyz	cmfd_loss_operator.F90	/^    real(8) :: hxyz(/;"	L	subroutine:build_loss_matrix	file:
i	ace.F90	/^    in/;"	L	function:length_energy_dist	file:
i	ace.F90	/^    in/;"	L	subroutine:generate_nu_fission	file:
i	ace.F90	/^    in/;"	L	subroutine:read_ace_table	file:
i	ace.F90	/^    in/;"	L	subroutine:read_angular_dist	file:
i	ace.F90	/^    in/;"	L	subroutine:read_energy_dist	file:
i	ace.F90	/^    in/;"	L	subroutine:read_nu_data	file:
i	ace.F90	/^    in/;"	L	subroutine:read_reactions	file:
i	ace.F90	/^    in/;"	L	subroutine:read_thermal_data	file:
i	ace.F90	/^    in/;"	L	subroutine:read_unr_res	file:
i	ace.F90	/^    in/;"	L	subroutine:read_xs	file:
i	clustering.F90	/^    in/;"	L	subroutine:condense_one_xs	file:
i	clustering.F90	/^    in/;"	L	subroutine:reorder_clusters	file:
i	cmfd_data.F90	/^    in/;"	L	function:get_reflector_albedo	file:
i	cmfd_data.F90	/^    in/;"	L	subroutine:compute_dhat	file:
i	cmfd_data.F90	/^    in/;"	L	subroutine:compute_dtilde	file:
i	cmfd_data.F90	/^    in/;"	L	subroutine:compute_effective_downscatter	file:
i	cmfd_data.F90	/^    in/;"	L	subroutine:compute_xs	file:
i	cmfd_data.F90	/^    in/;"	L	subroutine:fix_neutron_balance	file:
i	cmfd_data.F90	/^    in/;"	L	subroutine:neutron_balance	file:
i	cmfd_data.F90	/^    in/;"	L	subroutine:set_coremap	file:
i	cmfd_execute.F90	/^    in/;"	L	function:get_matrix_idx	file:
i	cmfd_execute.F90	/^    in/;"	L	subroutine:calc_fission_source	file:
i	cmfd_execute.F90	/^    in/;"	L	subroutine:cmfd_reweight	file:
i	cmfd_execute.F90	/^    in/;"	L	subroutine:cmfd_tally_reset	file:
i	cmfd_input.F90	/^    in/;"	L	subroutine:create_cmfd_tally	file:
i	cmfd_jfnk_solver.F90	/^    in/;"	L	subroutine:build_jacobian_matrix	file:
i	cmfd_loss_operator.F90	/^    in/;"	L	function:preallocate_loss_matrix	file:
i	cmfd_loss_operator.F90	/^    in/;"	L	subroutine:build_loss_matrix	file:
i	cmfd_loss_operator.F90	/^    in/;"	L	subroutine:indices_to_matrix	file:
i	cmfd_loss_operator.F90	/^    in/;"	L	subroutine:matrix_to_indices	file:
i	cmfd_power_solver.F90	/^    in/;"	L	subroutine:execute_power_iter	file:
i	cmfd_prod_operator.F90	/^    in/;"	L	subroutine:build_prod_matrix	file:
i	cmfd_prod_operator.F90	/^    in/;"	L	subroutine:indices_to_matrix	file:
i	cmfd_prod_operator.F90	/^    in/;"	L	subroutine:matrix_to_indices	file:
i	cross_section.F90	/^    in/;"	L	subroutine:calculate_xs	file:
i	dict_header.F90	/^    in/;"	L	function:dict_hash_key_ci	file:
i	doppler.F90	/^    in/;"	L	subroutine:broaden	file:
i	eigenvalue.F90	/^    in/;"	L	subroutine:calculate_combined_keff	file:
i	eigenvalue.F90	/^    in/;"	L	subroutine:join_bank_from_threads	file:
i	eigenvalue.F90	/^    in/;"	L	subroutine:shannon_entropy	file:
i	eigenvalue.F90	/^    in/;"	L	subroutine:synchronize_bank	file:
i	energy_grid.F90	/^    in/;"	L	subroutine:add_grid_points	file:
i	energy_grid.F90	/^    in/;"	L	subroutine:grid_pointers	file:
i	energy_grid.F90	/^    in/;"	L	subroutine:unionized_grid	file:
i	fission.F90	/^    in/;"	L	function:nu_prompt	file:
i	fission.F90	/^    in/;"	L	function:nu_total	file:
i	geometry.F90	/^    in/;"	L	function:simple_cell_contains	file:
i	geometry.F90	/^    in/;"	L	subroutine:check_cell_overlap	file:
i	geometry.F90	/^    in/;"	L	subroutine:distance_to_boundary	file:
i	geometry.F90	/^    in/;"	L	subroutine:find_cell	file:
i	geometry.F90	/^    in/;"	L	subroutine:neighbor_lists	file:
i	hdf5_summary.F90	/^    in/;"	L	subroutine:hdf5_write_geometry	file:
i	hdf5_summary.F90	/^    in/;"	L	subroutine:hdf5_write_materials	file:
i	hdf5_summary.F90	/^    in/;"	L	subroutine:hdf5_write_nuclides	file:
i	hdf5_summary.F90	/^    in/;"	L	subroutine:hdf5_write_tallies	file:
i	initialize.F90	/^    in/;"	L	subroutine:adjust_indices	file:
i	initialize.F90	/^    in/;"	L	subroutine:calculate_work	file:
i	initialize.F90	/^    in/;"	L	subroutine:normalize_ao	file:
i	initialize.F90	/^    in/;"	L	subroutine:prepare_universes	file:
i	initialize.F90	/^    in/;"	L	subroutine:read_command_line	file:
i	input_xml.F90	/^    in/;"	L	subroutine:read_cross_sections_xml	file:
i	input_xml.F90	/^    in/;"	L	subroutine:read_geometry_xml	file:
i	input_xml.F90	/^    in/;"	L	subroutine:read_materials_xml	file:
i	input_xml.F90	/^    in/;"	L	subroutine:read_plots_xml	file:
i	input_xml.F90	/^    in/;"	L	subroutine:read_settings_xml	file:
i	input_xml.F90	/^    in/;"	L	subroutine:read_tallies_xml	file:
i	interpolation.F90	/^    in/;"	L	function:interpolate_tab1_array	file:
i	interpolation.F90	/^    in/;"	L	function:interpolate_tab1_object	file:
i	mesh.F90	/^    in/;"	L	subroutine:count_bank_sites	file:
i	output.F90	/^    in/;"	L	function:get_label	file:
i	output.F90	/^    in/;"	L	subroutine:print_cell	file:
i	output.F90	/^    in/;"	L	subroutine:print_geometry	file:
i	output.F90	/^    in/;"	L	subroutine:print_lattice	file:
i	output.F90	/^    in/;"	L	subroutine:print_material	file:
i	output.F90	/^    in/;"	L	subroutine:print_nuclide	file:
i	output.F90	/^    in/;"	L	subroutine:print_overlap_check	file:
i	output.F90	/^    in/;"	L	subroutine:print_particle	file:
i	output.F90	/^    in/;"	L	subroutine:print_plot	file:
i	output.F90	/^    in/;"	L	subroutine:print_sab_table	file:
i	output.F90	/^    in/;"	L	subroutine:print_surface	file:
i	output.F90	/^    in/;"	L	subroutine:print_tally	file:
i	output.F90	/^    in/;"	L	subroutine:print_universe	file:
i	output.F90	/^    in/;"	L	subroutine:write_summary	file:
i	output.F90	/^    in/;"	L	subroutine:write_surface_current	file:
i	output.F90	/^    in/;"	L	subroutine:write_tallies	file:
i	output.F90	/^    in/;"	L	subroutine:write_xs_summary	file:
i	physics.F90	/^    in/;"	L	function:sample_angle	file:
i	physics.F90	/^    in/;"	L	function:sample_nuclide	file:
i	physics.F90	/^    in/;"	L	subroutine:create_fission_sites	file:
i	physics.F90	/^    in/;"	L	subroutine:sab_scatter	file:
i	physics.F90	/^    in/;"	L	subroutine:sample_energy	file:
i	physics.F90	/^    in/;"	L	subroutine:sample_fission	file:
i	physics.F90	/^    in/;"	L	subroutine:scatter	file:
i	plot.F90	/^    in/;"	L	subroutine:output_ppm	file:
i	plot.F90	/^    in/;"	L	subroutine:run_plot	file:
i	random_lcg.F90	/^    in/;"	L	subroutine:initialize_prng	file:
i	random_lcg.F90	/^    in/;"	L	subroutine:prn_set_stream	file:
i	random_lcg.F90	/^    in/;"	L	subroutine:set_particle_seed	file:
i	source.F90	/^    in/;"	L	subroutine:get_source_particle	file:
i	source.F90	/^    in/;"	L	subroutine:initialize_source	file:
i	source.F90	/^    in/;"	L	subroutine:sample_external_source	file:
i	state_point.F90	/^    in/;"	L	subroutine:load_state_point	file:
i	state_point.F90	/^    in/;"	L	subroutine:write_state_point	file:
i	state_point.F90	/^    in/;"	L	subroutine:write_tally_results_nr	file:
i	string.F90	/^    in/;"	L	function:concatenate	file:
i	string.F90	/^    in/;"	L	function:is_number	file:
i	string.F90	/^    in/;"	L	function:starts_with	file:
i	string.F90	/^    in/;"	L	subroutine:lower_case	file:
i	string.F90	/^    in/;"	L	subroutine:split_string	file:
i	string.F90	/^    in/;"	L	subroutine:split_string_wl	file:
i	string.F90	/^    in/;"	L	subroutine:upper_case	file:
i	tally.F90	/^    in/;"	L	subroutine:get_scoring_bins	file:
i	tally.F90	/^    in/;"	L	subroutine:reduce_tally_results	file:
i	tally.F90	/^    in/;"	L	subroutine:score_all_nuclides	file:
i	tally.F90	/^    in/;"	L	subroutine:score_analog_tally	file:
i	tally.F90	/^    in/;"	L	subroutine:score_fission_eout	file:
i	tally.F90	/^    in/;"	L	subroutine:score_surface_current	file:
i	tally.F90	/^    in/;"	L	subroutine:score_tl_on_mesh	file:
i	tally.F90	/^    in/;"	L	subroutine:score_tracklength_tally	file:
i	tally.F90	/^    in/;"	L	subroutine:setup_active_cmfdtallies	file:
i	tally.F90	/^    in/;"	L	subroutine:setup_active_usertallies	file:
i	tally.F90	/^    in/;"	L	subroutine:synchronize_tallies	file:
i	tally.F90	/^    in/;"	L	subroutine:tally_statistics	file:
i	tally_initialize.F90	/^    in/;"	L	subroutine:setup_tally_arrays	file:
i	tally_initialize.F90	/^    in/;"	L	subroutine:setup_tally_maps	file:
i_array	initialize.F90	/^    integer :: i_array /;"	L	subroutine:adjust_indices	file:
i_bank	initialize.F90	/^    integer(8) :: i_bank /;"	L	subroutine:calculate_work	file:
i_clust	clustering.F90	/^    integer :: i, strt, endd, i_clust /;"	L	subroutine:condense_one_xs	file:
i_clust	clustering.F90	/^    integer :: i_clust /;"	L	subroutine:reorder_clusters	file:
i_clust	clustering_kmeans.F90	/^    integer :: i_dim, i_feat, i_clust$/;"	L	subroutine:print_kms	file:
i_clust	clustering_kmeans.F90	/^    integer :: i_feat, i_clust$/;"	L	subroutine:kms_compute_distances	file:
i_clust	clustering_kmeans.F90	/^    integer :: i_feat, i_clust$/;"	L	subroutine:kms_update_clust_cen	file:
i_codebook	cross_section.F90	/^    integer :: i_codebook /;"	L	subroutine:calculate_nuclide_xs	file:
i_cur	clustering.F90	/^    integer :: i_cur /;"	L	subroutine:reorder_clusters	file:
i_dim	clustering_kmeans.F90	/^    integer :: i_dim,/;"	L	subroutine:print_kms	file:
i_eig	cmfd_slepc_solver.F90	/^    integer              :: i_eig /;"	L	subroutine:extract_results	file:
i_end	error.F90	/^    integer :: i_end /;"	L	subroutine:fatal_error	file:
i_end	error.F90	/^    integer :: i_end /;"	L	subroutine:warning	file:
i_end	output.F90	/^    integer :: i_end /;"	L	subroutine:write_message	file:
i_end	string.F90	/^    integer       :: i_end /;"	L	subroutine:split_string	file:
i_end	string.F90	/^    integer       :: i_end /;"	L	subroutine:split_string_wl	file:
i_energy	cross_section.F90	/^    integer :: i_energy /;"	L	subroutine:calculate_urr_xs	file:
i_energy	tally.F90	/^    integer :: i_energy /;"	L	subroutine:score_all_nuclides	file:
i_energy	tally.F90	/^    integer :: i_energy /;"	L	subroutine:score_tracklength_tally	file:
i_feat	clustering_kmeans.F90	/^    integer :: i_dim, i_feat,/;"	L	subroutine:print_kms	file:
i_feat	clustering_kmeans.F90	/^    integer :: i_feat,/;"	L	subroutine:kms_compute_distances	file:
i_feat	clustering_kmeans.F90	/^    integer :: i_feat,/;"	L	subroutine:kms_update_clust_cen	file:
i_filter	output.F90	/^    integer, intent(in)        :: i_filter /;"	L	function:get_label	file:
i_filter	tally.F90	/^    integer :: i_filter /;"	L	subroutine:score_fission_eout	file:
i_filter_ein	cmfd_data.F90	/^    integer :: i_filter_ein /;"	L	subroutine:compute_xs	file:
i_filter_ein	output.F90	/^    integer :: i_filter_ein /;"	L	subroutine:write_surface_current	file:
i_filter_eout	cmfd_data.F90	/^    integer :: i_filter_eout /;"	L	subroutine:compute_xs	file:
i_filter_mesh	cmfd_data.F90	/^    integer :: i_filter_mesh /;"	L	subroutine:compute_xs	file:
i_filter_mesh	cmfd_input.F90	/^    integer :: i_filter_mesh /;"	L	subroutine:create_cmfd_tally	file:
i_filter_mesh	output.F90	/^    integer :: i_filter_mesh /;"	L	subroutine:write_surface_current	file:
i_filter_mesh	tally.F90	/^    integer :: i_filter_mesh /;"	L	subroutine:score_surface_current	file:
i_filter_mesh	tally.F90	/^    integer :: i_filter_mesh /;"	L	subroutine:score_tl_on_mesh	file:
i_filter_surf	cmfd_data.F90	/^    integer :: i_filter_surf /;"	L	subroutine:compute_xs	file:
i_filter_surf	output.F90	/^    integer :: i_filter_surf /;"	L	subroutine:write_surface_current	file:
i_filter_surf	tally.F90	/^    integer :: i_filter_surf /;"	L	subroutine:score_surface_current	file:
i_fission	ace.F90	/^    integer :: i_fission /;"	L	subroutine:read_reactions	file:
i_grid	cross_section.F90	/^    integer :: i_grid /;"	L	subroutine:calculate_nuclide_xs	file:
i_grid	cross_section.F90	/^    integer :: i_grid /;"	L	subroutine:calculate_sab_xs	file:
i_grid	physics.F90	/^    integer :: i_grid$/;"	L	subroutine:sample_fission	file:
i_grid	physics.F90	/^    integer :: i_grid$/;"	L	subroutine:scatter	file:
i_grid_e	cross_section.F90	/^    integer :: i_grid_e /;"	L	subroutine:calculate_nuclide_xs	file:
i_high	ace_header.F90	/^    integer :: i_high /;"	k	type:RrrData
i_listing	ace.F90	/^    integer :: i_listing /;"	L	subroutine:read_xs	file:
i_listing	ace.F90	/^    integer, intent(in) :: i_listing /;"	L	subroutine:read_ace_table	file:
i_listing	output.F90	/^    integer :: i_listing /;"	L	subroutine:write_tallies	file:
i_low	ace_header.F90	/^    integer :: i_low /;"	k	type:RrrData
i_mesh	cmfd_data.F90	/^    integer :: i_mesh /;"	L	subroutine:compute_xs	file:
i_mesh	input_xml.F90	/^    integer :: i_mesh /;"	L	subroutine:read_tallies_xml	file:
i_nuc	tally.F90	/^    integer :: i_nuc /;"	L	subroutine:score_tracklength_tally	file:
i_nuclide	ace.F90	/^    integer :: i_nuclide /;"	L	subroutine:read_xs	file:
i_nuclide	clustering.F90	/^    integer :: i_nuclide$/;"	L	subroutine:cluster_all_nuclides	file:
i_nuclide	clustering.F90	/^    integer, intent(in) :: i_nuclide /;"	L	subroutine:apply_clustering_to_all_xs	file:
i_nuclide	clustering.F90	/^    integer, intent(in) :: i_nuclide /;"	L	subroutine:cluster_one_nuclide	file:
i_nuclide	clustering.F90	/^    integer, intent(in) :: i_nuclide /;"	L	subroutine:thin_energy_grid	file:
i_nuclide	clustering.F90	/^    integer, intent(in) :: i_nuclide /;"	L	subroutine:write_clustering	file:
i_nuclide	cross_section.F90	/^    integer :: i_nuclide /;"	L	subroutine:calculate_xs	file:
i_nuclide	cross_section.F90	/^    integer, intent(in) :: i_nuclide /;"	L	subroutine:calculate_nuclide_xs	file:
i_nuclide	cross_section.F90	/^    integer, intent(in) :: i_nuclide /;"	L	subroutine:calculate_sab_xs	file:
i_nuclide	cross_section.F90	/^    integer, intent(in) :: i_nuclide /;"	L	subroutine:calculate_urr_xs	file:
i_nuclide	output.F90	/^    integer :: i_nuclide /;"	L	subroutine:write_tallies	file:
i_nuclide	physics.F90	/^    integer                    :: i_nuclide$/;"	L	function:sample_nuclide	file:
i_nuclide	physics.F90	/^    integer :: i_nuclide /;"	L	subroutine:sample_reaction	file:
i_nuclide	physics.F90	/^    integer,        intent(in)    :: i_nuclide$/;"	L	subroutine:absorption	file:
i_nuclide	physics.F90	/^    integer,        intent(in)    :: i_nuclide$/;"	L	subroutine:create_fission_sites	file:
i_nuclide	physics.F90	/^    integer,        intent(in)    :: i_nuclide$/;"	L	subroutine:scatter	file:
i_nuclide	physics.F90	/^    integer, intent(in)     :: i_nuclide /;"	L	subroutine:sab_scatter	file:
i_nuclide	physics.F90	/^    integer, intent(in)     :: i_nuclide$/;"	L	subroutine:elastic_scatter	file:
i_nuclide	physics.F90	/^    integer, intent(in)  :: i_nuclide /;"	L	subroutine:sample_fission	file:
i_nuclide	tally.F90	/^    integer :: i_nuclide /;"	L	subroutine:score_all_nuclides	file:
i_nuclide	tally.F90	/^    integer :: i_nuclide /;"	L	subroutine:score_analog_tally	file:
i_nuclide	tally.F90	/^    integer :: i_nuclide /;"	L	subroutine:score_tl_on_mesh	file:
i_nuclide	tally.F90	/^    integer :: i_nuclide /;"	L	subroutine:score_tracklength_tally	file:
i_reaction	physics.F90	/^    integer :: i_reaction /;"	L	subroutine:sample_reaction	file:
i_reaction	physics.F90	/^    integer,        intent(in)    :: i_reaction$/;"	L	subroutine:create_fission_sites	file:
i_reaction	physics.F90	/^    integer, intent(out) :: i_reaction /;"	L	subroutine:sample_fission	file:
i_sab	ace.F90	/^    integer :: i_sab /;"	L	subroutine:read_xs	file:
i_sab	cross_section.F90	/^    integer :: i_sab /;"	L	subroutine:calculate_xs	file:
i_sab	cross_section.F90	/^    integer, intent(in) :: i_sab /;"	L	subroutine:calculate_nuclide_xs	file:
i_sab	cross_section.F90	/^    integer, intent(in) :: i_sab /;"	L	subroutine:calculate_sab_xs	file:
i_sab	physics.F90	/^    integer, intent(in)     :: i_sab /;"	L	subroutine:sab_scatter	file:
i_sab_nuclides	material_header.F90	/^    integer, allocatable :: i_sab_nuclides(/;"	k	type:Material
i_sab_tables	material_header.F90	/^    integer, allocatable :: i_sab_tables(/;"	k	type:Material
i_score	tally.F90	/^    integer, intent(in)        :: i_score /;"	L	subroutine:score_fission_eout	file:
i_start	error.F90	/^    integer :: i_start /;"	L	subroutine:fatal_error	file:
i_start	error.F90	/^    integer :: i_start /;"	L	subroutine:warning	file:
i_start	output.F90	/^    integer :: i_start /;"	L	subroutine:write_message	file:
i_start	string.F90	/^    integer       :: i_start /;"	L	subroutine:split_string	file:
i_start	string.F90	/^    integer       :: i_start /;"	L	subroutine:split_string_wl	file:
i_start	string.F90	/^    integer :: i_start$/;"	L	function:ends_with	file:
i_start	string.F90	/^    integer :: i_start$/;"	L	function:starts_with	file:
i_surface	geometry.F90	/^    integer :: i_surface /;"	L	function:simple_cell_contains	file:
i_surface	geometry.F90	/^    integer :: i_surface /;"	L	subroutine:cross_surface	file:
i_surface	geometry.F90	/^    integer :: i_surface /;"	L	subroutine:neighbor_lists	file:
i_table	ace.F90	/^    integer, intent(in) :: i_table /;"	L	subroutine:read_ace_table	file:
i_table	cross_section.F90	/^    integer :: i_table /;"	L	subroutine:calculate_urr_xs	file:
i_tally	tally.F90	/^    integer :: i_tally$/;"	L	subroutine:score_analog_tally	file:
i_tally	tally.F90	/^    integer :: i_tally$/;"	L	subroutine:score_surface_current	file:
i_tally	tally.F90	/^    integer :: i_tally$/;"	L	subroutine:score_tracklength_tally	file:
i_tally	tally.F90	/^    integer,        intent(in)  :: i_tally$/;"	L	subroutine:get_scoring_bins	file:
i_tally	tally.F90	/^    integer,        intent(in) :: i_tally$/;"	L	subroutine:score_all_nuclides	file:
i_tally	tally.F90	/^    integer,        intent(in) :: i_tally$/;"	L	subroutine:score_tl_on_mesh	file:
i_tally	tally.F90	/^    integer, intent(in) :: i_tally /;"	L	function:get_next_bin	file:
i_tally_check	tally.F90	/^    integer :: i_tally_check$/;"	L	function:get_next_bin	file:
i_univ	initialize.F90	/^    integer              :: i_univ /;"	L	subroutine:prepare_universes	file:
i_work	eigenvalue.F90	/^    integer(8)     :: i_work$/;"	L	subroutine:run_eigenvalue	file:
i_x	geometry.F90	/^    integer :: i_x,/;"	L	subroutine:cross_lattice	file:
i_x	geometry.F90	/^    integer :: i_x,/;"	L	subroutine:find_cell	file:
i_y	geometry.F90	/^    integer :: i_x, i_y,/;"	L	subroutine:cross_lattice	file:
i_y	geometry.F90	/^    integer :: i_x, i_y,/;"	L	subroutine:find_cell	file:
i_z	geometry.F90	/^    integer :: i_x, i_y, i_z /;"	L	subroutine:cross_lattice	file:
i_z	geometry.F90	/^    integer :: i_x, i_y, i_z /;"	L	subroutine:find_cell	file:
iarray	cmfd_input.F90	/^    integer, allocatable :: iarray(/;"	L	subroutine:read_cmfd_xml	file:
iarray	input_xml.F90	/^    integer, allocatable :: iarray(/;"	L	subroutine:read_plots_xml	file:
iarray3	cmfd_input.F90	/^    integer :: iarray3(/;"	L	subroutine:create_cmfd_tally	file:
iarray3	input_xml.F90	/^    integer :: iarray3(/;"	L	subroutine:read_tallies_xml	file:
ic	string.F90	/^    integer :: ic$/;"	L	function:is_number	file:
ic	string.F90	/^    integer :: ic$/;"	L	subroutine:lower_case	file:
ic	string.F90	/^    integer :: ic$/;"	L	subroutine:upper_case	file:
iconv	cmfd_power_solver.F90	/^  logical :: iconv /;"	v	module:cmfd_power_solver
id	geometry_header.F90	/^     integer :: id /;"	k	type:Cell
id	geometry_header.F90	/^     integer :: id /;"	k	type:Lattice
id	geometry_header.F90	/^     integer :: id /;"	k	type:Surface
id	geometry_header.F90	/^     integer :: id /;"	k	type:Universe
id	initialize.F90	/^    integer :: id /;"	L	subroutine:adjust_indices	file:
id	input_xml.F90	/^    integer :: id /;"	L	subroutine:read_tallies_xml	file:
id	material_header.F90	/^    integer              :: id /;"	k	type:Material
id	mesh_header.F90	/^    integer :: id /;"	k	type:StructuredMesh
id	output.F90	/^    integer :: id /;"	L	subroutine:print_tally	file:
id	particle_header.F90	/^    integer(8) :: id /;"	k	type:Particle
id	plot.F90	/^    integer :: id /;"	L	subroutine:create_3d_dump	file:
id	plot.F90	/^    integer :: id$/;"	L	subroutine:create_ppm	file:
id	plot.F90	/^    integer, intent(out)                  :: id$/;"	L	subroutine:position_rgb	file:
id	plot_header.F90	/^    integer :: id /;"	k	type:ObjectPlot
id	random_lcg.F90	/^    integer(8), intent(in) :: id$/;"	L	subroutine:set_particle_seed	file:
id	source.F90	/^    integer(8) :: id /;"	L	subroutine:initialize_source	file:
id	tally_header.F90	/^    integer :: id /;"	k	type:TallyObject
idx	cmfd_execute.F90	/^    integer :: idx /;"	L	subroutine:calc_fission_source	file:
idx	vector_header.F90	/^    integer, intent(in)          :: idx /;"	L	subroutine:vector_add_value	file:
idx	xml_interface.F90	/^    integer, intent(in) :: idx$/;"	L	subroutine:get_list_item	file:
ierr	solver_interface.F90	/^    integer, intent(inout)        :: ierr /;"	L	subroutine:petsc_jfnk_compute_jacobian	file:
ierr	solver_interface.F90	/^    integer, intent(inout)        :: ierr /;"	L	subroutine:petsc_jfnk_compute_residual	file:
ijk	cmfd_data.F90	/^    integer :: ijk(/;"	L	subroutine:compute_xs	file:
ijk	cmfd_execute.F90	/^    integer :: ijk(/;"	L	subroutine:cmfd_reweight	file:
ijk	mesh.F90	/^    integer :: ijk(/;"	L	subroutine:count_bank_sites	file:
ijk	mesh.F90	/^    integer :: ijk(/;"	L	subroutine:get_mesh_bin	file:
ijk	mesh.F90	/^    integer, intent(in)           :: ijk(/;"	L	function:mesh_indices_to_bin	file:
ijk	mesh.F90	/^    integer, intent(out)          :: ijk(/;"	L	subroutine:bin_to_mesh_indices	file:
ijk	mesh.F90	/^    integer, intent(out)          :: ijk(/;"	L	subroutine:get_mesh_indices	file:
ijk	output.F90	/^    integer, allocatable :: ijk(/;"	L	function:get_label	file:
ijk	physics.F90	/^    integer :: ijk(/;"	L	subroutine:create_fission_sites	file:
ijk0	tally.F90	/^    integer :: ijk0(/;"	L	subroutine:score_surface_current	file:
ijk0	tally.F90	/^    integer :: ijk0(/;"	L	subroutine:score_tl_on_mesh	file:
ijk1	tally.F90	/^    integer :: ijk1(/;"	L	subroutine:score_surface_current	file:
ijk1	tally.F90	/^    integer :: ijk1(/;"	L	subroutine:score_tl_on_mesh	file:
ijk_cross	tally.F90	/^    integer :: ijk_cross(/;"	L	subroutine:score_tl_on_mesh	file:
img	plot.F90	/^    type(Image)       :: img$/;"	L	subroutine:create_ppm	file:
img	plot.F90	/^    type(Image), intent(in)  :: img$/;"	L	subroutine:output_ppm	file:
img	ppmlib.F90	/^    type(Image) :: img$/;"	L	subroutine:deallocate_image	file:
img	ppmlib.F90	/^    type(Image), intent(in) :: img$/;"	L	function:inside_image	file:
img	ppmlib.F90	/^    type(Image), intent(in) :: img$/;"	L	function:valid_image	file:
img	ppmlib.F90	/^    type(Image), intent(inout) :: img$/;"	L	subroutine:allocate_image	file:
img	ppmlib.F90	/^    type(Image), intent(inout) :: img$/;"	L	subroutine:set_pixel	file:
img	ppmlib.F90	/^    type(Image), intent(out) :: img$/;"	L	subroutine:init_image	file:
imomstr	input_xml.F90	/^    integer :: imomstr /;"	L	subroutine:read_tallies_xml	file:
in	ace.F90	/^    int/;"	L	subroutine:read_ace_table	file:
in_cell	geometry.F90	/^    logical                       :: in_cell$/;"	L	function:simple_cell_contains	file:
in_i	plot.F90	/^    integer :: in_i$/;"	L	subroutine:create_ppm	file:
in_mesh	cmfd_execute.F90	/^    logical :: in_mesh /;"	L	subroutine:cmfd_reweight	file:
in_mesh	mesh.F90	/^    logical :: in_mesh /;"	L	subroutine:count_bank_sites	file:
in_mesh	mesh.F90	/^    logical :: in_mesh /;"	L	subroutine:get_mesh_bin	file:
in_mesh	mesh.F90	/^    logical, intent(out)          :: in_mesh /;"	L	subroutine:get_mesh_indices	file:
in_mesh	physics.F90	/^    logical :: in_mesh /;"	L	subroutine:create_fission_sites	file:
in_pixel	plot.F90	/^    real(8) :: in_pixel$/;"	L	subroutine:create_ppm	file:
in_ptr	xml_interface.F90	/^    type(Node), pointer, intent(in) :: in_ptr$/;"	L	subroutine:get_node	file:
in_ptr	xml_interface.F90	/^    type(Node), pointer, intent(in) :: in_ptr$/;"	L	subroutine:get_node_list	file:
in_ptr	xml_interface.F90	/^    type(Node), pointer, intent(in) :: in_ptr$/;"	L	subroutine:get_node_ptr	file:
in_ptr	xml_interface.F90	/^    type(NodeList), pointer, intent(in) :: in_ptr$/;"	L	function:get_list_size	file:
in_ptr	xml_interface.F90	/^    type(NodeList), pointer, intent(in) :: in_ptr$/;"	L	subroutine:get_list_item	file:
indent	error.F90	/^    integer :: indent /;"	L	subroutine:fatal_error	file:
indent	error.F90	/^    integer :: indent /;"	L	subroutine:warning	file:
indent	output.F90	/^    integer :: indent /;"	L	subroutine:write_tallies	file:
index_bin	tally_header.F90	/^    integer :: index_bin$/;"	k	type:TallyMapElement
index_bin	tally_initialize.F90	/^    integer, intent(in) :: index_bin /;"	L	subroutine:add_map_element	file:
index_cell	geometry.F90	/^    integer :: index_cell /;"	L	subroutine:check_cell_overlap	file:
index_cell	geometry.F90	/^    integer :: index_cell /;"	L	subroutine:find_cell	file:
index_cell	output.F90	/^    integer :: index_cell /;"	L	subroutine:print_cell	file:
index_cell_in_univ	initialize.F90	/^    integer, allocatable :: index_cell_in_univ(/;"	L	subroutine:prepare_universes	file:
index_e	energy_grid.F90	/^    integer :: index_e /;"	L	subroutine:grid_pointers	file:
index_fission	ace_header.F90	/^    integer, allocatable :: index_fission(/;"	k	type:Nuclide
index_grid	ace_header.F90	/^    integer :: index_grid /;"	k	type:NuclideMicroXS
index_list	initialize.F90	/^    integer        :: index_list /;"	L	subroutine:normalize_ao	file:
index_list	input_xml.F90	/^    integer :: index_list /;"	L	subroutine:read_materials_xml	file:
index_local	eigenvalue.F90	/^    integer(8) :: index_local /;"	L	subroutine:synchronize_bank	file:
index_nuclide	input_xml.F90	/^    integer :: index_nuclide /;"	L	subroutine:read_materials_xml	file:
index_sab	ace_header.F90	/^    integer :: index_sab /;"	k	type:NuclideMicroXS
index_sab	input_xml.F90	/^    integer :: index_sab /;"	L	subroutine:read_materials_xml	file:
index_source	source.F90	/^    integer(8),     intent(in)    :: index_source$/;"	L	subroutine:get_source_particle	file:
index_surf	geometry.F90	/^    integer :: index_surf /;"	L	subroutine:distance_to_boundary	file:
index_surf	output.F90	/^    integer :: index_surf /;"	L	subroutine:print_cell	file:
index_tally	tally_header.F90	/^    integer :: index_tally$/;"	k	type:TallyMapElement
index_tally	tally_initialize.F90	/^    integer, intent(in) :: index_tally /;"	L	subroutine:add_map_element	file:
index_temp	ace_header.F90	/^    integer :: index_temp /;"	k	type:NuclideMicroXS
index_temp	eigenvalue.F90	/^    integer(8) :: index_temp /;"	L	subroutine:synchronize_bank	file:
indexmap	cmfd_header.F90	/^    integer, allocatable :: indexmap(/;"	k	type:cmfd_type
indices	cmfd_header.F90	/^    integer :: indices(/;"	k	type:cmfd_type
indices_to_matrix	cmfd_loss_operator.F90	/^  subroutine indices_to_matrix(/;"	s	module:cmfd_loss_operator
indices_to_matrix	cmfd_prod_operator.F90	/^  subroutine indices_to_matrix(/;"	s	module:cmfd_prod_operator
inelastic	cross_section.F90	/^    real(8) :: inelastic /;"	L	subroutine:calculate_sab_xs	file:
inelastic	cross_section.F90	/^    real(8) :: inelastic /;"	L	subroutine:calculate_urr_xs	file:
inelastic_data	ace_header.F90	/^    type(DistEnergySab), allocatable :: inelastic_data(/;"	k	type:SAlphaBeta
inelastic_e_in	ace_header.F90	/^    real(8), allocatable :: inelastic_e_in(/;"	k	type:SAlphaBeta
inelastic_e_out	ace_header.F90	/^    real(8), allocatable :: inelastic_e_out(/;"	k	type:SAlphaBeta
inelastic_flag	ace_header.F90	/^    integer :: inelastic_flag /;"	k	type:UrrData
inelastic_mu	ace_header.F90	/^    real(8), allocatable :: inelastic_mu(/;"	k	type:SAlphaBeta
inelastic_scatter	physics.F90	/^  subroutine inelastic_scatter(/;"	s	module:physics
inelastic_sigma	ace_header.F90	/^    real(8), allocatable :: inelastic_sigma(/;"	k	type:SAlphaBeta
init_data	cmfd_jfnk_solver.F90	/^  subroutine init_data(/;"	s	module:cmfd_jfnk_solver
init_data	cmfd_power_solver.F90	/^  subroutine init_data(/;"	s	module:cmfd_power_solver
init_data	cmfd_slepc_solver.F90	/^  subroutine init_data(/;"	s
init_image	ppmlib.F90	/^  subroutine init_image(/;"	s	module:ppmlib
init_jacobian_matrix	cmfd_jfnk_solver.F90	/^  subroutine init_jacobian_matrix(/;"	s	module:cmfd_jfnk_solver
init_loss_matrix	cmfd_loss_operator.F90	/^  subroutine init_loss_matrix(/;"	s	module:cmfd_loss_operator
init_prod_matrix	cmfd_prod_operator.F90	/^  subroutine init_prod_matrix(/;"	s	module:cmfd_prod_operator
init_solver	cmfd_slepc_solver.F90	/^  subroutine init_solver(/;"	s
initialize	initialize.F90	/^module initialize$/;"	m
initialize_batch	eigenvalue.F90	/^  subroutine initialize_batch(/;"	s	module:eigenvalue
initialize_batch	fixed_source.F90	/^  subroutine initialize_batch(/;"	s
initialize_generation	eigenvalue.F90	/^  subroutine initialize_generation(/;"	s	module:eigenvalue
initialize_mpi	initialize.F90	/^  subroutine initialize_mpi(/;"	s	module:initialize
initialize_particle	particle_header.F90	/^  subroutine initialize_particle(/;"	s	module:particle_header
initialize_particle_track	track_output.F90	/^  subroutine initialize_particle_track(/;"	s	module:track_output
initialize_prng	random_lcg.F90	/^  subroutine initialize_prng(/;"	s	module:random_lcg
initialize_run	initialize.F90	/^  subroutine initialize_run(/;"	s	module:initialize
initialize_source	source.F90	/^  subroutine initialize_source(/;"	s	module:source
input_xml	input_xml.F90	/^module input_xml$/;"	m
inside	ppmlib.F90	/^    logical                 :: inside$/;"	L	function:inside_image	file:
inside_image	ppmlib.F90	/^  function inside_image(/;"	f	module:ppmlib
int	endf_header.F90	/^    inte/;"	k	type:Tab1
int4_to_str	string.F90	/^  function int4_to_str(/;"	f	module:string
int8_to_str	string.F90	/^  function int8_to_str(/;"	f	module:string
int_array	state_point.F90	/^    integer                 :: int_array(/;"	L	subroutine:load_state_point	file:
int_bins	tally_header.F90	/^    integer, allocatable :: int_bins(/;"	k	type:TallyFilter
int_scalar	particle_restart.F90	/^    integer :: int_scalar$/;"	L	subroutine:read_particle_restart	file:
interactions	cmfd_data.F90	/^    real(8) :: interactions /;"	L	subroutine:neutron_balance	file:
interp	ace_header.F90	/^    integer :: interp /;"	k	type:UrrData
interp	interpolation.F90	/^    integer :: interp /;"	L	function:interpolate_tab1_array	file:
interp	interpolation.F90	/^    integer :: interp /;"	L	function:interpolate_tab1_object	file:
interp	physics.F90	/^    integer        :: interp /;"	L	function:sample_angle	file:
interp_factor	ace_header.F90	/^    real(8) :: interp_factor /;"	k	type:NuclideMicroXS
interpolate_tab1	interpolation.F90	/^  interface interpolate_tab1$/;"	i	module:interpolation
interpolate_tab1_array	interpolation.F90	/^  function interpolate_tab1_array(/;"	f	module:interpolation
interpolate_tab1_object	interpolation.F90	/^  function interpolate_tab1_object(/;"	f	module:interpolation
interpolation	interpolation.F90	/^module interpolation$/;"	m
intersects	mesh.F90	/^    logical :: intersects$/;"	L	function:mesh_intersects_2d	file:
intersects	mesh.F90	/^    logical :: intersects$/;"	L	function:mesh_intersects_3d	file:
ioError	string.F90	/^    integer      :: ioError$/;"	L	function:str_to_int	file:
ioError	string.F90	/^    integer :: ioError$/;"	L	function:str_to_real	file:
irow	cmfd_loss_operator.F90	/^    integer :: irow /;"	L	function:preallocate_loss_matrix	file:
irow	cmfd_loss_operator.F90	/^    integer :: irow /;"	L	subroutine:build_loss_matrix	file:
irow	cmfd_loss_operator.F90	/^    integer, intent(in)  :: irow /;"	L	subroutine:matrix_to_indices	file:
irow	cmfd_prod_operator.F90	/^    integer :: irow /;"	L	subroutine:build_prod_matrix	file:
irow	cmfd_prod_operator.F90	/^    integer, intent(in)  :: irow /;"	L	subroutine:matrix_to_indices	file:
is_fission	endf.F90	/^  function is_fission(/;"	f	module:endf
is_number	string.F90	/^  function is_number(/;"	f	module:string
is_scatter	endf.F90	/^  function is_scatter(/;"	f	module:endf
is_terminal	progress_header.F90	/^    function is_terminal(/;"	f	module:progress_header
istty	progress_header.F90	/^      logical :: istty$/;"	L	function:is_terminal	file:
iswap	matrix_header.F90	/^    integer :: iswap /;"	L	subroutine:split	file:
it	clustering_kmeans.F90	/^    integer :: it /;"	L	subroutine:perform_kms	file:
it	clustering_kmeans.F90	/^    integer, intent(in) :: it /;"	L	subroutine:print_kms	file:
ital	cmfd_data.F90	/^    integer :: ital /;"	L	subroutine:compute_xs	file:
item	tally_initialize.F90	/^    type(TallyMapItem), intent(inout) :: item$/;"	L	subroutine:add_map_element	file:
items	tally_header.F90	/^    type(TallyMapItem), allocatable :: items(/;"	k	type:TallyMap
iter	cmfd_power_solver.F90	/^    integer, intent(in) :: iter /;"	L	subroutine:convergence	file:
itmp	source.F90	/^    integer(4) :: itmp /;"	L	subroutine:initialize_source	file:
j	ace.F90	/^    integer       :: j,/;"	L	subroutine:read_ace_table	file:
j	ace.F90	/^    integer :: j /;"	L	function:length_energy_dist	file:
j	ace.F90	/^    integer :: j /;"	L	subroutine:read_angular_dist	file:
j	ace.F90	/^    integer :: j /;"	L	subroutine:read_thermal_data	file:
j	ace.F90	/^    integer :: j /;"	L	subroutine:read_unr_res	file:
j	ace.F90	/^    integer :: j /;"	L	subroutine:read_xs	file:
j	cmfd_data.F90	/^    integer :: j /;"	L	subroutine:compute_dhat	file:
j	cmfd_data.F90	/^    integer :: j /;"	L	subroutine:compute_dtilde	file:
j	cmfd_data.F90	/^    integer :: j /;"	L	subroutine:compute_effective_downscatter	file:
j	cmfd_data.F90	/^    integer :: j /;"	L	subroutine:compute_xs	file:
j	cmfd_data.F90	/^    integer :: j /;"	L	subroutine:fix_neutron_balance	file:
j	cmfd_data.F90	/^    integer :: j /;"	L	subroutine:neutron_balance	file:
j	cmfd_data.F90	/^    integer :: j /;"	L	subroutine:set_coremap	file:
j	cmfd_data.F90	/^    integer, intent(in) :: j /;"	L	function:get_reflector_albedo	file:
j	cmfd_execute.F90	/^    integer :: j /;"	L	subroutine:calc_fission_source	file:
j	cmfd_execute.F90	/^    integer, intent(in) :: j /;"	L	function:get_matrix_idx	file:
j	cmfd_loss_operator.F90	/^    integer :: j /;"	L	function:preallocate_loss_matrix	file:
j	cmfd_loss_operator.F90	/^    integer :: j /;"	L	subroutine:build_loss_matrix	file:
j	cmfd_loss_operator.F90	/^    integer, intent(in)  :: j /;"	L	subroutine:indices_to_matrix	file:
j	cmfd_loss_operator.F90	/^    integer, intent(out) :: j /;"	L	subroutine:matrix_to_indices	file:
j	cmfd_prod_operator.F90	/^    integer :: j /;"	L	subroutine:build_prod_matrix	file:
j	cmfd_prod_operator.F90	/^    integer, intent(in)  :: j /;"	L	subroutine:indices_to_matrix	file:
j	cmfd_prod_operator.F90	/^    integer, intent(out) :: j /;"	L	subroutine:matrix_to_indices	file:
j	cross_section.F90	/^    integer :: j /;"	L	subroutine:calculate_xs	file:
j	eigenvalue.F90	/^    integer    :: j /;"	L	subroutine:synchronize_bank	file:
j	eigenvalue.F90	/^    integer :: i, j,/;"	L	subroutine:calculate_combined_keff	file:
j	eigenvalue.F90	/^    integer :: i, j,/;"	L	subroutine:shannon_entropy	file:
j	energy_grid.F90	/^    integer :: j /;"	L	subroutine:grid_pointers	file:
j	geometry.F90	/^    integer :: j /;"	L	subroutine:neighbor_lists	file:
j	hdf5_summary.F90	/^    integer           :: i, j$/;"	L	subroutine:hdf5_write_tallies	file:
j	hdf5_summary.F90	/^    integer          :: i, j,/;"	L	subroutine:hdf5_write_geometry	file:
j	hdf5_summary.F90	/^    integer          :: j$/;"	L	subroutine:hdf5_write_materials	file:
j	hdf5_summary.F90	/^    integer        :: i, j$/;"	L	subroutine:hdf5_write_nuclides	file:
j	initialize.F90	/^    integer        :: j /;"	L	subroutine:normalize_ao	file:
j	initialize.F90	/^    integer :: j /;"	L	subroutine:adjust_indices	file:
j	input_xml.F90	/^    integer :: i, j,/;"	L	subroutine:read_geometry_xml	file:
j	input_xml.F90	/^    integer :: j /;"	L	subroutine:read_materials_xml	file:
j	input_xml.F90	/^    integer :: j /;"	L	subroutine:read_tallies_xml	file:
j	input_xml.F90	/^    integer i, j$/;"	L	subroutine:read_plots_xml	file:
j	interpolation.F90	/^    integer :: j /;"	L	function:interpolate_tab1_array	file:
j	interpolation.F90	/^    integer :: j /;"	L	function:interpolate_tab1_object	file:
j	output.F90	/^    integer :: i, j$/;"	L	subroutine:print_overlap_check	file:
j	output.F90	/^    integer :: j /;"	L	subroutine:print_tally	file:
j	output.F90	/^    integer :: j /;"	L	subroutine:write_surface_current	file:
j	output.F90	/^    integer :: j /;"	L	subroutine:write_tallies	file:
j	physics.F90	/^    integer :: j /;"	L	function:sample_fission_energy	file:
j	physics.F90	/^    integer :: j /;"	L	subroutine:sab_scatter	file:
j	plot.F90	/^    integer :: j /;"	L	subroutine:output_ppm	file:
j	state_point.F90	/^    integer                 :: j$/;"	L	subroutine:load_state_point	file:
j	state_point.F90	/^    integer                 :: j$/;"	L	subroutine:write_state_point	file:
j	tally.F90	/^    integer :: j /;"	L	subroutine:score_all_nuclides	file:
j	tally.F90	/^    integer :: j /;"	L	subroutine:score_analog_tally	file:
j	tally.F90	/^    integer :: j /;"	L	subroutine:score_surface_current	file:
j	tally.F90	/^    integer :: j /;"	L	subroutine:score_tl_on_mesh	file:
j	tally.F90	/^    integer :: j /;"	L	subroutine:score_tracklength_tally	file:
j	tally_initialize.F90	/^    integer :: j /;"	L	subroutine:setup_tally_arrays	file:
j	tally_initialize.F90	/^    integer :: j /;"	L	subroutine:setup_tally_maps	file:
j1	ace.F90	/^    integer       :: j, j1,/;"	L	subroutine:read_ace_table	file:
j2	ace.F90	/^    integer       :: j, j1, j2 /;"	L	subroutine:read_ace_table	file:
jac_interface	solver_interface.F90	/^    subroutine jac_interface(/;"	s
jac_mf	solver_interface.F90	/^    type(mat)  :: jac_mf /;"	k	type:JFNKSolver
jac_mf	solver_interface.F90	/^    type(mat), intent(inout)      :: jac_mf /;"	L	subroutine:petsc_jfnk_compute_jacobian	file:
jac_prec	cmfd_jfnk_solver.F90	/^  type(Matrix)     :: jac_prec /;"	v	module:cmfd_jfnk_solver
jac_prec	solver_interface.F90	/^    type(mat), intent(inout)      :: jac_prec /;"	L	subroutine:petsc_jfnk_compute_jacobian	file:
jfnk	cmfd_jfnk_solver.F90	/^  type(JFNKSolver) :: jfnk /;"	v	module:cmfd_jfnk_solver
jfnk_data	cmfd_jfnk_solver.F90	/^  type(Jfnk_ctx)   :: jfnk_data /;"	v	module:cmfd_jfnk_solver
jjac	cmfd_jfnk_solver.F90	/^    integer      :: jjac /;"	L	subroutine:build_jacobian_matrix	file:
jloss	cmfd_jfnk_solver.F90	/^    integer      :: jloss /;"	L	subroutine:build_jacobian_matrix	file:
jn	cmfd_loss_operator.F90	/^    real(8) :: jn /;"	L	subroutine:build_loss_matrix	file:
jnet	cmfd_loss_operator.F90	/^    real(8) :: jnet /;"	L	subroutine:build_loss_matrix	file:
jo	cmfd_loss_operator.F90	/^    real(8) :: jo(/;"	L	subroutine:build_loss_matrix	file:
join_bank_from_threads	eigenvalue.F90	/^  subroutine join_bank_from_threads(/;"	s	module:eigenvalue
jprod	cmfd_jfnk_solver.F90	/^    integer      :: jprod /;"	L	subroutine:build_jacobian_matrix	file:
k	ace.F90	/^    integer :: k /;"	L	function:length_energy_dist	file:
k	ace.F90	/^    integer :: k /;"	L	subroutine:read_thermal_data	file:
k	ace.F90	/^    integer :: k /;"	L	subroutine:read_unr_res	file:
k	ace.F90	/^    integer :: k /;"	L	subroutine:read_xs	file:
k	cmfd_data.F90	/^    integer :: k /;"	L	subroutine:compute_dhat	file:
k	cmfd_data.F90	/^    integer :: k /;"	L	subroutine:compute_dtilde	file:
k	cmfd_data.F90	/^    integer :: k /;"	L	subroutine:compute_effective_downscatter	file:
k	cmfd_data.F90	/^    integer :: k /;"	L	subroutine:compute_xs	file:
k	cmfd_data.F90	/^    integer :: k /;"	L	subroutine:fix_neutron_balance	file:
k	cmfd_data.F90	/^    integer :: k /;"	L	subroutine:neutron_balance	file:
k	cmfd_data.F90	/^    integer :: k /;"	L	subroutine:set_coremap	file:
k	cmfd_data.F90	/^    integer, intent(in) :: k /;"	L	function:get_reflector_albedo	file:
k	cmfd_execute.F90	/^    integer :: k /;"	L	subroutine:calc_fission_source	file:
k	cmfd_execute.F90	/^    integer, intent(in) :: k /;"	L	function:get_matrix_idx	file:
k	cmfd_loss_operator.F90	/^    integer :: k /;"	L	function:preallocate_loss_matrix	file:
k	cmfd_loss_operator.F90	/^    integer :: k /;"	L	subroutine:build_loss_matrix	file:
k	cmfd_loss_operator.F90	/^    integer, intent(in)  :: k /;"	L	subroutine:indices_to_matrix	file:
k	cmfd_loss_operator.F90	/^    integer, intent(out) :: k /;"	L	subroutine:matrix_to_indices	file:
k	cmfd_prod_operator.F90	/^    integer :: k /;"	L	subroutine:build_prod_matrix	file:
k	cmfd_prod_operator.F90	/^    integer, intent(in)  :: k /;"	L	subroutine:indices_to_matrix	file:
k	cmfd_prod_operator.F90	/^    integer, intent(out) :: k /;"	L	subroutine:matrix_to_indices	file:
k	doppler.F90	/^    integer              :: i, k /;"	L	subroutine:broaden	file:
k	eigenvalue.F90	/^    integer :: i, j, k /;"	L	subroutine:calculate_combined_keff	file:
k	eigenvalue.F90	/^    integer :: i, j, k /;"	L	subroutine:shannon_entropy	file:
k	geometry.F90	/^    real(8) :: a,b,c,k /;"	L	subroutine:distance_to_boundary	file:
k	hdf5_summary.F90	/^    integer          :: i, j, k,/;"	L	subroutine:hdf5_write_geometry	file:
k	initialize.F90	/^    integer :: k /;"	L	subroutine:adjust_indices	file:
k	input_xml.F90	/^    integer :: i, j, k,/;"	L	subroutine:read_geometry_xml	file:
k	input_xml.F90	/^    integer :: k /;"	L	subroutine:read_tallies_xml	file:
k	math.F90	/^    real(8)            :: k /;"	L	function:t_percentile	file:
k	output.F90	/^    integer :: k /;"	L	subroutine:write_surface_current	file:
k	output.F90	/^    integer :: k /;"	L	subroutine:write_tallies	file:
k	physics.F90	/^    integer        :: k /;"	L	function:sample_angle	file:
k	physics.F90	/^    integer :: k /;"	L	subroutine:sab_scatter	file:
k	physics.F90	/^    integer :: k /;"	L	subroutine:sample_energy	file:
k	tally.F90	/^    integer :: k /;"	L	subroutine:score_analog_tally	file:
k	tally.F90	/^    integer :: k /;"	L	subroutine:score_fission_eout	file:
k	tally.F90	/^    integer :: k /;"	L	subroutine:score_surface_current	file:
k	tally.F90	/^    integer :: k /;"	L	subroutine:score_tl_on_mesh	file:
k	tally.F90	/^    integer :: k /;"	L	subroutine:score_tracklength_tally	file:
k	tally_initialize.F90	/^    integer :: k /;"	L	subroutine:setup_tally_maps	file:
kT	ace.F90	/^    real(8)       :: kT /;"	L	subroutine:read_ace_table	file:
kT	ace_header.F90	/^    real(8)       :: kT /;"	k	type:Nuclide
kT	ace_header.F90	/^    real(8)       :: kT /;"	k	type:SAlphaBeta
kT	ace_header.F90	/^    real(8)       :: kT /;"	k	type:XsListing
kT	physics.F90	/^    real(8) :: kT /;"	L	subroutine:sample_target_velocity	file:
k_abs	tally.F90	/^    real(8) :: k_abs /;"	L	subroutine:synchronize_tallies	file:
k_cmfd	cmfd_header.F90	/^    real(8), allocatable :: k_cmfd(/;"	k	type:cmfd_type
k_col	tally.F90	/^    real(8) :: k_col /;"	L	subroutine:synchronize_tallies	file:
k_n	cmfd_power_solver.F90	/^  real(8) :: k_n /;"	v	module:cmfd_power_solver
k_o	cmfd_power_solver.F90	/^  real(8) :: k_o /;"	v	module:cmfd_power_solver
k_sum	eigenvalue.F90	/^  real(8) :: k_sum(/;"	v	module:eigenvalue
k_tol	cmfd_power_solver.F90	/^    real(8), intent(in), optional :: k_tol /;"	L	subroutine:cmfd_power_execute	file:
k_tra	tally.F90	/^    real(8) :: k_tra /;"	L	subroutine:synchronize_tallies	file:
kappa_fission	ace_header.F90	/^    real(8) :: kappa_fission /;"	k	type:MaterialMacroXS
kappa_fission	ace_header.F90	/^    real(8) :: kappa_fission /;"	k	type:NuclideMicroXS
keff	cmfd_header.F90	/^    real(8) :: keff /;"	k	type:cmfd_type
keff_generation	eigenvalue.F90	/^  real(8) :: keff_generation /;"	v	module:eigenvalue
kerr	cmfd_power_solver.F90	/^  real(8) :: kerr /;"	v	module:cmfd_power_solver
key	dict_header.F90	/^    character(*), intent(in) :: key$/;"	L	function:dict_hash_key_ci	file:
key	dict_header.F90	/^    character(len=DICT_KEY_LENGTH) :: key$/;"	k	type:ElemKeyValueCI
key	dict_header.F90	/^    integer :: key$/;"	k	type:ElemKeyValueII
key	dict_header.F90	/^    integer, intent(in) :: key$/;"	L	function:dict_hash_key_ii	file:
kms_compute_distances	clustering_kmeans.F90	/^  subroutine kms_compute_distances(/;"	s	module:clustering_kmeans
kms_uniform_clust_cen	clustering_kmeans.F90	/^  subroutine kms_uniform_clust_cen(/;"	s	module:clustering_kmeans
kms_update_clust_cen	clustering_kmeans.F90	/^  subroutine kms_update_clust_cen(/;"	s	module:clustering_kmeans
ksp_	solver_interface.F90	/^    type(ksp)  :: ksp_ /;"	k	type:JFNKSolver
ksp_	solver_interface.F90	/^    type(ksp) :: ksp_ /;"	k	type:GMRESSolver
ksptype	cmfd_slepc_solver.F90	/^    character(LEN=20) :: epstype, sttype, ksptype,/;"	L	subroutine:init_solver	file:
ktol	cmfd_power_solver.F90	/^  real(8) :: ktol /;"	v	module:cmfd_power_solver
kv	eigenvalue.F90	/^    real(8) :: kv(/;"	L	subroutine:calculate_combined_keff	file:
l	cmfd_data.F90	/^    integer :: l /;"	L	subroutine:compute_dhat	file:
l	cmfd_data.F90	/^    integer :: l /;"	L	subroutine:compute_dtilde	file:
l	cmfd_data.F90	/^    integer :: l /;"	L	subroutine:fix_neutron_balance	file:
l	cmfd_data.F90	/^    integer :: l /;"	L	subroutine:neutron_balance	file:
l	cmfd_data.F90	/^    integer, intent(in) :: l /;"	L	function:get_reflector_albedo	file:
l	cmfd_loss_operator.F90	/^    integer :: l /;"	L	function:preallocate_loss_matrix	file:
l	cmfd_loss_operator.F90	/^    integer :: l /;"	L	subroutine:build_loss_matrix	file:
l	eigenvalue.F90	/^    integer :: l /;"	L	subroutine:calculate_combined_keff	file:
l	input_xml.F90	/^    integer :: l /;"	L	subroutine:read_tallies_xml	file:
l	output.F90	/^    integer :: l /;"	L	subroutine:write_surface_current	file:
l	output.F90	/^    integer :: l /;"	L	subroutine:write_tallies	file:
l	physics.F90	/^    integer :: l /;"	L	subroutine:sample_energy	file:
l	tally.F90	/^    integer :: l /;"	L	subroutine:score_analog_tally	file:
l	tally.F90	/^    integer :: l /;"	L	subroutine:score_tracklength_tally	file:
label	output.F90	/^    character(30)              :: label /;"	L	function:get_label	file:
label	tally_header.F90	/^    character(len=52) :: label /;"	k	type:TallyObject
lambda	cmfd_jfnk_solver.F90	/^    real(8)           :: lambda$/;"	L	subroutine:compute_nonlinear_residual	file:
lambda	cmfd_jfnk_solver.F90	/^    real(8)      :: lambda /;"	L	subroutine:build_jacobian_matrix	file:
last	matrix_header.F90	/^    integer :: last /;"	L	subroutine:sort_csr	file:
last_E	ace_header.F90	/^    real(8) :: last_E /;"	k	type:NuclideMicroXS
last_E	particle_header.F90	/^    real(8)    :: last_E /;"	k	type:Particle
last_cell	geometry.F90	/^    integer,        intent(in)    :: last_cell /;"	L	subroutine:cross_surface	file:
last_cell	tracking.F90	/^    integer :: last_cell /;"	L	subroutine:transport	file:
last_elem	list_header.F90	/^    type(ListElemChar), pointer :: last_elem /;"	k	type:ListChar
last_elem	list_header.F90	/^    type(ListElemInt), pointer :: last_elem /;"	k	type:ListInt
last_elem	list_header.F90	/^    type(ListElemReal), pointer :: last_elem /;"	k	type:ListReal
last_flag	initialize.F90	/^    integer :: last_flag /;"	L	subroutine:read_command_line	file:
last_index	list_header.F90	/^    integer :: last_index /;"	k	type:ListChar
last_index	list_header.F90	/^    integer :: last_index /;"	k	type:ListInt
last_index	list_header.F90	/^    integer :: last_index /;"	k	type:ListReal
last_index_sab	ace_header.F90	/^    integer :: last_index_sab /;"	k	type:NuclideMicroXS
last_material	particle_header.F90	/^    integer    :: last_material /;"	k	type:Particle
last_space	output.F90	/^    integer :: last_space /;"	L	subroutine:write_message	file:
last_uvw	particle_header.F90	/^    real(8)    :: last_uvw(/;"	k	type:Particle
last_wgt	particle_header.F90	/^    real(8)    :: last_wgt /;"	k	type:Particle
last_wgt	tally.F90	/^    real(8) :: last_wgt /;"	L	subroutine:score_analog_tally	file:
last_xyz	particle_header.F90	/^    real(8)    :: last_xyz(/;"	k	type:Particle
lat	geometry.F90	/^    type(Lattice), pointer, save :: lat /;"	L	subroutine:cross_lattice	file:
lat	output.F90	/^    type(Lattice), pointer :: lat$/;"	L	subroutine:print_lattice	file:
lattice	particle_header.F90	/^    integer :: lattice /;"	k	type:LocalCoord
lattice_crossed	geometry.F90	/^    integer,        intent(in)    :: lattice_crossed$/;"	L	subroutine:cross_lattice	file:
lattice_crossed	geometry.F90	/^    integer,        intent(out)   :: lattice_crossed$/;"	L	subroutine:distance_to_boundary	file:
lattice_crossed	tracking.F90	/^    integer :: lattice_crossed /;"	L	subroutine:transport	file:
lattice_dict	global.F90	/^  type(DictIntInt) :: lattice_dict$/;"	v	module:global
lattice_edge	geometry.F90	/^    logical :: lattice_edge /;"	L	subroutine:find_cell	file:
lattice_universes	hdf5_summary.F90	/^    integer, allocatable :: lattice_universes(/;"	L	subroutine:hdf5_write_geometry	file:
lattice_x	particle_header.F90	/^    integer :: lattice_x /;"	k	type:LocalCoord
lattice_y	particle_header.F90	/^    integer :: lattice_y /;"	k	type:LocalCoord
lattice_z	particle_header.F90	/^    integer :: lattice_z /;"	k	type:LocalCoord
lattices	global.F90	/^  type(Lattice),   allocatable, target :: lattices(/;"	v	module:global
law	ace.F90	/^    integer, intent(in) :: law /;"	L	function:length_energy_dist	file:
law	ace_header.F90	/^    integer    :: law /;"	k	type:DistEnergy
law	output.F90	/^    character(11) :: law /;"	L	subroutine:print_nuclide	file:
law	physics.F90	/^    integer :: law /;"	L	function:sample_fission_energy	file:
law	physics.F90	/^    integer :: law /;"	L	subroutine:inelastic_scatter	file:
lc	ace.F90	/^    integer :: lc /;"	L	subroutine:get_energy_dist	file:
lc	ace.F90	/^    integer :: lc /;"	L	subroutine:read_nu_data	file:
lc	ace.F90	/^    integer :: lc /;"	L	subroutine:read_thermal_data	file:
lc	ace.F90	/^    integer :: lc /;"	L	subroutine:read_unr_res	file:
lc	ace.F90	/^    integer, intent(in) :: lc /;"	L	function:length_energy_dist	file:
lc	physics.F90	/^    integer        :: lc /;"	L	function:sample_angle	file:
lc	physics.F90	/^    integer :: lc /;"	L	function:sample_fission_energy	file:
lc	physics.F90	/^    integer :: lc /;"	L	subroutine:sample_energy	file:
leak1	cmfd_data.F90	/^    real(8) :: leak1 /;"	L	subroutine:fix_neutron_balance	file:
leak2	cmfd_data.F90	/^    real(8) :: leak2 /;"	L	subroutine:fix_neutron_balance	file:
leakage	cmfd_data.F90	/^    real(8) :: leakage /;"	L	subroutine:neutron_balance	file:
left	matrix_header.F90	/^    integer :: left /;"	L	subroutine:split	file:
len	hdf5_interface.F90	/^    integer,        intent(in) :: len /;"	L	subroutine:hdf5_write_integer_1Darray	file:
len1	output.F90	/^    integer :: len1 /;"	L	subroutine:write_surface_current	file:
len2	output.F90	/^    integer :: len2 /;"	L	subroutine:write_surface_current	file:
length	ace.F90	/^    integer             :: length /;"	L	function:length_energy_dist	file:
length	ace.F90	/^    integer       :: length /;"	L	subroutine:read_ace_table	file:
length	ace.F90	/^    integer :: length /;"	L	subroutine:get_energy_dist	file:
length	ace.F90	/^    integer :: length /;"	L	subroutine:read_angular_dist	file:
length	ace.F90	/^    integer :: length /;"	L	subroutine:read_nu_data	file:
length	error.F90	/^    integer :: length /;"	L	subroutine:fatal_error	file:
length	error.F90	/^    integer :: length /;"	L	subroutine:warning	file:
length	hdf5_interface.F90	/^    integer,         intent(in)    :: length /;"	L	subroutine:hdf5_read_double_1Darray_parallel	file:
length	hdf5_interface.F90	/^    integer,         intent(in)    :: length /;"	L	subroutine:hdf5_read_integer_1Darray_parallel	file:
length	hdf5_interface.F90	/^    integer,        intent(in)    :: length /;"	L	subroutine:hdf5_read_double_1Darray	file:
length	hdf5_interface.F90	/^    integer,        intent(in)    :: length /;"	L	subroutine:hdf5_read_integer_1Darray	file:
length	hdf5_interface.F90	/^    integer,        intent(in)    :: length /;"	L	subroutine:hdf5_read_string	file:
length	hdf5_interface.F90	/^    integer,        intent(in)    :: length /;"	L	subroutine:hdf5_read_string_parallel	file:
length	hdf5_interface.F90	/^    integer,        intent(in)    :: length /;"	L	subroutine:hdf5_write_string_parallel	file:
length	hdf5_interface.F90	/^    integer,        intent(in)    :: length$/;"	L	subroutine:hdf5_write_string	file:
length	hdf5_interface.F90	/^    integer,        intent(in)    :: length(/;"	L	subroutine:hdf5_read_double_2Darray	file:
length	hdf5_interface.F90	/^    integer,        intent(in)    :: length(/;"	L	subroutine:hdf5_read_double_2Darray_parallel	file:
length	hdf5_interface.F90	/^    integer,        intent(in)    :: length(/;"	L	subroutine:hdf5_read_double_3Darray	file:
length	hdf5_interface.F90	/^    integer,        intent(in)    :: length(/;"	L	subroutine:hdf5_read_double_3Darray_parallel	file:
length	hdf5_interface.F90	/^    integer,        intent(in)    :: length(/;"	L	subroutine:hdf5_read_double_4Darray	file:
length	hdf5_interface.F90	/^    integer,        intent(in)    :: length(/;"	L	subroutine:hdf5_read_double_4Darray_parallel	file:
length	hdf5_interface.F90	/^    integer,        intent(in)    :: length(/;"	L	subroutine:hdf5_read_integer_2Darray	file:
length	hdf5_interface.F90	/^    integer,        intent(in)    :: length(/;"	L	subroutine:hdf5_read_integer_2Darray_parallel	file:
length	hdf5_interface.F90	/^    integer,        intent(in)    :: length(/;"	L	subroutine:hdf5_read_integer_3Darray	file:
length	hdf5_interface.F90	/^    integer,        intent(in)    :: length(/;"	L	subroutine:hdf5_read_integer_3Darray_parallel	file:
length	hdf5_interface.F90	/^    integer,        intent(in)    :: length(/;"	L	subroutine:hdf5_read_integer_4Darray	file:
length	hdf5_interface.F90	/^    integer,        intent(in)    :: length(/;"	L	subroutine:hdf5_read_integer_4Darray_parallel	file:
length	hdf5_interface.F90	/^    integer,        intent(in)    :: length(/;"	L	subroutine:hdf5_write_double_4Darray	file:
length	hdf5_interface.F90	/^    integer,        intent(in)    :: length(/;"	L	subroutine:hdf5_write_double_4Darray_parallel	file:
length	hdf5_interface.F90	/^    integer,        intent(in)    :: length(/;"	L	subroutine:hdf5_write_integer_4Darray	file:
length	hdf5_interface.F90	/^    integer,        intent(in)    :: length(/;"	L	subroutine:hdf5_write_integer_4Darray_parallel	file:
length	hdf5_interface.F90	/^    integer,        intent(in) :: length /;"	L	subroutine:hdf5_write_double_1Darray	file:
length	hdf5_interface.F90	/^    integer,        intent(in) :: length /;"	L	subroutine:hdf5_write_double_1Darray_parallel	file:
length	hdf5_interface.F90	/^    integer,        intent(in) :: length /;"	L	subroutine:hdf5_write_integer_1Darray_parallel	file:
length	hdf5_interface.F90	/^    integer,        intent(in) :: length(/;"	L	subroutine:hdf5_write_double_2Darray	file:
length	hdf5_interface.F90	/^    integer,        intent(in) :: length(/;"	L	subroutine:hdf5_write_double_2Darray_parallel	file:
length	hdf5_interface.F90	/^    integer,        intent(in) :: length(/;"	L	subroutine:hdf5_write_double_3Darray	file:
length	hdf5_interface.F90	/^    integer,        intent(in) :: length(/;"	L	subroutine:hdf5_write_double_3Darray_parallel	file:
length	hdf5_interface.F90	/^    integer,        intent(in) :: length(/;"	L	subroutine:hdf5_write_integer_2Darray	file:
length	hdf5_interface.F90	/^    integer,        intent(in) :: length(/;"	L	subroutine:hdf5_write_integer_2Darray_parallel	file:
length	hdf5_interface.F90	/^    integer,        intent(in) :: length(/;"	L	subroutine:hdf5_write_integer_3Darray	file:
length	hdf5_interface.F90	/^    integer,        intent(in) :: length(/;"	L	subroutine:hdf5_write_integer_3Darray_parallel	file:
length	hdf5_summary.F90	/^    integer          :: length(/;"	L	subroutine:hdf5_write_geometry	file:
length	mpiio_interface.F90	/^    integer,      intent(in)    :: length /;"	L	subroutine:mpi_read_string	file:
length	mpiio_interface.F90	/^    integer,      intent(in) :: length /;"	L	subroutine:mpi_write_string	file:
length	mpiio_interface.F90	/^    integer, intent(in)    :: length /;"	L	subroutine:mpi_read_double_1Darray	file:
length	mpiio_interface.F90	/^    integer, intent(in)    :: length /;"	L	subroutine:mpi_read_integer_1Darray	file:
length	mpiio_interface.F90	/^    integer, intent(in)    :: length(/;"	L	subroutine:mpi_read_double_2Darray	file:
length	mpiio_interface.F90	/^    integer, intent(in)    :: length(/;"	L	subroutine:mpi_read_double_3Darray	file:
length	mpiio_interface.F90	/^    integer, intent(in)    :: length(/;"	L	subroutine:mpi_read_double_4Darray	file:
length	mpiio_interface.F90	/^    integer, intent(in)    :: length(/;"	L	subroutine:mpi_read_integer_2Darray	file:
length	mpiio_interface.F90	/^    integer, intent(in)    :: length(/;"	L	subroutine:mpi_read_integer_3Darray	file:
length	mpiio_interface.F90	/^    integer, intent(in)    :: length(/;"	L	subroutine:mpi_read_integer_4Darray	file:
length	mpiio_interface.F90	/^    integer, intent(in) :: length /;"	L	subroutine:mpi_write_double_1Darray	file:
length	mpiio_interface.F90	/^    integer, intent(in) :: length /;"	L	subroutine:mpi_write_integer_1Darray	file:
length	mpiio_interface.F90	/^    integer, intent(in) :: length(/;"	L	subroutine:mpi_write_double_2Darray	file:
length	mpiio_interface.F90	/^    integer, intent(in) :: length(/;"	L	subroutine:mpi_write_double_3Darray	file:
length	mpiio_interface.F90	/^    integer, intent(in) :: length(/;"	L	subroutine:mpi_write_double_4Darray	file:
length	mpiio_interface.F90	/^    integer, intent(in) :: length(/;"	L	subroutine:mpi_write_integer_2Darray	file:
length	mpiio_interface.F90	/^    integer, intent(in) :: length(/;"	L	subroutine:mpi_write_integer_3Darray	file:
length	mpiio_interface.F90	/^    integer, intent(in) :: length(/;"	L	subroutine:mpi_write_integer_4Darray	file:
length	output.F90	/^    integer :: length /;"	L	subroutine:write_message	file:
length	output_interface.F90	/^    integer,        intent(in)           :: length /;"	L	subroutine:read_double_1Darray	file:
length	output_interface.F90	/^    integer,        intent(in)           :: length /;"	L	subroutine:read_integer_1Darray	file:
length	output_interface.F90	/^    integer,      intent(in)           :: length /;"	L	subroutine:write_double_1Darray	file:
length	output_interface.F90	/^    integer,      intent(in)           :: length /;"	L	subroutine:write_integer_1Darray	file:
length	output_interface.F90	/^    integer,      intent(in)           :: length(/;"	L	subroutine:read_double_2Darray	file:
length	output_interface.F90	/^    integer,      intent(in)           :: length(/;"	L	subroutine:read_double_3Darray	file:
length	output_interface.F90	/^    integer,      intent(in)           :: length(/;"	L	subroutine:read_double_4Darray	file:
length	output_interface.F90	/^    integer,      intent(in)           :: length(/;"	L	subroutine:read_integer_2Darray	file:
length	output_interface.F90	/^    integer,      intent(in)           :: length(/;"	L	subroutine:read_integer_3Darray	file:
length	output_interface.F90	/^    integer,      intent(in)           :: length(/;"	L	subroutine:read_integer_4Darray	file:
length	output_interface.F90	/^    integer,      intent(in)           :: length(/;"	L	subroutine:write_double_2Darray	file:
length	output_interface.F90	/^    integer,      intent(in)           :: length(/;"	L	subroutine:write_double_3Darray	file:
length	output_interface.F90	/^    integer,      intent(in)           :: length(/;"	L	subroutine:write_double_4Darray	file:
length	output_interface.F90	/^    integer,      intent(in)           :: length(/;"	L	subroutine:write_integer_2Darray	file:
length	output_interface.F90	/^    integer,      intent(in)           :: length(/;"	L	subroutine:write_integer_3Darray	file:
length	output_interface.F90	/^    integer,      intent(in)           :: length(/;"	L	subroutine:write_integer_4Darray	file:
length	state_point.F90	/^    integer                 :: length(/;"	L	subroutine:load_state_point	file:
length	track_output.F90	/^    integer                  :: length(/;"	L	subroutine:finalize_particle_track	file:
length_energy_dist	ace.F90	/^  function length_energy_dist(/;"	f	module:ace
length_interp_data	ace.F90	/^    integer :: length_interp_data /;"	L	subroutine:get_energy_dist	file:
level	geometry_header.F90	/^     integer :: level /;"	k	type:Lattice
level	output.F90	/^    integer, optional :: level /;"	L	subroutine:header	file:
level	output.F90	/^    integer, optional :: level /;"	L	subroutine:write_message	file:
lid	ace.F90	/^    integer, intent(in) :: lid /;"	L	function:length_energy_dist	file:
lid	initialize.F90	/^    integer :: mid, lid /;"	L	subroutine:adjust_indices	file:
line	output.F90	/^    character(MAX_LINE_LEN) :: line$/;"	L	subroutine:header	file:
line_wrap	error.F90	/^    integer :: line_wrap /;"	L	subroutine:fatal_error	file:
line_wrap	error.F90	/^    integer :: line_wrap /;"	L	subroutine:warning	file:
line_wrap	output.F90	/^    integer :: line_wrap /;"	L	subroutine:write_message	file:
list	dict_header.F90	/^    type(ElemKeyValueCI), pointer :: list /;"	k	type:HashListCI
list	dict_header.F90	/^    type(ElemKeyValueII), pointer :: list /;"	k	type:HashListII
list	energy_grid.F90	/^    type(ListReal), pointer :: list /;"	L	subroutine:unionized_grid	file:
list	energy_grid.F90	/^    type(ListReal), pointer :: list$/;"	L	subroutine:add_grid_points	file:
list_append_char	list_header.F90	/^  subroutine list_append_char(/;"	s	module:list_header
list_append_int	list_header.F90	/^  subroutine list_append_int(/;"	s	module:list_header
list_append_real	list_header.F90	/^  subroutine list_append_real(/;"	s	module:list_header
list_clear_char	list_header.F90	/^  subroutine list_clear_char(/;"	s	module:list_header
list_clear_int	list_header.F90	/^  subroutine list_clear_int(/;"	s	module:list_header
list_clear_real	list_header.F90	/^  subroutine list_clear_real(/;"	s	module:list_header
list_contains_char	list_header.F90	/^  function list_contains_char(/;"	f	module:list_header
list_contains_int	list_header.F90	/^  function list_contains_int(/;"	f	module:list_header
list_contains_real	list_header.F90	/^  function list_contains_real(/;"	f	module:list_header
list_density	input_xml.F90	/^    type(ListReal) :: list_density /;"	L	subroutine:read_materials_xml	file:
list_density	input_xml.F90	/^    type(ListReal), intent(inout) :: list_density$/;"	L	subroutine:expand_natural_element	file:
list_get_item_char	list_header.F90	/^  function list_get_item_char(/;"	f	module:list_header
list_get_item_int	list_header.F90	/^  function list_get_item_int(/;"	f	module:list_header
list_get_item_real	list_header.F90	/^  function list_get_item_real(/;"	f	module:list_header
list_header	list_header.F90	/^module list_header$/;"	m
list_index_char	list_header.F90	/^  function list_index_char(/;"	f	module:list_header
list_index_int	list_header.F90	/^  function list_index_int(/;"	f	module:list_header
list_index_real	list_header.F90	/^  function list_index_real(/;"	f	module:list_header
list_insert_char	list_header.F90	/^  subroutine list_insert_char(/;"	s	module:list_header
list_insert_int	list_header.F90	/^  subroutine list_insert_int(/;"	s	module:list_header
list_insert_real	list_header.F90	/^  subroutine list_insert_real(/;"	s	module:list_header
list_names	input_xml.F90	/^    type(ListChar) :: list_names /;"	L	subroutine:read_materials_xml	file:
list_names	input_xml.F90	/^    type(ListChar), intent(inout) :: list_names$/;"	L	subroutine:expand_natural_element	file:
list_remove_char	list_header.F90	/^  subroutine list_remove_char(/;"	s	module:list_header
list_remove_int	list_header.F90	/^  subroutine list_remove_int(/;"	s	module:list_header
list_remove_real	list_header.F90	/^  subroutine list_remove_real(/;"	s	module:list_header
list_size_char	list_header.F90	/^  function list_size_char(/;"	f	module:list_header
list_size_int	list_header.F90	/^  function list_size_int(/;"	f	module:list_header
list_size_real	list_header.F90	/^  function list_size_real(/;"	f	module:list_header
listing	ace_header.F90	/^    integer       :: listing /;"	k	type:Nuclide
listing	input_xml.F90	/^    type(XsListing), pointer :: listing /;"	L	subroutine:read_cross_sections_xml	file:
ll	plot.F90	/^    real(8) :: ll(/;"	L	subroutine:create_3d_dump	file:
load_state_point	state_point.F90	/^  subroutine load_state_point(/;"	s	module:state_point
loc	clustering.F90	/^    integer :: loc /;"	L	function:find_grid_index	file:
loc_0	interpolation.F90	/^    integer :: loc_0 /;"	L	function:interpolate_tab1_array	file:
loc_breakpoints	interpolation.F90	/^    integer :: loc_breakpoints /;"	L	function:interpolate_tab1_array	file:
loc_interp	interpolation.F90	/^    integer :: loc_interp /;"	L	function:interpolate_tab1_array	file:
loc_law	ace.F90	/^    integer, intent(in)       :: loc_law /;"	L	subroutine:get_energy_dist	file:
loc_start	interpolation.F90	/^    integer, intent(in), optional :: loc_start /;"	L	function:interpolate_tab1_array	file:
loc_x	interpolation.F90	/^    integer :: loc_x /;"	L	function:interpolate_tab1_array	file:
loc_y	interpolation.F90	/^    integer :: loc_y /;"	L	function:interpolate_tab1_array	file:
location	ace.F90	/^    integer       :: location /;"	L	subroutine:read_ace_table	file:
location	ace_header.F90	/^    integer       :: location /;"	k	type:XsListing
location	ace_header.F90	/^    integer, allocatable :: location(/;"	k	type:DistAngle
long_type	hdf5_interface.F90	/^    integer(HID_T),     intent(in)  :: long_type /;"	L	subroutine:hdf5_read_long	file:
long_type	hdf5_interface.F90	/^    integer(HID_T),     intent(in)  :: long_type /;"	L	subroutine:hdf5_read_long_parallel	file:
long_type	hdf5_interface.F90	/^    integer(HID_T),     intent(in) :: long_type /;"	L	subroutine:hdf5_write_long	file:
long_type	hdf5_interface.F90	/^    integer(HID_T),     intent(in) :: long_type /;"	L	subroutine:hdf5_write_long_parallel	file:
loss	cmfd_jfnk_solver.F90	/^  type(Matrix)     :: loss /;"	v	module:cmfd_jfnk_solver
loss	cmfd_power_solver.F90	/^  type(Matrix) :: loss /;"	v	module:cmfd_power_solver
loss	cmfd_slepc_solver.F90	/^  type(loss_/;"	v	module:cmfd_slepc_solver
loss_matrix	cmfd_loss_operator.F90	/^    type(Matrix), intent(inout)   :: loss_matrix /;"	L	subroutine:build_loss_matrix	file:
loss_matrix	cmfd_loss_operator.F90	/^    type(Matrix), intent(inout) :: loss_matrix /;"	L	subroutine:init_loss_matrix	file:
low	matrix_header.F90	/^    integer :: low /;"	L	subroutine:split	file:
lower_bound	initialize.F90	/^    integer(MPI_ADDRESS_KIND) :: lower_bound /;"	L	subroutine:initialize_mpi	file:
lower_case	string.F90	/^  elemental subroutine lower_case(/;"	s	module:string
lower_left	geometry_header.F90	/^     real(8), allocatable :: lower_left(/;"	k	type:Lattice
lower_left	mesh_header.F90	/^    real(8), allocatable :: lower_left(/;"	k	type:StructuredMesh
ls	solver_interface.F90	/^    integer    :: ls /;"	k	type:JFNKSolver
m	ace.F90	/^    integer :: m /;"	L	subroutine:read_xs	file:
m	cmfd_execute.F90	/^    type(StructuredMesh), pointer :: m /;"	L	subroutine:cmfd_reweight	file:
m	eigenvalue.F90	/^    type(StructuredMesh), pointer :: m /;"	L	subroutine:shannon_entropy	file:
m	hdf5_summary.F90	/^    integer          :: i, j, k, m$/;"	L	subroutine:hdf5_write_geometry	file:
m	hdf5_summary.F90	/^    type(Material), pointer :: m /;"	L	subroutine:hdf5_write_materials	file:
m	hdf5_summary.F90	/^    type(StructuredMesh), pointer :: m /;"	L	subroutine:hdf5_write_tallies	file:
m	initialize.F90	/^    integer :: m /;"	L	subroutine:adjust_indices	file:
m	input_xml.F90	/^    integer :: i, j, k, m$/;"	L	subroutine:read_geometry_xml	file:
m	mesh.F90	/^    type(StructuredMesh), pointer :: m /;"	L	subroutine:count_bank_sites	file:
m	mesh.F90	/^    type(StructuredMesh), pointer :: m /;"	L	subroutine:get_mesh_bin	file:
m	mesh.F90	/^    type(StructuredMesh), pointer :: m$/;"	L	function:mesh_indices_to_bin	file:
m	mesh.F90	/^    type(StructuredMesh), pointer :: m$/;"	L	function:mesh_intersects_2d	file:
m	mesh.F90	/^    type(StructuredMesh), pointer :: m$/;"	L	function:mesh_intersects_3d	file:
m	mesh.F90	/^    type(StructuredMesh), pointer :: m$/;"	L	subroutine:bin_to_mesh_indices	file:
m	mesh.F90	/^    type(StructuredMesh), pointer :: m$/;"	L	subroutine:get_mesh_indices	file:
m	output.F90	/^    integer :: m /;"	L	subroutine:header	file:
m	output.F90	/^    type(Material),    pointer :: m /;"	L	subroutine:write_summary	file:
m	output.F90	/^    type(StructuredMesh), pointer :: m /;"	L	function:get_label	file:
m	output.F90	/^    type(StructuredMesh), pointer :: m /;"	L	subroutine:write_surface_current	file:
m	state_point.F90	/^    integer :: m /;"	L	subroutine:write_tally_results_nr	file:
m	tally.F90	/^    integer :: m /;"	L	subroutine:reduce_tally_results	file:
m	tally.F90	/^    integer :: m /;"	L	subroutine:score_all_nuclides	file:
m	tally.F90	/^    integer :: m /;"	L	subroutine:score_tracklength_tally	file:
macro_scatt	tally.F90	/^    real(8) :: macro_scatt /;"	L	subroutine:score_analog_tally	file:
macro_total	tally.F90	/^    real(8) :: macro_total /;"	L	subroutine:score_analog_tally	file:
main	main.F90	/^program main$/;"	p
mat	ace.F90	/^    character(10) :: mat /;"	L	subroutine:read_ace_table	file:
mat	ace.F90	/^    type(Material),   pointer :: mat /;"	L	subroutine:read_xs	file:
mat	cross_section.F90	/^    type(Material), pointer, save :: mat /;"	L	subroutine:calculate_xs	file:
mat	initialize.F90	/^    type(Material), pointer :: mat /;"	L	subroutine:normalize_ao	file:
mat	input_xml.F90	/^    type(Material),    pointer :: mat /;"	L	subroutine:read_materials_xml	file:
mat	output.F90	/^    type(Material), pointer :: mat$/;"	L	subroutine:print_material	file:
mat	physics.F90	/^    type(Material), pointer, save :: mat /;"	L	function:sample_nuclide	file:
mat_dim	cmfd_header.F90	/^    integer :: mat_dim /;"	k	type:cmfd_type
matching_bins	global.F90	/^  integer, allocatable :: matching_bins(/;"	v	module:global
material	geometry_header.F90	/^     integer :: material /;"	k	type:Cell
material	particle_header.F90	/^    integer    :: material /;"	k	type:Particle
material_dict	global.F90	/^  type(DictIntInt) :: material_dict$/;"	v	module:global
material_header	material_header.F90	/^module material_header$/;"	m
material_xs	global.F90	/^  type(MaterialMacroXS)             :: material_xs /;"	v	module:global
materials	global.F90	/^  type(Material),  allocatable, target :: materials(/;"	v	module:global
math	math.F90	/^module math$/;"	m
matidx	cmfd_execute.F90	/^    integer :: matidx /;"	L	function:get_matrix_idx	file:
matidx	cmfd_loss_operator.F90	/^    integer, intent(out) :: matidx /;"	L	subroutine:indices_to_matrix	file:
matidx	cmfd_prod_operator.F90	/^    integer, intent(out) :: matidx /;"	L	subroutine:indices_to_matrix	file:
matrix_add_value	matrix_header.F90	/^  subroutine matrix_add_value(/;"	s	module:matrix_header
matrix_assemble	matrix_header.F90	/^  subroutine matrix_assemble(/;"	s	module:matrix_header
matrix_create	matrix_header.F90	/^  subroutine matrix_create(/;"	s	module:matrix_header
matrix_destroy	matrix_header.F90	/^  subroutine matrix_destroy(/;"	s	module:matrix_header
matrix_get_col	matrix_header.F90	/^  function matrix_get_col(/;"	f	module:matrix_header
matrix_get_row	matrix_header.F90	/^  function matrix_get_row(/;"	f	module:matrix_header
matrix_header	matrix_header.F90	/^module matrix_header$/;"	m
matrix_new_row	matrix_header.F90	/^  subroutine matrix_new_row(/;"	s	module:matrix_header
matrix_setup_petsc	matrix_header.F90	/^  subroutine matrix_setup_petsc(/;"	s	module:matrix_header
matrix_to_indices	cmfd_loss_operator.F90	/^  subroutine matrix_to_indices(/;"	s	module:cmfd_loss_operator
matrix_to_indices	cmfd_prod_operator.F90	/^  subroutine matrix_to_indices(/;"	s	module:cmfd_prod_operator
matrix_transpose	matrix_header.F90	/^  subroutine matrix_transpose(/;"	s	module:matrix_header
matrix_vector_multiply	matrix_header.F90	/^  subroutine matrix_vector_multiply(/;"	s	module:matrix_header
matrix_write_petsc_binary	matrix_header.F90	/^  subroutine matrix_write_petsc_binary(/;"	s	module:matrix_header
max_it	clustering_kmeans.F90	/^    integer, intent(in) :: max_it /;"	L	subroutine:perform_kms	file:
max_n_filters	tally_initialize.F90	/^    integer :: max_n_filters /;"	L	subroutine:setup_tally_arrays	file:
maxwell_spectrum	math.F90	/^  function maxwell_spectrum(/;"	f	module:math
memspace	hdf5_interface.F90	/^  integer(HID_T)   :: memspace /;"	v	module:hdf5_interface
mesh	mesh.F90	/^module mesh$/;"	m
mesh_dict	global.F90	/^  type(DictIntInt) :: mesh_dict$/;"	v	module:global
mesh_header	mesh_header.F90	/^module mesh_header$/;"	m
mesh_indices_to_bin	mesh.F90	/^  function mesh_indices_to_bin(/;"	f	module:mesh
mesh_intersects_2d	mesh.F90	/^  function mesh_intersects_2d(/;"	f	module:mesh
mesh_intersects_3d	mesh.F90	/^  function mesh_intersects_3d(/;"	f	module:mesh
meshes	global.F90	/^  type(StructuredMesh), allocatable, target :: meshes(/;"	v	module:global
metastable	ace_header.F90	/^    logical       :: metastable /;"	k	type:XsListing
micro_xs	global.F90	/^  type(NuclideMicroXS), allocatable :: micro_xs(/;"	v	module:global
mid	initialize.F90	/^    integer :: mid,/;"	L	subroutine:adjust_indices	file:
mid	input_xml.F90	/^    integer :: mid$/;"	L	subroutine:read_geometry_xml	file:
mid	matrix_header.F90	/^    integer :: mid /;"	L	subroutine:sort_csr	file:
mid	matrix_header.F90	/^    integer :: mid /;"	L	subroutine:split	file:
min_L2_dist	clustering_kmeans.F90	/^    real(8) :: L2_dist, min_L2_dist,/;"	L	subroutine:kms_compute_distances	file:
min_work	initialize.F90	/^    integer(8) :: min_work /;"	L	subroutine:calculate_work	file:
mode	hdf5_interface.F90	/^    character(*),  intent(in)      :: mode /;"	L	subroutine:hdf5_file_open	file:
mode	hdf5_interface.F90	/^    character(*),  intent(in)     :: mode /;"	L	subroutine:hdf5_file_open_parallel	file:
mode	mpiio_interface.F90	/^    character(*), intent(in)    :: mode /;"	L	subroutine:mpi_open_file	file:
mode	output_interface.F90	/^    character(*),      intent(in) :: mode /;"	L	subroutine:file_open	file:
moment_order	tally_header.F90	/^    integer, allocatable :: moment_order(/;"	k	type:TallyObject
mpi_close_file	mpiio_interface.F90	/^  subroutine mpi_close_file(/;"	s	module:mpiio_interface
mpi_create_file	mpiio_interface.F90	/^  subroutine mpi_create_file(/;"	s	module:mpiio_interface
mpi_open_file	mpiio_interface.F90	/^  subroutine mpi_open_file(/;"	s	module:mpiio_interface
mpi_read_data	mpiio_interface.F90	/^  interface mpi_read_data$/;"	i	module:mpiio_interface
mpi_read_double	mpiio_interface.F90	/^  subroutine mpi_read_double(/;"	s	module:mpiio_interface
mpi_read_double_1Darray	mpiio_interface.F90	/^  subroutine mpi_read_double_1Darray(/;"	s	module:mpiio_interface
mpi_read_double_2Darray	mpiio_interface.F90	/^  subroutine mpi_read_double_2Darray(/;"	s	module:mpiio_interface
mpi_read_double_3Darray	mpiio_interface.F90	/^  subroutine mpi_read_double_3Darray(/;"	s	module:mpiio_interface
mpi_read_double_4Darray	mpiio_interface.F90	/^  subroutine mpi_read_double_4Darray(/;"	s	module:mpiio_interface
mpi_read_integer	mpiio_interface.F90	/^  subroutine mpi_read_integer(/;"	s	module:mpiio_interface
mpi_read_integer_1Darray	mpiio_interface.F90	/^  subroutine mpi_read_integer_1Darray(/;"	s	module:mpiio_interface
mpi_read_integer_2Darray	mpiio_interface.F90	/^  subroutine mpi_read_integer_2Darray(/;"	s	module:mpiio_interface
mpi_read_integer_3Darray	mpiio_interface.F90	/^  subroutine mpi_read_integer_3Darray(/;"	s	module:mpiio_interface
mpi_read_integer_4Darray	mpiio_interface.F90	/^  subroutine mpi_read_integer_4Darray(/;"	s	module:mpiio_interface
mpi_read_long	mpiio_interface.F90	/^  subroutine mpi_read_long(/;"	s	module:mpiio_interface
mpi_read_string	mpiio_interface.F90	/^  subroutine mpi_read_string(/;"	s	module:mpiio_interface
mpi_write_data	mpiio_interface.F90	/^  interface mpi_write_data$/;"	i	module:mpiio_interface
mpi_write_double	mpiio_interface.F90	/^  subroutine mpi_write_double(/;"	s	module:mpiio_interface
mpi_write_double_1Darray	mpiio_interface.F90	/^  subroutine mpi_write_double_1Darray(/;"	s	module:mpiio_interface
mpi_write_double_2Darray	mpiio_interface.F90	/^  subroutine mpi_write_double_2Darray(/;"	s	module:mpiio_interface
mpi_write_double_3Darray	mpiio_interface.F90	/^  subroutine mpi_write_double_3Darray(/;"	s	module:mpiio_interface
mpi_write_double_4Darray	mpiio_interface.F90	/^  subroutine mpi_write_double_4Darray(/;"	s	module:mpiio_interface
mpi_write_integer	mpiio_interface.F90	/^  subroutine mpi_write_integer(/;"	s	module:mpiio_interface
mpi_write_integer_1Darray	mpiio_interface.F90	/^  subroutine mpi_write_integer_1Darray(/;"	s	module:mpiio_interface
mpi_write_integer_2Darray	mpiio_interface.F90	/^  subroutine mpi_write_integer_2Darray(/;"	s	module:mpiio_interface
mpi_write_integer_3Darray	mpiio_interface.F90	/^  subroutine mpi_write_integer_3Darray(/;"	s	module:mpiio_interface
mpi_write_integer_4Darray	mpiio_interface.F90	/^  subroutine mpi_write_integer_4Darray(/;"	s	module:mpiio_interface
mpi_write_long	mpiio_interface.F90	/^  subroutine mpi_write_long(/;"	s	module:mpiio_interface
mpi_write_string	mpiio_interface.F90	/^  subroutine mpi_write_string(/;"	s	module:mpiio_interface
mpiio_err	mpiio_interface.F90	/^  integer :: mpiio_err /;"	v	module:mpiio_interface
mpiio_interface	mpiio_interface.F90	/^module mpiio_interface$/;"	m
msg	output.F90	/^    character(*), intent(in) :: msg /;"	L	subroutine:header	file:
mu	ace_header.F90	/^    real(8), allocatable :: mu(/;"	k	type:DistEnergySab
mu	particle_header.F90	/^    real(8)    :: mu /;"	k	type:Particle
mu	physics.F90	/^    real(8)        :: mu /;"	L	function:sample_angle	file:
mu	physics.F90	/^    real(8) :: mu /;"	L	function:sample_fission_energy	file:
mu	physics.F90	/^    real(8) :: mu /;"	L	subroutine:create_fission_sites	file:
mu	physics.F90	/^    real(8) :: mu /;"	L	subroutine:sample_target_velocity	file:
mu	physics.F90	/^    real(8), intent(in) :: mu /;"	L	function:rotate_angle	file:
mu	physics.F90	/^    real(8), intent(out)    :: mu /;"	L	subroutine:inelastic_scatter	file:
mu	physics.F90	/^    real(8), intent(out)    :: mu /;"	L	subroutine:sab_scatter	file:
mu	source.F90	/^    real(8) :: mu /;"	L	subroutine:sample_external_source	file:
mu	tally.F90	/^    real(8) :: mu /;"	L	subroutine:score_analog_tally	file:
mu0	physics.F90	/^    real(8)        :: mu0 /;"	L	function:sample_angle	file:
mu1	physics.F90	/^    real(8)        :: mu1 /;"	L	function:sample_angle	file:
mu_cm	physics.F90	/^    real(8) :: mu_cm /;"	L	subroutine:elastic_scatter	file:
mu_i1jk	physics.F90	/^    real(8) :: mu_i1jk /;"	L	subroutine:sab_scatter	file:
mu_ijk	physics.F90	/^    real(8) :: mu_ijk /;"	L	subroutine:sab_scatter	file:
mu_k	physics.F90	/^    real(8) :: mu_k /;"	L	subroutine:sample_energy	file:
mu_k1	physics.F90	/^    real(8) :: mu_k1 /;"	L	subroutine:sample_energy	file:
mu_lab	physics.F90	/^    real(8), intent(out)    :: mu_lab$/;"	L	subroutine:elastic_scatter	file:
mu_out	physics.F90	/^    real(8), intent(inout), optional :: mu_out /;"	L	subroutine:sample_energy	file:
multiplicity	ace_header.F90	/^    integer :: multiplicity /;"	k	type:Reaction
multiply_smooth	ace_header.F90	/^    logical :: multiply_smooth /;"	k	type:UrrData
mybuf	cmfd_slepc_solver.F90	/^    real(8),allocatable  :: mybuf(/;"	L	subroutine:extract_results	file:
n	cmfd_execute.F90	/^    int/;"	L	subroutine:calc_fission_source	file:
n	cmfd_input.F90	/^    int/;"	L	subroutine:create_cmfd_tally	file:
n	cmfd_jfnk_solver.F90	/^    int/;"	L	subroutine:build_jacobian_matrix	file:
n	cmfd_jfnk_solver.F90	/^    int/;"	L	subroutine:compute_nonlinear_residual	file:
n	cmfd_jfnk_solver.F90	/^    int/;"	L	subroutine:extract_results	file:
n	cmfd_jfnk_solver.F90	/^    int/;"	L	subroutine:init_data	file:
n	cmfd_jfnk_solver.F90	/^    int/;"	L	subroutine:init_jacobian_matrix	file:
n	cmfd_loss_operator.F90	/^    int/;"	L	function:preallocate_loss_matrix	file:
n	cmfd_loss_operator.F90	/^    int/;"	L	subroutine:init_loss_matrix	file:
n	cmfd_power_solver.F90	/^    int/;"	L	subroutine:extract_results	file:
n	cmfd_power_solver.F90	/^    int/;"	L	subroutine:init_data	file:
n	cmfd_prod_operator.F90	/^    int/;"	L	subroutine:init_prod_matrix	file:
n	cmfd_slepc_solver.F90	/^    int/;"	L	subroutine:extract_results	file:
n	cmfd_slepc_solver.F90	/^    int/;"	L	subroutine:init_data	file:
n	doppler.F90	/^    int/;"	L	subroutine:broaden	file:
n	eigenvalue.F90	/^    int/;"	L	subroutine:calculate_average_keff	file:
n	eigenvalue.F90	/^    int/;"	L	subroutine:calculate_combined_keff	file:
n	eigenvalue.F90	/^    int/;"	L	subroutine:count_source_for_ufs	file:
n	eigenvalue.F90	/^    int/;"	L	subroutine:shannon_entropy	file:
n	eigenvalue.F90	/^    int/;"	L	subroutine:synchronize_bank	file:
n	energy_grid.F90	/^    int/;"	L	subroutine:add_grid_points	file:
n	geometry.F90	/^    int/;"	L	subroutine:check_cell_overlap	file:
n	geometry.F90	/^    int/;"	L	subroutine:find_cell	file:
n	input_xml.F90	/^    int/;"	L	subroutine:read_geometry_xml	file:
n	input_xml.F90	/^    int/;"	L	subroutine:read_materials_xml	file:
n	input_xml.F90	/^    int/;"	L	subroutine:read_settings_xml	file:
n	input_xml.F90	/^    int/;"	L	subroutine:read_tallies_xml	file:
n	math.F90	/^    int/;"	L	function:calc_pn	file:
n	math.F90	/^    int/;"	L	function:calc_rn	file:
n	math.F90	/^    real(8)            :: n /;"	L	function:t_percentile	file:
n	matrix_header.F90	/^    int/;"	L	subroutine:matrix_create	file:
n	matrix_header.F90	/^    int/;"	k	type:Matrix
n	mesh.F90	/^    int/;"	L	subroutine:count_bank_sites	file:
n	mesh.F90	/^    int/;"	L	subroutine:get_mesh_bin	file:
n	output.F90	/^    int/;"	L	subroutine:header	file:
n	output.F90	/^    int/;"	L	subroutine:print_tally	file:
n	output.F90	/^    int/;"	L	subroutine:write_surface_current	file:
n	output.F90	/^    int/;"	L	subroutine:write_tallies	file:
n	physics.F90	/^    int/;"	L	function:sample_angle	file:
n	random_lcg.F90	/^    int/;"	L	function:prn_skip_ahead	file:
n	random_lcg.F90	/^    int/;"	L	subroutine:prn_skip	file:
n	search.F90	/^    int/;"	L	function:binary_search_int4	file:
n	search.F90	/^    int/;"	L	function:binary_search_int8	file:
n	search.F90	/^    int/;"	L	function:binary_search_real	file:
n	state_point.F90	/^    int/;"	L	subroutine:write_tally_results_nr	file:
n	string.F90	/^    int/;"	L	subroutine:split_string	file:
n	string.F90	/^    int/;"	L	subroutine:split_string_wl	file:
n	tally.F90	/^    int/;"	L	function:get_next_bin	file:
n	tally.F90	/^    int/;"	L	subroutine:get_scoring_bins	file:
n	tally.F90	/^    int/;"	L	subroutine:reduce_tally_results	file:
n	tally.F90	/^    int/;"	L	subroutine:score_all_nuclides	file:
n	tally.F90	/^    int/;"	L	subroutine:score_analog_tally	file:
n	tally.F90	/^    int/;"	L	subroutine:score_fission_eout	file:
n	tally.F90	/^    int/;"	L	subroutine:score_surface_current	file:
n	tally.F90	/^    int/;"	L	subroutine:score_tl_on_mesh	file:
n	tally.F90	/^    int/;"	L	subroutine:score_tracklength_tally	file:
n	tally.F90	/^    int/;"	L	subroutine:statistics_result	file:
n	tally_initialize.F90	/^    int/;"	L	subroutine:add_map_element	file:
n	tally_initialize.F90	/^    int/;"	L	subroutine:add_tallies	file:
n	tally_initialize.F90	/^    int/;"	L	subroutine:setup_tally_arrays	file:
n	vector_header.F90	/^    int/;"	L	subroutine:vector_create	file:
n	vector_header.F90	/^    int/;"	k	type:Vector
n	xml_interface.F90	/^    int/;"	L	function:get_arraysize_double	file:
n	xml_interface.F90	/^    int/;"	L	function:get_arraysize_integer	file:
n	xml_interface.F90	/^    int/;"	L	function:get_arraysize_string	file:
n1	geometry.F90	/^    real(8) :: n1 /;"	L	subroutine:cross_surface	file:
n1	output_interface.F90	/^    integer,           intent(in)            :: n1,/;"	L	subroutine:read_tally_result	file:
n1	output_interface.F90	/^    integer,           intent(in)           :: n1,/;"	L	subroutine:write_tally_result	file:
n2	geometry.F90	/^    real(8) :: n2 /;"	L	subroutine:cross_surface	file:
n2	output_interface.F90	/^    integer,           intent(in)            :: n1, n2 /;"	L	subroutine:read_tally_result	file:
n2	output_interface.F90	/^    integer,           intent(in)           :: n1, n2 /;"	L	subroutine:write_tally_result	file:
n3	geometry.F90	/^    real(8) :: n3 /;"	L	subroutine:cross_surface	file:
n_bank	particle_header.F90	/^    integer    :: n_bank /;"	k	type:Particle
n_batches	cmfd_header.F90	/^    integer, intent(in)            :: n_batches /;"	L	subroutine:allocate_cmfd	file:
n_bins	input_xml.F90	/^    integer :: n_bins /;"	L	subroutine:read_tallies_xml	file:
n_bins	state_point.F90	/^    integer :: n_bins /;"	L	subroutine:write_tally_results_nr	file:
n_bins	tally.F90	/^    integer :: n_bins /;"	L	subroutine:reduce_tally_results	file:
n_bins	tally_header.F90	/^    integer :: n_bins /;"	k	type:TallyFilter
n_bodies	physics.F90	/^    integer :: n_bodies /;"	L	subroutine:sample_energy	file:
n_c	cmfd_loss_operator.F90	/^    integer :: n_c /;"	L	subroutine:init_loss_matrix	file:
n_cells	geometry_header.F90	/^     integer :: n_cells /;"	k	type:Universe
n_cells	global.F90	/^  integer :: n_cells /;"	v	module:global
n_cells_in_univ	initialize.F90	/^    integer              :: n_cells_in_univ /;"	L	subroutine:prepare_universes	file:
n_cells_in_univ	input_xml.F90	/^    integer :: n_cells_in_univ$/;"	L	subroutine:read_geometry_xml	file:
n_clust	ace_header.F90	/^    integer :: n_clust /;"	k	type:RrrData
n_clust	clustering.F90	/^    integer :: n_clust /;"	L	subroutine:apply_clustering_to_all_xs	file:
n_clust	clustering.F90	/^    integer :: n_clust /;"	L	subroutine:thin_energy_grid	file:
n_clust	clustering.F90	/^    integer, intent(in) :: n_clust /;"	L	subroutine:condense_one_xs	file:
n_clust	clustering.F90	/^    integer, intent(in) :: n_clust /;"	L	subroutine:reorder_clusters	file:
n_clust	clustering_kmeans.F90	/^    integer :: n_clust /;"	L	subroutine:kms_compute_distances	file:
n_clust	clustering_kmeans.F90	/^    integer :: n_clust /;"	L	subroutine:kms_update_clust_cen	file:
n_clust	clustering_kmeans.F90	/^    integer :: n_clust /;"	L	subroutine:print_kms	file:
n_clust	clustering_kmeans.F90	/^    integer, intent(in) :: n_clust /;"	L	subroutine:kms_uniform_clust_cen	file:
n_clust_glob	global.F90	/^  integer :: n_clust_glob /;"	v	module:global
n_collision	particle_header.F90	/^    integer    :: n_collision /;"	k	type:Particle
n_cols	input_xml.F90	/^    integer n_cols,/;"	L	subroutine:read_plots_xml	file:
n_comp	input_xml.F90	/^    integer n_cols, col_id, n_comp,/;"	L	subroutine:read_plots_xml	file:
n_count	matrix_header.F90	/^    integer :: n_count /;"	k	type:Matrix
n_cross	tally.F90	/^    integer :: n_cross /;"	L	subroutine:score_surface_current	file:
n_cross	tally.F90	/^    integer :: n_cross /;"	L	subroutine:score_tl_on_mesh	file:
n_dim	clustering_kmeans.F90	/^    integer :: n_dim /;"	L	subroutine:kms_compute_distances	file:
n_dim	clustering_kmeans.F90	/^    integer :: n_dim /;"	L	subroutine:kms_uniform_clust_cen	file:
n_dim	clustering_kmeans.F90	/^    integer :: n_dim /;"	L	subroutine:kms_update_clust_cen	file:
n_dim	clustering_kmeans.F90	/^    integer :: n_dim /;"	L	subroutine:print_kms	file:
n_dimension	geometry_header.F90	/^     integer :: n_dimension /;"	k	type:Lattice
n_dimension	mesh_header.F90	/^    integer :: n_dimension /;"	k	type:StructuredMesh
n_e	cmfd_loss_operator.F90	/^    integer :: n_e /;"	L	subroutine:init_loss_matrix	file:
n_e_out	ace_header.F90	/^    integer              :: n_e_out$/;"	k	type:DistEnergySab
n_elastic_e_in	ace_header.F90	/^    integer :: n_elastic_e_in /;"	k	type:SAlphaBeta
n_elastic_mu	ace_header.F90	/^    integer :: n_elastic_mu /;"	k	type:SAlphaBeta
n_energy	ace_header.F90	/^    integer              :: n_energy /;"	k	type:DistAngle
n_energy	ace_header.F90	/^    integer :: n_energy /;"	k	type:UrrData
n_energy_out	physics.F90	/^    integer :: n_energy_out /;"	L	subroutine:sab_scatter	file:
n_event	tracking.F90	/^    integer :: n_event /;"	L	subroutine:transport	file:
n_fast	clustering.F90	/^    integer :: n_fast /;"	L	subroutine:apply_clustering_to_all_xs	file:
n_fast	clustering.F90	/^    integer :: n_fast /;"	L	subroutine:thin_energy_grid	file:
n_fast	clustering.F90	/^    integer, intent(in) :: n_fast /;"	L	subroutine:condense_one_xs	file:
n_feat	clustering_kmeans.F90	/^    integer :: n_feat /;"	L	subroutine:kms_compute_distances	file:
n_feat	clustering_kmeans.F90	/^    integer :: n_feat /;"	L	subroutine:kms_uniform_clust_cen	file:
n_feat	clustering_kmeans.F90	/^    integer :: n_feat /;"	L	subroutine:kms_update_clust_cen	file:
n_feat	clustering_kmeans.F90	/^    integer :: n_feat /;"	L	subroutine:print_kms	file:
n_feat	clustering_kmeans.F90	/^    integer :: n_feat$/;"	L	subroutine:perform_kms	file:
n_filters	cmfd_input.F90	/^    integer :: n_filters /;"	L	subroutine:create_cmfd_tally	file:
n_filters	input_xml.F90	/^    integer :: n_filters /;"	L	subroutine:read_tallies_xml	file:
n_filters	tally_header.F90	/^    integer                        :: n_filters /;"	k	type:TallyObject
n_fission	ace_header.F90	/^    integer :: n_fission /;"	k	type:Nuclide
n_grid	ace_header.F90	/^    integer :: n_grid /;"	k	type:Nuclide
n_grid	global.F90	/^  integer :: n_grid /;"	v	module:global
n_grid_local	clustering.F90	/^    integer :: n_grid_local /;"	L	function:find_grid_index	file:
n_grid_new	clustering.F90	/^    integer :: n_grid_old, n_grid_new /;"	L	subroutine:thin_energy_grid	file:
n_grid_old	clustering.F90	/^    integer :: n_grid_old,/;"	L	subroutine:thin_energy_grid	file:
n_group_glob	global.F90	/^  integer :: n_group_glob /;"	v	module:global
n_groups	cmfd_execute.F90	/^    integer :: n_groups /;"	L	subroutine:cmfd_reweight	file:
n_groups	mesh.F90	/^    integer :: n_groups /;"	L	subroutine:count_bank_sites	file:
n_i	cmfd_loss_operator.F90	/^    integer :: n_i /;"	L	subroutine:init_loss_matrix	file:
n_inelastic_e_in	ace_header.F90	/^    integer :: n_inelastic_e_in /;"	k	type:SAlphaBeta
n_inelastic_e_out	ace_header.F90	/^    integer :: n_inelastic_e_out /;"	k	type:SAlphaBeta
n_inelastic_mu	ace_header.F90	/^    integer :: n_inelastic_mu /;"	k	type:SAlphaBeta
n_iteration	search.F90	/^    integer :: n_iteration$/;"	L	function:binary_search_int4	file:
n_iteration	search.F90	/^    integer :: n_iteration$/;"	L	function:binary_search_int8	file:
n_iteration	search.F90	/^    integer :: n_iteration$/;"	L	function:binary_search_real	file:
n_lattices	global.F90	/^  integer :: n_lattices /;"	v	module:global
n_listings	global.F90	/^  integer :: n_listings /;"	v	module:global
n_lost_particles	global.F90	/^  integer :: n_lost_particles$/;"	v	module:global
n_masks	input_xml.F90	/^    integer n_cols, col_id, n_comp, n_masks$/;"	L	subroutine:read_plots_xml	file:
n_materials	global.F90	/^  integer :: n_materials /;"	v	module:global
n_new	input_xml.F90	/^    integer :: n_new /;"	L	subroutine:read_tallies_xml	file:
n_nuclide_bins	tally_header.F90	/^    integer              :: n_nuclide_bins /;"	k	type:TallyObject
n_nuclides	material_header.F90	/^    integer              :: n_nuclides /;"	k	type:Material
n_nuclides_total	global.F90	/^  integer :: n_nuclides_total /;"	v	module:global
n_order	input_xml.F90	/^    integer :: n_order /;"	L	subroutine:read_tallies_xml	file:
n_order	output.F90	/^    integer :: n_order /;"	L	subroutine:write_tallies	file:
n_order_pos	input_xml.F90	/^    integer :: n_order_pos /;"	L	subroutine:read_tallies_xml	file:
n_pairs	endf_header.F90	/^    integer :: n_pairs /;"	k	type:Tab1
n_pairs	interpolation.F90	/^    integer :: n_pairs /;"	L	function:interpolate_tab1_object	file:
n_plots	global.F90	/^  integer :: n_plots /;"	v	module:global
n_points	interpolation.F90	/^    integer :: n_points /;"	L	function:interpolate_tab1_array	file:
n_precursor	ace_header.F90	/^    integer :: n_precursor /;"	k	type:Nuclide
n_prob	ace_header.F90	/^    integer :: n_prob /;"	k	type:UrrData
n_reaction	ace_header.F90	/^    integer :: n_reaction /;"	k	type:Nuclide
n_realizations	tally_header.F90	/^    integer :: n_realizations /;"	k	type:TallyObject
n_regions	endf_header.F90	/^    integer :: n_regions /;"	k	type:Tab1
n_regions	interpolation.F90	/^    integer :: n_regions /;"	L	function:interpolate_tab1_array	file:
n_regions	interpolation.F90	/^    integer :: n_regions /;"	L	function:interpolate_tab1_object	file:
n_request	eigenvalue.F90	/^    integer    :: n_request /;"	L	subroutine:synchronize_bank	file:
n_rrr	clustering.F90	/^    integer :: n_rrr /;"	L	subroutine:apply_clustering_to_all_xs	file:
n_rrr	clustering.F90	/^    integer :: n_rrr /;"	L	subroutine:cluster_one_nuclide	file:
n_rrr	clustering.F90	/^    integer :: n_rrr /;"	L	subroutine:thin_energy_grid	file:
n_rrr	clustering.F90	/^    integer, intent(in) :: n_rrr /;"	L	subroutine:condense_one_xs	file:
n_rrr	clustering.F90	/^    integer, intent(in) :: n_rrr /;"	L	subroutine:reorder_clusters	file:
n_rxn	clustering.F90	/^    integer :: n_rxn /;"	L	subroutine:cluster_one_nuclide	file:
n_s	cmfd_loss_operator.F90	/^    integer :: n_s /;"	L	subroutine:init_loss_matrix	file:
n_sab	input_xml.F90	/^    integer :: n_sab /;"	L	subroutine:read_materials_xml	file:
n_sab	material_header.F90	/^    integer              :: n_sab /;"	k	type:Material
n_sab_tables	global.F90	/^  integer :: n_sab_tables /;"	v	module:global
n_sample	physics.F90	/^    integer :: n_sample /;"	L	function:sample_fission_energy	file:
n_sample	physics.F90	/^    integer :: n_sample /;"	L	subroutine:sample_energy	file:
n_score_bins	tally_header.F90	/^    integer              :: n_score_bins /;"	k	type:TallyObject
n_scores	input_xml.F90	/^    integer :: n_scores /;"	L	subroutine:read_tallies_xml	file:
n_sites	mesh.F90	/^    integer :: n_sites /;"	L	subroutine:count_bank_sites	file:
n_size	xml_interface.F90	/^    integer :: n_size$/;"	L	function:get_list_size	file:
n_surfaces	geometry_header.F90	/^     integer :: n_surfaces /;"	k	type:Cell
n_surfaces	global.F90	/^  integer :: n_surfaces /;"	v	module:global
n_therm	clustering.F90	/^    integer :: n_therm /;"	L	subroutine:apply_clustering_to_all_xs	file:
n_therm	clustering.F90	/^    integer :: n_therm /;"	L	subroutine:thin_energy_grid	file:
n_therm	clustering.F90	/^    integer, intent(in) :: n_therm /;"	L	subroutine:condense_one_xs	file:
n_therm	clustering.F90	/^    integer, intent(in) :: n_therm /;"	L	subroutine:reorder_clusters	file:
n_tracks	input_xml.F90	/^    integer :: n_tracks$/;"	L	subroutine:read_settings_xml	file:
n_tracks	track_output.F90	/^  integer, private                  :: n_tracks /;"	v	module:track_output
n_universes	global.F90	/^  integer :: n_universes /;"	v	module:global
n_user_score_bins	tally_header.F90	/^    integer              :: n_user_score_bins /;"	k	type:TallyObject
n_values	ace.F90	/^    integer, intent(in) :: n_values /;"	L	function:get_int	file:
n_values	ace.F90	/^    integer, intent(in) :: n_values /;"	L	function:get_real	file:
n_words	input_xml.F90	/^    integer :: n_words /;"	L	subroutine:read_tallies_xml	file:
n_words	string.F90	/^    integer,        intent(in)  :: n_words$/;"	L	function:concatenate	file:
n_x	geometry.F90	/^    integer :: n_x,/;"	L	subroutine:cross_lattice	file:
n_x	geometry.F90	/^    integer :: n_x,/;"	L	subroutine:find_cell	file:
n_x	hdf5_summary.F90	/^    integer          :: n_x,/;"	L	subroutine:hdf5_write_geometry	file:
n_x	initialize.F90	/^    integer :: n_x,/;"	L	subroutine:adjust_indices	file:
n_x	input_xml.F90	/^    integer :: n_x,/;"	L	subroutine:read_geometry_xml	file:
n_xs_new	clustering.F90	/^    integer :: n_xs_old, n_xs_new /;"	L	subroutine:condense_one_xs	file:
n_xs_old	clustering.F90	/^    integer :: n_xs_old,/;"	L	subroutine:condense_one_xs	file:
n_y	geometry.F90	/^    integer :: n_x, n_y,/;"	L	subroutine:cross_lattice	file:
n_y	geometry.F90	/^    integer :: n_x, n_y,/;"	L	subroutine:find_cell	file:
n_y	hdf5_summary.F90	/^    integer          :: n_x, n_y,/;"	L	subroutine:hdf5_write_geometry	file:
n_y	initialize.F90	/^    integer :: n_x, n_y,/;"	L	subroutine:adjust_indices	file:
n_y	input_xml.F90	/^    integer :: n_x, n_y,/;"	L	subroutine:read_geometry_xml	file:
n_y	mesh.F90	/^    integer :: n_y /;"	L	function:mesh_indices_to_bin	file:
n_y	mesh.F90	/^    integer :: n_y /;"	L	subroutine:bin_to_mesh_indices	file:
n_z	geometry.F90	/^    integer :: n_x, n_y, n_z /;"	L	subroutine:cross_lattice	file:
n_z	geometry.F90	/^    integer :: n_x, n_y, n_z /;"	L	subroutine:find_cell	file:
n_z	hdf5_summary.F90	/^    integer          :: n_x, n_y, n_z$/;"	L	subroutine:hdf5_write_geometry	file:
n_z	initialize.F90	/^    integer :: n_x, n_y, n_z /;"	L	subroutine:adjust_indices	file:
n_z	input_xml.F90	/^    integer :: n_x, n_y, n_z$/;"	L	subroutine:read_geometry_xml	file:
n_z	mesh.F90	/^    integer :: n_z /;"	L	function:mesh_indices_to_bin	file:
n_z	mesh.F90	/^    integer :: n_z /;"	L	subroutine:bin_to_mesh_indices	file:
n_zaid	ace_header.F90	/^    integer       :: n_zaid /;"	k	type:SAlphaBeta
name	ace.F90	/^    character(10) :: name /;"	L	subroutine:read_ace_table	file:
name	ace.F90	/^    character(12)  :: name /;"	L	subroutine:read_xs	file:
name	ace_header.F90	/^    character(10) :: name /;"	k	type:Nuclide
name	ace_header.F90	/^    character(10) :: name /;"	k	type:SAlphaBeta
name	ace_header.F90	/^    character(12) :: name /;"	k	type:XsListing
name	hdf5_interface.F90	/^    character(*),       intent(in)  :: name /;"	L	subroutine:hdf5_read_long	file:
name	hdf5_interface.F90	/^    character(*),       intent(in)  :: name /;"	L	subroutine:hdf5_read_long_parallel	file:
name	hdf5_interface.F90	/^    character(*),       intent(in) :: name /;"	L	subroutine:hdf5_write_long	file:
name	hdf5_interface.F90	/^    character(*),       intent(in) :: name /;"	L	subroutine:hdf5_write_long_parallel	file:
name	hdf5_interface.F90	/^    character(*),    intent(in)    :: name /;"	L	subroutine:hdf5_read_double_1Darray_parallel	file:
name	hdf5_interface.F90	/^    character(*),    intent(in)    :: name /;"	L	subroutine:hdf5_read_double_parallel	file:
name	hdf5_interface.F90	/^    character(*),    intent(in)    :: name /;"	L	subroutine:hdf5_read_integer_1Darray_parallel	file:
name	hdf5_interface.F90	/^    character(*),    intent(in)    :: name /;"	L	subroutine:hdf5_read_integer_parallel	file:
name	hdf5_interface.F90	/^    character(*),   intent(in)    :: name /;"	L	subroutine:hdf5_read_double	file:
name	hdf5_interface.F90	/^    character(*),   intent(in)    :: name /;"	L	subroutine:hdf5_read_double_1Darray	file:
name	hdf5_interface.F90	/^    character(*),   intent(in)    :: name /;"	L	subroutine:hdf5_read_double_2Darray	file:
name	hdf5_interface.F90	/^    character(*),   intent(in)    :: name /;"	L	subroutine:hdf5_read_double_2Darray_parallel	file:
name	hdf5_interface.F90	/^    character(*),   intent(in)    :: name /;"	L	subroutine:hdf5_read_double_3Darray	file:
name	hdf5_interface.F90	/^    character(*),   intent(in)    :: name /;"	L	subroutine:hdf5_read_double_3Darray_parallel	file:
name	hdf5_interface.F90	/^    character(*),   intent(in)    :: name /;"	L	subroutine:hdf5_read_double_4Darray	file:
name	hdf5_interface.F90	/^    character(*),   intent(in)    :: name /;"	L	subroutine:hdf5_read_double_4Darray_parallel	file:
name	hdf5_interface.F90	/^    character(*),   intent(in)    :: name /;"	L	subroutine:hdf5_read_integer	file:
name	hdf5_interface.F90	/^    character(*),   intent(in)    :: name /;"	L	subroutine:hdf5_read_integer_1Darray	file:
name	hdf5_interface.F90	/^    character(*),   intent(in)    :: name /;"	L	subroutine:hdf5_read_integer_2Darray	file:
name	hdf5_interface.F90	/^    character(*),   intent(in)    :: name /;"	L	subroutine:hdf5_read_integer_2Darray_parallel	file:
name	hdf5_interface.F90	/^    character(*),   intent(in)    :: name /;"	L	subroutine:hdf5_read_integer_3Darray	file:
name	hdf5_interface.F90	/^    character(*),   intent(in)    :: name /;"	L	subroutine:hdf5_read_integer_3Darray_parallel	file:
name	hdf5_interface.F90	/^    character(*),   intent(in)    :: name /;"	L	subroutine:hdf5_read_integer_4Darray	file:
name	hdf5_interface.F90	/^    character(*),   intent(in)    :: name /;"	L	subroutine:hdf5_read_integer_4Darray_parallel	file:
name	hdf5_interface.F90	/^    character(*),   intent(in)    :: name /;"	L	subroutine:hdf5_read_string	file:
name	hdf5_interface.F90	/^    character(*),   intent(in)    :: name /;"	L	subroutine:hdf5_read_string_parallel	file:
name	hdf5_interface.F90	/^    character(*),   intent(in)    :: name /;"	L	subroutine:hdf5_write_double_4Darray	file:
name	hdf5_interface.F90	/^    character(*),   intent(in)    :: name /;"	L	subroutine:hdf5_write_double_4Darray_parallel	file:
name	hdf5_interface.F90	/^    character(*),   intent(in)    :: name /;"	L	subroutine:hdf5_write_integer_4Darray	file:
name	hdf5_interface.F90	/^    character(*),   intent(in)    :: name /;"	L	subroutine:hdf5_write_integer_4Darray_parallel	file:
name	hdf5_interface.F90	/^    character(*),   intent(in)    :: name /;"	L	subroutine:hdf5_write_string	file:
name	hdf5_interface.F90	/^    character(*),   intent(in)    :: name /;"	L	subroutine:hdf5_write_string_parallel	file:
name	hdf5_interface.F90	/^    character(*),   intent(in) :: name /;"	L	subroutine:hdf5_write_double	file:
name	hdf5_interface.F90	/^    character(*),   intent(in) :: name /;"	L	subroutine:hdf5_write_double_1Darray	file:
name	hdf5_interface.F90	/^    character(*),   intent(in) :: name /;"	L	subroutine:hdf5_write_double_1Darray_parallel	file:
name	hdf5_interface.F90	/^    character(*),   intent(in) :: name /;"	L	subroutine:hdf5_write_double_2Darray	file:
name	hdf5_interface.F90	/^    character(*),   intent(in) :: name /;"	L	subroutine:hdf5_write_double_2Darray_parallel	file:
name	hdf5_interface.F90	/^    character(*),   intent(in) :: name /;"	L	subroutine:hdf5_write_double_3Darray	file:
name	hdf5_interface.F90	/^    character(*),   intent(in) :: name /;"	L	subroutine:hdf5_write_double_3Darray_parallel	file:
name	hdf5_interface.F90	/^    character(*),   intent(in) :: name /;"	L	subroutine:hdf5_write_double_parallel	file:
name	hdf5_interface.F90	/^    character(*),   intent(in) :: name /;"	L	subroutine:hdf5_write_integer	file:
name	hdf5_interface.F90	/^    character(*),   intent(in) :: name /;"	L	subroutine:hdf5_write_integer_1Darray	file:
name	hdf5_interface.F90	/^    character(*),   intent(in) :: name /;"	L	subroutine:hdf5_write_integer_1Darray_parallel	file:
name	hdf5_interface.F90	/^    character(*),   intent(in) :: name /;"	L	subroutine:hdf5_write_integer_2Darray	file:
name	hdf5_interface.F90	/^    character(*),   intent(in) :: name /;"	L	subroutine:hdf5_write_integer_2Darray_parallel	file:
name	hdf5_interface.F90	/^    character(*),   intent(in) :: name /;"	L	subroutine:hdf5_write_integer_3Darray	file:
name	hdf5_interface.F90	/^    character(*),   intent(in) :: name /;"	L	subroutine:hdf5_write_integer_3Darray_parallel	file:
name	hdf5_interface.F90	/^    character(*),   intent(in) :: name /;"	L	subroutine:hdf5_write_integer_parallel	file:
name	input_xml.F90	/^    character(*),   intent(in)    :: name$/;"	L	subroutine:expand_natural_element	file:
name	input_xml.F90	/^    character(12) :: name /;"	L	subroutine:read_materials_xml	file:
name	output_interface.F90	/^    character(*),      intent(in)            :: name /;"	L	subroutine:read_tally_result	file:
name	output_interface.F90	/^    character(*),      intent(in)           :: name /;"	L	subroutine:write_tally_result	file:
name	output_interface.F90	/^    character(*),   intent(in)           :: name /;"	L	subroutine:read_double_1Darray	file:
name	output_interface.F90	/^    character(*),   intent(in)           :: name /;"	L	subroutine:read_integer_1Darray	file:
name	output_interface.F90	/^    character(*), intent(in)           :: name /;"	L	subroutine:read_double	file:
name	output_interface.F90	/^    character(*), intent(in)           :: name /;"	L	subroutine:read_double_2Darray	file:
name	output_interface.F90	/^    character(*), intent(in)           :: name /;"	L	subroutine:read_double_3Darray	file:
name	output_interface.F90	/^    character(*), intent(in)           :: name /;"	L	subroutine:read_double_4Darray	file:
name	output_interface.F90	/^    character(*), intent(in)           :: name /;"	L	subroutine:read_integer	file:
name	output_interface.F90	/^    character(*), intent(in)           :: name /;"	L	subroutine:read_integer_2Darray	file:
name	output_interface.F90	/^    character(*), intent(in)           :: name /;"	L	subroutine:read_integer_3Darray	file:
name	output_interface.F90	/^    character(*), intent(in)           :: name /;"	L	subroutine:read_integer_4Darray	file:
name	output_interface.F90	/^    character(*), intent(in)           :: name /;"	L	subroutine:read_long	file:
name	output_interface.F90	/^    character(*), intent(in)           :: name /;"	L	subroutine:read_string	file:
name	output_interface.F90	/^    character(*), intent(in)           :: name /;"	L	subroutine:write_double	file:
name	output_interface.F90	/^    character(*), intent(in)           :: name /;"	L	subroutine:write_double_1Darray	file:
name	output_interface.F90	/^    character(*), intent(in)           :: name /;"	L	subroutine:write_double_2Darray	file:
name	output_interface.F90	/^    character(*), intent(in)           :: name /;"	L	subroutine:write_double_3Darray	file:
name	output_interface.F90	/^    character(*), intent(in)           :: name /;"	L	subroutine:write_double_4Darray	file:
name	output_interface.F90	/^    character(*), intent(in)           :: name /;"	L	subroutine:write_integer	file:
name	output_interface.F90	/^    character(*), intent(in)           :: name /;"	L	subroutine:write_integer_1Darray	file:
name	output_interface.F90	/^    character(*), intent(in)           :: name /;"	L	subroutine:write_integer_2Darray	file:
name	output_interface.F90	/^    character(*), intent(in)           :: name /;"	L	subroutine:write_integer_3Darray	file:
name	output_interface.F90	/^    character(*), intent(in)           :: name /;"	L	subroutine:write_integer_4Darray	file:
name	output_interface.F90	/^    character(*), intent(in)           :: name /;"	L	subroutine:write_long	file:
name	output_interface.F90	/^    character(*), intent(in)           :: name /;"	L	subroutine:write_string	file:
names	material_header.F90	/^    character(12), allocatable :: names(/;"	k	type:Material
nbt	endf_header.F90	/^    integer, allocatable :: nbt(/;"	k	type:Tab1
neig_dc	cmfd_data.F90	/^    real(8) :: neig_dc /;"	L	subroutine:compute_dtilde	file:
neig_flux	cmfd_data.F90	/^    real(8) :: neig_flux /;"	L	subroutine:compute_dhat	file:
neig_hxyz	cmfd_data.F90	/^    real(8) :: neig_hxyz(/;"	L	subroutine:compute_dtilde	file:
neig_idx	cmfd_data.F90	/^    integer :: neig_idx(/;"	L	subroutine:compute_dhat	file:
neig_idx	cmfd_data.F90	/^    integer :: neig_idx(/;"	L	subroutine:compute_dtilde	file:
neig_idx	cmfd_loss_operator.F90	/^    integer :: neig_idx(/;"	L	function:preallocate_loss_matrix	file:
neig_idx	cmfd_loss_operator.F90	/^    integer :: neig_idx(/;"	L	subroutine:build_loss_matrix	file:
neig_mat_idx	cmfd_loss_operator.F90	/^    integer :: neig_mat_idx /;"	L	function:preallocate_loss_matrix	file:
neig_mat_idx	cmfd_loss_operator.F90	/^    integer :: neig_mat_idx /;"	L	subroutine:build_loss_matrix	file:
neighbor	eigenvalue.F90	/^    integer    :: neighbor /;"	L	subroutine:synchronize_bank	file:
neighbor_lists	geometry.F90	/^  subroutine neighbor_lists(/;"	s	module:geometry
neighbor_neg	geometry_header.F90	/^          neighbor_pos(:), &           ! List of cells on positive side$/;"	k	type:Surface
neighbor_pos	geometry_header.F90	/^     integer, allocatable :: & $/;"	k	type:Surface
net_current	cmfd_data.F90	/^    real(8) :: net_current /;"	L	subroutine:compute_dhat	file:
neutron_balance	cmfd_data.F90	/^  subroutine neutron_balance(/;"	s	module:cmfd_data
new_coords	track_output.F90	/^    real(8), allocatable :: new_coords(/;"	L	subroutine:write_particle_track	file:
new_seed	random_lcg.F90	/^    integer(8)             :: new_seed /;"	L	function:prn_skip_ahead	file:
new_weights	cmfd_execute.F90	/^    logical, intent(in) :: new_weights /;"	L	subroutine:cmfd_reweight	file:
next	ace_header.F90	/^    type(DistEnergy), pointer :: next /;"	k	type:DistEnergy
next	dict_header.F90	/^    type(ElemKeyValueCI), pointer :: next /;"	k	type:ElemKeyValueCI
next	dict_header.F90	/^    type(ElemKeyValueII), pointer :: next /;"	k	type:ElemKeyValueII
next	list_header.F90	/^    type(ListElemChar), pointer :: next /;"	k	type:ListElemChar
next	list_header.F90	/^    type(ListElemInt), pointer :: next /;"	k	type:ListElemInt
next	list_header.F90	/^    type(ListElemReal), pointer :: next /;"	k	type:ListElemReal
next	particle_header.F90	/^    type(LocalCoord), pointer :: next /;"	k	type:LocalCoord
nfissxs	cmfd_header.F90	/^    real(8), allocatable :: nfissxs(/;"	k	type:cmfd_type
nfissxs	cmfd_prod_operator.F90	/^    real(8) :: nfissxs /;"	L	subroutine:build_prod_matrix	file:
ng	cmfd_data.F90	/^    integer :: ng /;"	L	subroutine:compute_dhat	file:
ng	cmfd_data.F90	/^    integer :: ng /;"	L	subroutine:compute_dtilde	file:
ng	cmfd_data.F90	/^    integer :: ng /;"	L	subroutine:compute_effective_downscatter	file:
ng	cmfd_data.F90	/^    integer :: ng /;"	L	subroutine:compute_xs	file:
ng	cmfd_data.F90	/^    integer :: ng /;"	L	subroutine:fix_neutron_balance	file:
ng	cmfd_data.F90	/^    integer :: ng /;"	L	subroutine:neutron_balance	file:
ng	cmfd_execute.F90	/^    integer :: ng /;"	L	subroutine:calc_fission_source	file:
ng	cmfd_execute.F90	/^    integer :: ng /;"	L	subroutine:cmfd_reweight	file:
ng	cmfd_execute.F90	/^    integer, intent(in) :: ng /;"	L	function:get_matrix_idx	file:
ng	cmfd_header.F90	/^    integer :: ng /;"	L	subroutine:allocate_cmfd	file:
ng	cmfd_input.F90	/^    integer :: ng /;"	L	subroutine:create_cmfd_tally	file:
ng	cmfd_input.F90	/^    integer :: ng$/;"	L	subroutine:read_cmfd_xml	file:
ng	cmfd_loss_operator.F90	/^    integer :: ng /;"	L	subroutine:build_loss_matrix	file:
ng	cmfd_loss_operator.F90	/^    integer :: ng /;"	L	subroutine:init_loss_matrix	file:
ng	cmfd_loss_operator.F90	/^    integer, intent(in)  :: ng /;"	L	subroutine:indices_to_matrix	file:
ng	cmfd_loss_operator.F90	/^    integer, intent(in)  :: ng /;"	L	subroutine:matrix_to_indices	file:
ng	cmfd_loss_operator.F90	/^    integer, intent(in) :: ng /;"	L	function:preallocate_loss_matrix	file:
ng	cmfd_prod_operator.F90	/^    integer :: ng /;"	L	subroutine:build_prod_matrix	file:
ng	cmfd_prod_operator.F90	/^    integer :: ng /;"	L	subroutine:init_prod_matrix	file:
ng	cmfd_prod_operator.F90	/^    integer, intent(in)  :: ng /;"	L	subroutine:indices_to_matrix	file:
ng	cmfd_prod_operator.F90	/^    integer, intent(in)  :: ng /;"	L	subroutine:matrix_to_indices	file:
nm_order	output.F90	/^    integer :: nm_order /;"	L	subroutine:write_tallies	file:
nnz	cmfd_jfnk_solver.F90	/^    integer :: nnz /;"	L	subroutine:init_jacobian_matrix	file:
nnz	cmfd_loss_operator.F90	/^    integer             :: nnz /;"	L	function:preallocate_loss_matrix	file:
nnz	cmfd_loss_operator.F90	/^    integer :: nnz /;"	L	subroutine:init_loss_matrix	file:
nnz	cmfd_prod_operator.F90	/^    integer :: nnz /;"	L	subroutine:init_prod_matrix	file:
nnz	matrix_header.F90	/^    integer :: nnz /;"	k	type:Matrix
nnz	matrix_header.F90	/^    integer, intent(in) :: nnz /;"	L	subroutine:matrix_create	file:
node_name	xml_interface.F90	/^    character(len=*), intent(in) :: node_name$/;"	L	function:check_for_node	file:
node_name	xml_interface.F90	/^    character(len=*), intent(in) :: node_name$/;"	L	function:get_arraysize_double	file:
node_name	xml_interface.F90	/^    character(len=*), intent(in) :: node_name$/;"	L	function:get_arraysize_integer	file:
node_name	xml_interface.F90	/^    character(len=*), intent(in) :: node_name$/;"	L	function:get_arraysize_string	file:
node_name	xml_interface.F90	/^    character(len=*), intent(in) :: node_name$/;"	L	subroutine:get_node	file:
node_name	xml_interface.F90	/^    character(len=*), intent(in) :: node_name$/;"	L	subroutine:get_node_array_double	file:
node_name	xml_interface.F90	/^    character(len=*), intent(in) :: node_name$/;"	L	subroutine:get_node_array_integer	file:
node_name	xml_interface.F90	/^    character(len=*), intent(in) :: node_name$/;"	L	subroutine:get_node_array_string	file:
node_name	xml_interface.F90	/^    character(len=*), intent(in) :: node_name$/;"	L	subroutine:get_node_list	file:
node_name	xml_interface.F90	/^    character(len=*), intent(in) :: node_name$/;"	L	subroutine:get_node_ptr	file:
node_name	xml_interface.F90	/^    character(len=*), intent(in) :: node_name$/;"	L	subroutine:get_node_value_double	file:
node_name	xml_interface.F90	/^    character(len=*), intent(in) :: node_name$/;"	L	subroutine:get_node_value_integer	file:
node_name	xml_interface.F90	/^    character(len=*), intent(in) :: node_name$/;"	L	subroutine:get_node_value_long	file:
node_name	xml_interface.F90	/^    character(len=*), intent(in) :: node_name$/;"	L	subroutine:get_node_value_string	file:
node_type	xml_interface.F90	/^    integer :: node_type$/;"	L	function:get_arraysize_double	file:
node_type	xml_interface.F90	/^    integer :: node_type$/;"	L	function:get_arraysize_integer	file:
node_type	xml_interface.F90	/^    integer :: node_type$/;"	L	function:get_arraysize_string	file:
node_type	xml_interface.F90	/^    integer :: node_type$/;"	L	subroutine:get_node_array_double	file:
node_type	xml_interface.F90	/^    integer :: node_type$/;"	L	subroutine:get_node_array_integer	file:
node_type	xml_interface.F90	/^    integer :: node_type$/;"	L	subroutine:get_node_array_string	file:
node_type	xml_interface.F90	/^    integer :: node_type$/;"	L	subroutine:get_node_value_double	file:
node_type	xml_interface.F90	/^    integer :: node_type$/;"	L	subroutine:get_node_value_integer	file:
node_type	xml_interface.F90	/^    integer :: node_type$/;"	L	subroutine:get_node_value_long	file:
node_type	xml_interface.F90	/^    integer :: node_type$/;"	L	subroutine:get_node_value_string	file:
node_type	xml_interface.F90	/^    integer, intent(out) :: node_type$/;"	L	subroutine:get_node	file:
norm	cmfd_header.F90	/^    real(8) :: norm /;"	k	type:cmfd_type
norm	geometry.F90	/^    real(8) :: norm /;"	L	subroutine:cross_surface	file:
norm_n	cmfd_power_solver.F90	/^  real(8) :: norm_n /;"	v	module:cmfd_power_solver
norm_o	cmfd_power_solver.F90	/^  real(8) :: norm_o /;"	v	module:cmfd_power_solver
normal_percentile	math.F90	/^  function normal_percentile(/;"	f	module:math
normalize_ao	initialize.F90	/^  subroutine normalize_ao(/;"	s	module:initialize
not_found	plot_header.F90	/^    type(ObjectColor) :: not_found /;"	k	type:ObjectPlot
nsigf11	cmfd_data.F90	/^    real(8) :: nsigf11 /;"	L	subroutine:fix_neutron_balance	file:
nsigf12	cmfd_data.F90	/^    real(8) :: nsigf12 /;"	L	subroutine:fix_neutron_balance	file:
nsigf21	cmfd_data.F90	/^    real(8) :: nsigf21 /;"	L	subroutine:fix_neutron_balance	file:
nsigf22	cmfd_data.F90	/^    real(8) :: nsigf22 /;"	L	subroutine:fix_neutron_balance	file:
nskip	random_lcg.F90	/^    integer(8) :: nskip /;"	L	function:prn_skip_ahead	file:
nu	ace.F90	/^    real(8) :: nu /;"	L	subroutine:generate_nu_fission	file:
nu	fission.F90	/^    real(8)                :: nu /;"	L	function:nu_delayed	file:
nu	fission.F90	/^    real(8)                :: nu /;"	L	function:nu_prompt	file:
nu	fission.F90	/^    real(8)                :: nu /;"	L	function:nu_total	file:
nu	physics.F90	/^    integer :: nu /;"	L	subroutine:create_fission_sites	file:
nu_d	physics.F90	/^    real(8) :: nu_d /;"	L	function:sample_fission_energy	file:
nu_d_data	ace_header.F90	/^    real(8), allocatable :: nu_d_data(/;"	k	type:Nuclide
nu_d_edist	ace_header.F90	/^    type(DistEnergy), pointer :: nu_d_edist(/;"	k	type:Nuclide
nu_d_precursor_data	ace_header.F90	/^    real(8), allocatable :: nu_d_precursor_data(/;"	k	type:Nuclide
nu_d_type	ace_header.F90	/^    integer :: nu_d_type$/;"	k	type:Nuclide
nu_delayed	fission.F90	/^  function nu_delayed(/;"	f	module:fission
nu_fission	ace_header.F90	/^    real(8) :: nu_fission /;"	k	type:MaterialMacroXS
nu_fission	ace_header.F90	/^    real(8) :: nu_fission /;"	k	type:NuclideMicroXS
nu_fission	ace_header.F90	/^    real(8), allocatable :: nu_fission(/;"	k	type:Nuclide
nu_p_data	ace_header.F90	/^    real(8), allocatable :: nu_p_data(/;"	k	type:Nuclide
nu_p_type	ace_header.F90	/^    integer :: nu_p_type$/;"	k	type:Nuclide
nu_prompt	fission.F90	/^  function nu_prompt(/;"	f	module:fission
nu_t	physics.F90	/^    real(8) :: nu_t /;"	L	function:sample_fission_energy	file:
nu_t	physics.F90	/^    real(8) :: nu_t /;"	L	subroutine:create_fission_sites	file:
nu_t_data	ace_header.F90	/^    real(8), allocatable :: nu_t_data(/;"	k	type:Nuclide
nu_t_type	ace_header.F90	/^    integer :: nu_t_type$/;"	k	type:Nuclide
nu_total	fission.F90	/^  function nu_total(/;"	f	module:fission
nuc	ace.F90	/^    type(Nuclide),   pointer :: nuc /;"	L	subroutine:read_ace_table	file:
nuc	ace.F90	/^    type(Nuclide), pointer :: nuc$/;"	L	subroutine:generate_nu_fission	file:
nuc	ace.F90	/^    type(Nuclide), pointer :: nuc$/;"	L	subroutine:read_angular_dist	file:
nuc	ace.F90	/^    type(Nuclide), pointer :: nuc$/;"	L	subroutine:read_energy_dist	file:
nuc	ace.F90	/^    type(Nuclide), pointer :: nuc$/;"	L	subroutine:read_esz	file:
nuc	ace.F90	/^    type(Nuclide), pointer :: nuc$/;"	L	subroutine:read_nu_data	file:
nuc	ace.F90	/^    type(Nuclide), pointer :: nuc$/;"	L	subroutine:read_reactions	file:
nuc	ace.F90	/^    type(Nuclide), pointer :: nuc$/;"	L	subroutine:read_unr_res	file:
nuc	clustering.F90	/^    type(Nuclide), pointer :: nuc /;"	L	subroutine:apply_clustering_to_all_xs	file:
nuc	clustering.F90	/^    type(Nuclide), pointer :: nuc /;"	L	subroutine:cluster_one_nuclide	file:
nuc	clustering.F90	/^    type(Nuclide), pointer :: nuc /;"	L	subroutine:thin_energy_grid	file:
nuc	clustering.F90	/^    type(Nuclide), pointer :: nuc /;"	L	subroutine:write_clustering	file:
nuc	cross_section.F90	/^    type(Nuclide), pointer, save :: nuc /;"	L	subroutine:calculate_nuclide_xs	file:
nuc	energy_grid.F90	/^    type(Nuclide), pointer :: nuc /;"	L	subroutine:grid_pointers	file:
nuc	fission.F90	/^    type(Nuclide), pointer :: nuc /;"	L	function:nu_delayed	file:
nuc	fission.F90	/^    type(Nuclide), pointer :: nuc /;"	L	function:nu_prompt	file:
nuc	fission.F90	/^    type(Nuclide), pointer :: nuc /;"	L	function:nu_total	file:
nuc	hdf5_summary.F90	/^    type(Nuclide),  pointer :: nuc /;"	L	subroutine:hdf5_write_nuclides	file:
nuc	output.F90	/^    type(Nuclide),    pointer :: nuc /;"	L	subroutine:write_xs_summary	file:
nuc	output.F90	/^    type(Nuclide),  pointer :: nuc /;"	L	subroutine:print_material	file:
nuc	output.F90	/^    type(Nuclide), pointer :: nuc$/;"	L	subroutine:print_nuclide	file:
nuc	physics.F90	/^    type(Nuclide),  pointer :: nuc$/;"	L	function:sample_fission_energy	file:
nuc	physics.F90	/^    type(Nuclide),  pointer :: nuc$/;"	L	subroutine:inelastic_scatter	file:
nuc	physics.F90	/^    type(Nuclide),  pointer :: nuc$/;"	L	subroutine:sample_target_velocity	file:
nuc	physics.F90	/^    type(Nuclide),  pointer, save :: nuc /;"	L	subroutine:create_fission_sites	file:
nuc	physics.F90	/^    type(Nuclide),  pointer, save :: nuc /;"	L	subroutine:sample_fission	file:
nuc	physics.F90	/^    type(Nuclide),  pointer, save :: nuc /;"	L	subroutine:scatter	file:
nuc	physics.F90	/^    type(Nuclide), pointer, save :: nuc /;"	L	subroutine:elastic_scatter	file:
nuc	physics.F90	/^    type(Nuclide), pointer, save :: nuc /;"	L	subroutine:sample_reaction	file:
nuclide	material_header.F90	/^    integer, allocatable :: nuclide(/;"	k	type:Material
nuclide_bins	tally_header.F90	/^    integer, allocatable :: nuclide_bins(/;"	k	type:TallyObject
nuclide_clear	ace_header.F90	/^    subroutine nuclide_clear(/;"	s	module:ace_header
nuclide_dict	global.F90	/^  type(DictCharInt) :: nuclide_dict$/;"	v	module:global
nuclides	global.F90	/^  type(Nuclide),    allocatable, target :: nuclides(/;"	v	module:global
num	string.F90	/^    integer(8) :: num$/;"	L	function:str_to_int	file:
num	string.F90	/^    integer(8), intent(in) :: num$/;"	L	function:int8_to_str	file:
num	string.F90	/^    integer, intent(in) :: num$/;"	L	function:int4_to_str	file:
num	string.F90	/^    real(8)                  :: num$/;"	L	function:str_to_real	file:
num	string.F90	/^    real(8),           intent(in) :: num /;"	L	function:real_to_str	file:
num2	string.F90	/^    real(8)      :: num2 /;"	L	function:real_to_str	file:
num_nm	tally.F90	/^    integer :: num_nm /;"	L	subroutine:score_all_nuclides	file:
num_nm	tally.F90	/^    integer :: num_nm /;"	L	subroutine:score_analog_tally	file:
num_nm	tally.F90	/^    integer :: num_nm /;"	L	subroutine:score_tl_on_mesh	file:
num_nm	tally.F90	/^    integer :: num_nm /;"	L	subroutine:score_tracklength_tally	file:
num_resamples	source.F90	/^    integer, save :: num_resamples /;"	L	subroutine:sample_external_source	file:
num_sparse	output.F90	/^    integer :: num_sparse /;"	L	subroutine:print_overlap_check	file:
number	string.F90	/^    logical                  :: number$/;"	L	function:is_number	file:
nx	cmfd_data.F90	/^    integer :: nx /;"	L	subroutine:compute_dhat	file:
nx	cmfd_data.F90	/^    integer :: nx /;"	L	subroutine:compute_dtilde	file:
nx	cmfd_data.F90	/^    integer :: nx /;"	L	subroutine:compute_effective_downscatter	file:
nx	cmfd_data.F90	/^    integer :: nx /;"	L	subroutine:compute_xs	file:
nx	cmfd_data.F90	/^    integer :: nx /;"	L	subroutine:fix_neutron_balance	file:
nx	cmfd_data.F90	/^    integer :: nx /;"	L	subroutine:neutron_balance	file:
nx	cmfd_data.F90	/^    integer :: nx /;"	L	subroutine:set_coremap	file:
nx	cmfd_execute.F90	/^    integer :: nx /;"	L	subroutine:calc_fission_source	file:
nx	cmfd_execute.F90	/^    integer :: nx /;"	L	subroutine:cmfd_reweight	file:
nx	cmfd_execute.F90	/^    integer, intent(in) :: nx /;"	L	function:get_matrix_idx	file:
nx	cmfd_header.F90	/^    integer :: nx /;"	L	subroutine:allocate_cmfd	file:
nx	cmfd_loss_operator.F90	/^    integer :: nx /;"	L	subroutine:build_loss_matrix	file:
nx	cmfd_loss_operator.F90	/^    integer :: nx /;"	L	subroutine:init_loss_matrix	file:
nx	cmfd_loss_operator.F90	/^    integer, intent(in)  :: nx /;"	L	subroutine:indices_to_matrix	file:
nx	cmfd_loss_operator.F90	/^    integer, intent(in)  :: nx /;"	L	subroutine:matrix_to_indices	file:
nx	cmfd_loss_operator.F90	/^    integer, intent(in) :: nx /;"	L	function:preallocate_loss_matrix	file:
nx	cmfd_prod_operator.F90	/^    integer :: nx /;"	L	subroutine:build_prod_matrix	file:
nx	cmfd_prod_operator.F90	/^    integer :: nx /;"	L	subroutine:init_prod_matrix	file:
nx	cmfd_prod_operator.F90	/^    integer, intent(in)  :: nx /;"	L	subroutine:indices_to_matrix	file:
nx	cmfd_prod_operator.F90	/^    integer, intent(in)  :: nx /;"	L	subroutine:matrix_to_indices	file:
nxyz	cmfd_data.F90	/^    integer :: nxyz(/;"	L	subroutine:compute_dhat	file:
nxyz	cmfd_data.F90	/^    integer :: nxyz(/;"	L	subroutine:compute_dtilde	file:
nxyz	cmfd_loss_operator.F90	/^    integer :: nxyz(/;"	L	function:preallocate_loss_matrix	file:
nxyz	cmfd_loss_operator.F90	/^    integer :: nxyz(/;"	L	subroutine:build_loss_matrix	file:
ny	cmfd_data.F90	/^    integer :: ny /;"	L	subroutine:compute_dhat	file:
ny	cmfd_data.F90	/^    integer :: ny /;"	L	subroutine:compute_dtilde	file:
ny	cmfd_data.F90	/^    integer :: ny /;"	L	subroutine:compute_effective_downscatter	file:
ny	cmfd_data.F90	/^    integer :: ny /;"	L	subroutine:compute_xs	file:
ny	cmfd_data.F90	/^    integer :: ny /;"	L	subroutine:fix_neutron_balance	file:
ny	cmfd_data.F90	/^    integer :: ny /;"	L	subroutine:neutron_balance	file:
ny	cmfd_data.F90	/^    integer :: ny /;"	L	subroutine:set_coremap	file:
ny	cmfd_execute.F90	/^    integer :: ny /;"	L	subroutine:calc_fission_source	file:
ny	cmfd_execute.F90	/^    integer :: ny /;"	L	subroutine:cmfd_reweight	file:
ny	cmfd_execute.F90	/^    integer, intent(in) :: ny /;"	L	function:get_matrix_idx	file:
ny	cmfd_header.F90	/^    integer :: ny /;"	L	subroutine:allocate_cmfd	file:
ny	cmfd_loss_operator.F90	/^    integer :: ny /;"	L	subroutine:build_loss_matrix	file:
ny	cmfd_loss_operator.F90	/^    integer :: ny /;"	L	subroutine:init_loss_matrix	file:
ny	cmfd_loss_operator.F90	/^    integer, intent(in)  :: ny /;"	L	subroutine:indices_to_matrix	file:
ny	cmfd_loss_operator.F90	/^    integer, intent(in)  :: ny /;"	L	subroutine:matrix_to_indices	file:
ny	cmfd_loss_operator.F90	/^    integer, intent(in) :: ny /;"	L	function:preallocate_loss_matrix	file:
ny	cmfd_prod_operator.F90	/^    integer :: ny /;"	L	subroutine:build_prod_matrix	file:
ny	cmfd_prod_operator.F90	/^    integer :: ny /;"	L	subroutine:init_prod_matrix	file:
ny	cmfd_prod_operator.F90	/^    integer, intent(in)  :: ny /;"	L	subroutine:indices_to_matrix	file:
ny	cmfd_prod_operator.F90	/^    integer, intent(in)  :: ny /;"	L	subroutine:matrix_to_indices	file:
nz	cmfd_data.F90	/^    integer :: nz /;"	L	subroutine:compute_dhat	file:
nz	cmfd_data.F90	/^    integer :: nz /;"	L	subroutine:compute_dtilde	file:
nz	cmfd_data.F90	/^    integer :: nz /;"	L	subroutine:compute_effective_downscatter	file:
nz	cmfd_data.F90	/^    integer :: nz /;"	L	subroutine:compute_xs	file:
nz	cmfd_data.F90	/^    integer :: nz /;"	L	subroutine:fix_neutron_balance	file:
nz	cmfd_data.F90	/^    integer :: nz /;"	L	subroutine:neutron_balance	file:
nz	cmfd_data.F90	/^    integer :: nz /;"	L	subroutine:set_coremap	file:
nz	cmfd_execute.F90	/^    integer :: nz /;"	L	subroutine:calc_fission_source	file:
nz	cmfd_execute.F90	/^    integer :: nz /;"	L	subroutine:cmfd_reweight	file:
nz	cmfd_header.F90	/^    integer :: nz /;"	L	subroutine:allocate_cmfd	file:
nz	cmfd_loss_operator.F90	/^    integer :: nz /;"	L	subroutine:build_loss_matrix	file:
nz	cmfd_loss_operator.F90	/^    integer :: nz /;"	L	subroutine:init_loss_matrix	file:
nz	cmfd_loss_operator.F90	/^    integer, intent(in)  :: nz /;"	L	subroutine:matrix_to_indices	file:
nz	cmfd_loss_operator.F90	/^    integer, intent(in) :: nz /;"	L	function:preallocate_loss_matrix	file:
nz	cmfd_prod_operator.F90	/^    integer :: nz /;"	L	subroutine:build_prod_matrix	file:
nz	cmfd_prod_operator.F90	/^    integer :: nz /;"	L	subroutine:init_prod_matrix	file:
nz	cmfd_prod_operator.F90	/^    integer, intent(in)  :: nz /;"	L	subroutine:matrix_to_indices	file:
nz_c	cmfd_loss_operator.F90	/^    integer :: nz_c /;"	L	subroutine:init_loss_matrix	file:
nz_count	matrix_header.F90	/^    integer :: nz_count /;"	k	type:Matrix
nz_e	cmfd_loss_operator.F90	/^    integer :: nz_e /;"	L	subroutine:init_loss_matrix	file:
nz_i	cmfd_loss_operator.F90	/^    integer :: nz_i /;"	L	subroutine:init_loss_matrix	file:
nz_s	cmfd_loss_operator.F90	/^    integer :: nz_s /;"	L	subroutine:init_loss_matrix	file:
obj	interpolation.F90	/^    type(Tab1), intent(in) :: obj /;"	L	function:interpolate_tab1_object	file:
observations	clustering.F90	/^    real(8), allocatable :: observations(/;"	L	subroutine:cluster_one_nuclide	file:
observations	clustering.F90	/^    real(8), allocatable :: observations(/;"	L	subroutine:write_clustering	file:
observations	clustering_kmeans.F90	/^    real(8), allocatable, intent(in) :: observations(/;"	L	subroutine:kms_compute_distances	file:
observations	clustering_kmeans.F90	/^    real(8), allocatable, intent(in) :: observations(/;"	L	subroutine:kms_uniform_clust_cen	file:
observations	clustering_kmeans.F90	/^    real(8), allocatable, intent(in) :: observations(/;"	L	subroutine:kms_update_clust_cen	file:
observations	clustering_kmeans.F90	/^    real(8), allocatable, intent(in) :: observations(/;"	L	subroutine:perform_kms	file:
observations	clustering_kmeans.F90	/^    real(8), allocatable, intent(in) :: observations(/;"	L	subroutine:print_kms	file:
offset_fast	ace_header.F90	/^    integer :: offset_fast /;"	k	type:RrrData
offset_fast_new	clustering.F90	/^    integer :: offset_rrr, offset_fast_old, offset_fast_new /;"	L	subroutine:condense_one_xs	file:
offset_fast_old	clustering.F90	/^    integer :: offset_rrr, offset_fast_old,/;"	L	subroutine:condense_one_xs	file:
offset_rrr	ace_header.F90	/^    integer :: offset_rrr /;"	k	type:RrrData
offset_rrr	clustering.F90	/^    integer :: offset_rrr /;"	L	subroutine:reorder_clusters	file:
offset_rrr	clustering.F90	/^    integer :: offset_rrr,/;"	L	subroutine:condense_one_xs	file:
old_L2_err	clustering_kmeans.F90	/^    real(8) :: old_L2_err,/;"	L	subroutine:perform_kms	file:
old_Linf_err	clustering_kmeans.F90	/^    real(8) :: old_L2_err, old_Linf_err /;"	L	subroutine:perform_kms	file:
on_surface	geometry.F90	/^    logical :: on_surface /;"	L	subroutine:distance_to_boundary	file:
open_group	output_interface.F90	/^  subroutine open_group(/;"	s	module:output_interface
open_mode	hdf5_interface.F90	/^    integer        :: open_mode /;"	L	subroutine:hdf5_file_open_parallel	file:
open_mode	hdf5_interface.F90	/^    integer :: open_mode /;"	L	subroutine:hdf5_file_open	file:
open_mode	mpiio_interface.F90	/^    integer :: open_mode$/;"	L	subroutine:mpi_open_file	file:
open_xmldoc	xml_interface.F90	/^  subroutine open_xmldoc(/;"	s	module:xml_interface
openmc_src	cmfd_header.F90	/^    real(8), allocatable :: openmc_src(/;"	k	type:cmfd_type
origin	plot_header.F90	/^    real(8) :: origin(/;"	k	type:ObjectPlot
ou	output.F90	/^  integer :: ou /;"	v	module:output
out_i	plot.F90	/^    integer :: out_i$/;"	L	subroutine:create_ppm	file:
out_pixel	plot.F90	/^    real(8) :: out_pixel$/;"	L	subroutine:create_ppm	file:
out_ptr	xml_interface.F90	/^    type(Node), pointer, intent(out) :: out_ptr$/;"	L	subroutine:get_list_item	file:
out_ptr	xml_interface.F90	/^    type(Node), pointer, intent(out) :: out_ptr$/;"	L	subroutine:get_node	file:
out_ptr	xml_interface.F90	/^    type(Node), pointer, intent(out) :: out_ptr$/;"	L	subroutine:get_node_ptr	file:
out_ptr	xml_interface.F90	/^    type(NodeList), pointer, intent(out) :: out_ptr$/;"	L	subroutine:get_node_list	file:
output	output.F90	/^module output$/;"	m
output_interface	output_interface.F90	/^module output_interface$/;"	m
output_ppm	plot.F90	/^  subroutine output_ppm(/;"	s	module:plot
outside	cmfd_execute.F90	/^    logical :: outside /;"	L	subroutine:cmfd_reweight	file:
outside	geometry_header.F90	/^     integer              :: outside /;"	k	type:Lattice
outside	mesh.F90	/^    logical :: outside /;"	L	subroutine:count_bank_sites	file:
outside_lattice	geometry.F90	/^    logical :: outside_lattice /;"	L	subroutine:find_cell	file:
p	cross_section.F90	/^    type/;"	L	subroutine:calculate_xs	file:
p	eigenvalue.F90	/^    type/;"	L	subroutine:run_eigenvalue	file:
p	fixed_source.F90	/^    type/;"	L	subroutine:sample_source_particle	file:
p	geometry.F90	/^    type/;"	L	function:sense	file:
p	geometry.F90	/^    type/;"	L	function:simple_cell_contains	file:
p	geometry.F90	/^    type/;"	L	subroutine:check_cell_overlap	file:
p	geometry.F90	/^    type/;"	L	subroutine:cross_lattice	file:
p	geometry.F90	/^    type/;"	L	subroutine:cross_surface	file:
p	geometry.F90	/^    type/;"	L	subroutine:distance_to_boundary	file:
p	geometry.F90	/^    type/;"	L	subroutine:find_cell	file:
p	geometry.F90	/^    type/;"	L	subroutine:handle_lost_particle	file:
p	math.F90	/^    real(8), intent(in) :: p /;"	L	function:normal_percentile	file:
p	math.F90	/^    real(8), intent(in) :: p /;"	L	function:t_percentile	file:
p	output.F90	/^    type/;"	L	subroutine:print_particle	file:
p	particle_restart.F90	/^    type/;"	L	subroutine:read_particle_restart	file:
p	particle_restart.F90	/^    type/;"	L	subroutine:run_particle_restart	file:
p	particle_restart_write.F90	/^    type/;"	L	subroutine:write_particle_restart	file:
p	physics.F90	/^    type/;"	L	function:sample_nuclide	file:
p	physics.F90	/^    type/;"	L	subroutine:absorption	file:
p	physics.F90	/^    type/;"	L	subroutine:collision	file:
p	physics.F90	/^    type/;"	L	subroutine:create_fission_sites	file:
p	physics.F90	/^    type/;"	L	subroutine:russian_roulette	file:
p	physics.F90	/^    type/;"	L	subroutine:sample_reaction	file:
p	physics.F90	/^    type/;"	L	subroutine:scatter	file:
p	plot.F90	/^    type/;"	L	subroutine:create_3d_dump	file:
p	plot.F90	/^    type/;"	L	subroutine:create_ppm	file:
p	plot.F90	/^    type/;"	L	subroutine:position_rgb	file:
p	source.F90	/^    type/;"	L	subroutine:copy_source_attributes	file:
p	source.F90	/^    type/;"	L	subroutine:get_source_particle	file:
p	source.F90	/^    type/;"	L	subroutine:sample_external_source	file:
p	tally.F90	/^    type/;"	L	subroutine:get_scoring_bins	file:
p	tally.F90	/^    type/;"	L	subroutine:score_all_nuclides	file:
p	tally.F90	/^    type/;"	L	subroutine:score_analog_tally	file:
p	tally.F90	/^    type/;"	L	subroutine:score_fission_eout	file:
p	tally.F90	/^    type/;"	L	subroutine:score_surface_current	file:
p	tally.F90	/^    type/;"	L	subroutine:score_tl_on_mesh	file:
p	tally.F90	/^    type/;"	L	subroutine:score_tracklength_tally	file:
p	track_output.F90	/^    type/;"	L	subroutine:finalize_particle_track	file:
p	track_output.F90	/^    type/;"	L	subroutine:write_particle_track	file:
p	tracking.F90	/^    type/;"	L	subroutine:transport	file:
p0	physics.F90	/^    real(8)        :: p0,/;"	L	function:sample_angle	file:
p1	physics.F90	/^    real(8)        :: p0,p1 /;"	L	function:sample_angle	file:
p1scattxs	cmfd_header.F90	/^    real(8), allocatable :: p1scattxs(/;"	k	type:cmfd_type
p_k	physics.F90	/^    real(8) :: p_k /;"	L	subroutine:sample_energy	file:
p_k1	physics.F90	/^    real(8) :: p_k1 /;"	L	subroutine:sample_energy	file:
p_l_k	physics.F90	/^    real(8) :: p_l_k,/;"	L	subroutine:sample_energy	file:
p_l_k1	physics.F90	/^    real(8) :: p_l_k, p_l_k1 /;"	L	subroutine:sample_energy	file:
p_low	math.F90	/^    real(8), parameter :: p_low /;"	L	function:normal_percentile	file:
p_max	source.F90	/^    real(8) :: p_max(/;"	L	subroutine:sample_external_source	file:
p_min	source.F90	/^    real(8) :: p_min(/;"	L	subroutine:sample_external_source	file:
p_sample	eigenvalue.F90	/^    real(8)    :: p_sample /;"	L	subroutine:synchronize_bank	file:
p_valid	ace_header.F90	/^    type(Tab1) :: p_valid /;"	k	type:DistEnergy
p_valid	physics.F90	/^    real(8) :: p_valid /;"	L	subroutine:sample_energy	file:
pair_list	initialize.F90	/^    type(ElemKeyValueII), pointer :: pair_list /;"	L	subroutine:prepare_universes	file:
pair_list	input_xml.F90	/^    type(ElemKeyValueCI), pointer :: pair_list /;"	L	subroutine:read_tallies_xml	file:
params_angle	source_header.F90	/^    real(8), allocatable :: params_angle(/;"	k	type:ExtSource
params_energy	source_header.F90	/^    real(8), allocatable :: params_energy(/;"	k	type:ExtSource
params_space	source_header.F90	/^    real(8), allocatable :: params_space(/;"	k	type:ExtSource
particle_header	particle_header.F90	/^module particle_header$/;"	m
particle_restart	particle_restart.F90	/^module particle_restart$/;"	m
particle_restart_write	particle_restart_write.F90	/^module particle_restart_write$/;"	m
particle_seed	particle_restart.F90	/^    integer(8) :: particle_seed$/;"	L	subroutine:run_particle_restart	file:
particle_seed	source.F90	/^    integer(8) :: particle_seed /;"	L	subroutine:get_source_particle	file:
path	ace_header.F90	/^    character(MAX_FILE_LEN) :: path /;"	k	type:XsListing
path	output.F90	/^    character(MAX_FILE_LEN)  :: path /;"	L	subroutine:write_xs_summary	file:
path	output.F90	/^    character(MAX_FILE_LEN) :: path /;"	L	subroutine:write_summary	file:
path_plot	plot_header.F90	/^    character(MAX_LINE_LEN) :: path_plot /;"	k	type:ObjectPlot
path_temp	state_point.F90	/^    character(MAX_FILE_LEN) :: path_temp$/;"	L	subroutine:load_state_point	file:
pc_	solver_interface.F90	/^    type(pc)   :: pc_ /;"	k	type:JFNKSolver
pc_	solver_interface.F90	/^    type(pc)  :: pc_ /;"	k	type:GMRESSolver
pctype	cmfd_slepc_solver.F90	/^    character(LEN=20) :: epstype, sttype, ksptype, pctype$/;"	L	subroutine:init_solver	file:
percent_in_atom	initialize.F90	/^    logical        :: percent_in_atom /;"	L	subroutine:normalize_ao	file:
perform_kms	clustering_kmeans.F90	/^  subroutine perform_kms(/;"	s	module:clustering_kmeans
petsc_active	matrix_header.F90	/^    logical :: petsc_active$/;"	k	type:Matrix
petsc_active	vector_header.F90	/^    logical :: petsc_active /;"	k	type:Vector
petsc_err	matrix_header.F90	/^  integer :: petsc_err$/;"	v	module:matrix_header
petsc_err	solver_interface.F90	/^  integer :: petsc_err /;"	v
petsc_err	vector_header.F90	/^  integer :: petsc_err /;"	v	module:vector_header
petsc_gmres_create	solver_interface.F90	/^  subroutine petsc_gmres_create(/;"	s
petsc_gmres_destroy	solver_interface.F90	/^  subroutine petsc_gmres_destroy(/;"	s
petsc_gmres_set_oper	solver_interface.F90	/^  subroutine petsc_gmres_set_oper(/;"	s
petsc_gmres_solve	solver_interface.F90	/^  subroutine petsc_gmres_solve(/;"	s
petsc_jfnk_compute_jacobian	solver_interface.F90	/^  subroutine petsc_jfnk_compute_jacobian(/;"	s
petsc_jfnk_compute_residual	solver_interface.F90	/^  subroutine petsc_jfnk_compute_residual(/;"	s
petsc_jfnk_create	solver_interface.F90	/^  subroutine petsc_jfnk_create(/;"	s
petsc_jfnk_destroy	solver_interface.F90	/^  subroutine petsc_jfnk_destroy(/;"	s
petsc_jfnk_set_functions	solver_interface.F90	/^  subroutine petsc_jfnk_set_functions(/;"	s
petsc_jfnk_solve	solver_interface.F90	/^  subroutine petsc_jfnk_solve(/;"	s
petsc_mat	matrix_header.F90	/^    type(mat) :: petsc_mat$/;"	k	type:Matrix
petsc_vec	vector_header.F90	/^    type(vec) :: petsc_vec /;"	k	type:Vector
phi	cmfd_header.F90	/^    real(8), allocatable :: phi(/;"	k	type:cmfd_type
phi	input_xml.F90	/^    real(8) :: phi,/;"	L	subroutine:read_geometry_xml	file:
phi	math.F90	/^    real(8) :: phi,/;"	L	function:calc_rn	file:
phi	physics.F90	/^    real(8) :: phi /;"	L	function:rotate_angle	file:
phi	physics.F90	/^    real(8) :: phi /;"	L	subroutine:create_fission_sites	file:
phi	source.F90	/^    real(8) :: phi /;"	L	subroutine:sample_external_source	file:
phi_n	cmfd_power_solver.F90	/^  type(Vector) :: phi_n /;"	v	module:cmfd_power_solver
phi_o	cmfd_power_solver.F90	/^  type(Vector) :: phi_o /;"	v	module:cmfd_power_solver
physical_adjoint	cmfd_jfnk_solver.F90	/^    logical :: physical_adjoint /;"	L	subroutine:init_data	file:
physical_adjoint	cmfd_power_solver.F90	/^    logical :: physical_adjoint /;"	L	subroutine:cmfd_power_execute	file:
physics	physics.F90	/^module physics$/;"	m
pivot	matrix_header.F90	/^    integer :: pivot /;"	L	subroutine:split	file:
pixels	plot_header.F90	/^    integer :: pixels(/;"	k	type:ObjectPlot
pl	input_xml.F90	/^    type(ObjectPlot), pointer :: pl /;"	L	subroutine:read_plots_xml	file:
pl	output.F90	/^    type(ObjectPlot), pointer :: pl /;"	L	subroutine:print_plot	file:
pl	plot.F90	/^    type(ObjectPlot), pointer :: pl /;"	L	subroutine:run_plot	file:
pl	plot.F90	/^    type(ObjectPlot), pointer :: pl$/;"	L	subroutine:create_3d_dump	file:
pl	plot.F90	/^    type(ObjectPlot), pointer :: pl$/;"	L	subroutine:create_ppm	file:
pl	plot.F90	/^    type(ObjectPlot), pointer :: pl$/;"	L	subroutine:output_ppm	file:
pl	plot.F90	/^    type(ObjectPlot), pointer, intent(in) :: pl$/;"	L	subroutine:position_rgb	file:
plist	hdf5_interface.F90	/^  integer(HID_T)   :: plist /;"	v	module:hdf5_interface
plot	plot.F90	/^module plot$/;"	m
plot_dict	global.F90	/^  type(DictIntInt) :: plot_dict$/;"	v	module:global
plot_header	plot_header.F90	/^module plot_header$/;"	m
plots	global.F90	/^  type(ObjectPlot),allocatable, target :: plots(/;"	v	module:global
pn_string	output.F90	/^    character(MAX_WORD_LEN) :: pn_string$/;"	L	subroutine:print_tally	file:
pnx	math.F90	/^    real(8)             :: pnx /;"	L	function:calc_pn	file:
position	tally.F90	/^  integer :: position(/;"	v	module:tally
position_rgb	plot.F90	/^  subroutine position_rgb(/;"	s	module:plot
positive	geometry.F90	/^    logical :: positive /;"	L	subroutine:neighbor_lists	file:
ppmlib	ppmlib.F90	/^module ppmlib$/;"	m
pr	particle_restart.F90	/^  type(BinaryOutput) :: pr$/;"	v	module:particle_restart
pr	particle_restart_write.F90	/^  type(BinaryOutput) :: pr$/;"	v	module:particle_restart_write
preallocate_loss_matrix	cmfd_loss_operator.F90	/^  function preallocate_loss_matrix(/;"	f	module:cmfd_loss_operator
prepare_universes	initialize.F90	/^  subroutine prepare_universes(/;"	s	module:initialize
prev	list_header.F90	/^    type(ListElemChar), pointer :: prev /;"	k	type:ListElemChar
prev	list_header.F90	/^    type(ListElemInt), pointer :: prev /;"	k	type:ListElemInt
prev	list_header.F90	/^    type(ListElemReal), pointer :: prev /;"	k	type:ListElemReal
print_batch_keff	output.F90	/^  subroutine print_batch_keff(/;"	s	module:output
print_cell	output.F90	/^  subroutine print_cell(/;"	s	module:output
print_columns	output.F90	/^  subroutine print_columns(/;"	s	module:output
print_ebin	output.F90	/^    logical :: print_ebin /;"	L	subroutine:write_surface_current	file:
print_generation	output.F90	/^  subroutine print_generation(/;"	s	module:output
print_geometry	output.F90	/^  subroutine print_geometry(/;"	s	module:output
print_kms	clustering_kmeans.F90	/^  subroutine print_kms(/;"	s	module:clustering_kmeans
print_lattice	output.F90	/^  subroutine print_lattice(/;"	s	module:output
print_material	output.F90	/^  subroutine print_material(/;"	s	module:output
print_nuclide	output.F90	/^  subroutine print_nuclide(/;"	s	module:output
print_overlap_check	output.F90	/^  subroutine print_overlap_check$/;"	s	module:output
print_particle	output.F90	/^  subroutine print_particle(/;"	s	module:output
print_plot	output.F90	/^  subroutine print_plot(/;"	s	module:output
print_reaction	output.F90	/^  subroutine print_reaction(/;"	s	module:output
print_results	output.F90	/^  subroutine print_results(/;"	s	module:output
print_runtime	output.F90	/^  subroutine print_runtime(/;"	s	module:output
print_sab_table	output.F90	/^  subroutine print_sab_table(/;"	s	module:output
print_surface	output.F90	/^  subroutine print_surface(/;"	s	module:output
print_tally	output.F90	/^  subroutine print_tally(/;"	s	module:output
print_universe	output.F90	/^  subroutine print_universe(/;"	s	module:output
print_usage	output.F90	/^  subroutine print_usage(/;"	s	module:output
print_version	output.F90	/^  subroutine print_version(/;"	s	module:output
prn	random_lcg.F90	/^  function prn(/;"	f	module:random_lcg
prn_add	random_lcg.F90	/^  integer(8) :: prn_add /;"	v	module:random_lcg
prn_bits	random_lcg.F90	/^  integer    :: prn_bits /;"	v	module:random_lcg
prn_mask	random_lcg.F90	/^  integer(8) :: prn_mask /;"	v	module:random_lcg
prn_mod	random_lcg.F90	/^  integer(8) :: prn_mod /;"	v	module:random_lcg
prn_mult	random_lcg.F90	/^  integer(8) :: prn_mult /;"	v	module:random_lcg
prn_norm	random_lcg.F90	/^  real(8)    :: prn_norm /;"	v	module:random_lcg
prn_seed	random_lcg.F90	/^  integer(8) :: prn_seed(/;"	v	module:random_lcg
prn_seed0	random_lcg.F90	/^  integer(8) :: prn_seed0 /;"	v	module:random_lcg
prn_set_stream	random_lcg.F90	/^  subroutine prn_set_stream(/;"	s	module:random_lcg
prn_skip	random_lcg.F90	/^  subroutine prn_skip(/;"	s	module:random_lcg
prn_skip_ahead	random_lcg.F90	/^  function prn_skip_ahead(/;"	f	module:random_lcg
prn_stride	random_lcg.F90	/^  integer(8) :: prn_stride /;"	v	module:random_lcg
prob	ace_header.F90	/^    real(8), allocatable :: prob(/;"	k	type:UrrData
prob	physics.F90	/^    real(8) :: prob /;"	L	function:sample_fission_energy	file:
prob	physics.F90	/^    real(8) :: prob /;"	L	subroutine:sab_scatter	file:
prob	physics.F90	/^    real(8) :: prob$/;"	L	function:sample_nuclide	file:
prob	physics.F90	/^    real(8) :: prob$/;"	L	subroutine:sample_fission	file:
prob	physics.F90	/^    real(8) :: prob$/;"	L	subroutine:scatter	file:
process_cmfd_options	cmfd_execute.F90	/^  subroutine process_cmfd_options(/;"	s	module:cmfd_execute
prod	cmfd_jfnk_solver.F90	/^  type(Matrix)     :: prod /;"	v	module:cmfd_jfnk_solver
prod	cmfd_power_solver.F90	/^  type(Matrix) :: prod /;"	v	module:cmfd_power_solver
prod	cmfd_slepc_solver.F90	/^  type(prod_/;"	v	module:cmfd_slepc_solver
prod_matrix	cmfd_prod_operator.F90	/^    type(Matrix), intent(inout)   :: prod_matrix /;"	L	subroutine:build_prod_matrix	file:
prod_matrix	cmfd_prod_operator.F90	/^    type(Matrix), intent(inout) :: prod_matrix /;"	L	subroutine:init_prod_matrix	file:
progress	plot.F90	/^    type(ProgressBar) :: progress$/;"	L	subroutine:create_3d_dump	file:
progress	plot.F90	/^    type(ProgressBar) :: progress$/;"	L	subroutine:create_ppm	file:
progress_header	progress_header.F90	/^module progress_header$/;"	m
pseudo_rn	random_lcg.F90	/^    real(8) :: pseudo_rn$/;"	L	function:prn	file:
psi	input_xml.F90	/^    real(8) :: phi, theta, psi$/;"	L	subroutine:read_geometry_xml	file:
ptr	xml_interface.F90	/^    type(Node), pointer :: ptr$/;"	L	subroutine:close_xmldoc	file:
ptr	xml_interface.F90	/^    type(Node), pointer :: ptr$/;"	L	subroutine:open_xmldoc	file:
ptr	xml_interface.F90	/^    type(Node), pointer, intent(in) :: ptr$/;"	L	function:check_for_node	file:
ptr	xml_interface.F90	/^    type(Node), pointer, intent(in) :: ptr$/;"	L	function:get_arraysize_double	file:
ptr	xml_interface.F90	/^    type(Node), pointer, intent(in) :: ptr$/;"	L	function:get_arraysize_integer	file:
ptr	xml_interface.F90	/^    type(Node), pointer, intent(in) :: ptr$/;"	L	function:get_arraysize_string	file:
ptr	xml_interface.F90	/^    type(Node), pointer, intent(in) :: ptr$/;"	L	subroutine:get_node_array_double	file:
ptr	xml_interface.F90	/^    type(Node), pointer, intent(in) :: ptr$/;"	L	subroutine:get_node_array_integer	file:
ptr	xml_interface.F90	/^    type(Node), pointer, intent(in) :: ptr$/;"	L	subroutine:get_node_array_string	file:
ptr	xml_interface.F90	/^    type(Node), pointer, intent(in) :: ptr$/;"	L	subroutine:get_node_value_double	file:
ptr	xml_interface.F90	/^    type(Node), pointer, intent(in) :: ptr$/;"	L	subroutine:get_node_value_integer	file:
ptr	xml_interface.F90	/^    type(Node), pointer, intent(in) :: ptr$/;"	L	subroutine:get_node_value_long	file:
ptr	xml_interface.F90	/^    type(Node), pointer, intent(in) :: ptr$/;"	L	subroutine:get_node_value_string	file:
pwd	initialize.F90	/^    character(MAX_FILE_LEN) :: pwd /;"	L	subroutine:read_command_line	file:
q	math.F90	/^    real(8)            :: q$/;"	L	function:normal_percentile	file:
q	tally.F90	/^    integer :: q /;"	L	subroutine:score_all_nuclides	file:
q	tally.F90	/^    integer :: q /;"	L	subroutine:score_tl_on_mesh	file:
q	tally.F90	/^    integer :: q /;"	L	subroutine:score_tracklength_tally	file:
quad	geometry.F90	/^    real(8) :: quad /;"	L	subroutine:distance_to_boundary	file:
r	cross_section.F90	/^    re/;"	L	subroutine:calculate_urr_xs	file:
r	geometry.F90	/^    re/;"	L	function:sense	file:
r	geometry.F90	/^    re/;"	L	subroutine:distance_to_boundary	file:
r	interpolation.F90	/^    re/;"	L	function:interpolate_tab1_array	file:
r	interpolation.F90	/^    re/;"	L	function:interpolate_tab1_object	file:
r	math.F90	/^    re/;"	L	function:normal_percentile	file:
r	physics.F90	/^    re/;"	L	function:sample_angle	file:
r	physics.F90	/^    re/;"	L	subroutine:sab_scatter	file:
r	physics.F90	/^    re/;"	L	subroutine:sample_energy	file:
r	ppmlib.F90	/^    integer,/;"	L	subroutine:set_pixel	file:
r	source.F90	/^    re/;"	L	subroutine:sample_external_source	file:
r1	math.F90	/^    real(8) :: r1,/;"	L	function:maxwell_spectrum	file:
r1	physics.F90	/^    real(8) :: r1,/;"	L	subroutine:sample_energy	file:
r1	physics.F90	/^    real(8) :: r1,/;"	L	subroutine:sample_target_velocity	file:
r2	math.F90	/^    real(8) :: r1, r2,/;"	L	function:maxwell_spectrum	file:
r2	physics.F90	/^    real(8) :: r1, r2 /;"	L	subroutine:sample_target_velocity	file:
r2	physics.F90	/^    real(8) :: r1, r2,/;"	L	subroutine:sample_energy	file:
r3	math.F90	/^    real(8) :: r1, r2, r3 /;"	L	function:maxwell_spectrum	file:
r3	physics.F90	/^    real(8) :: r1, r2, r3,/;"	L	subroutine:sample_energy	file:
r4	physics.F90	/^    real(8) :: r1, r2, r3, r4,/;"	L	subroutine:sample_energy	file:
r5	physics.F90	/^    real(8) :: r1, r2, r3, r4, r5,/;"	L	subroutine:sample_energy	file:
r6	physics.F90	/^    real(8) :: r1, r2, r3, r4, r5, r6$/;"	L	subroutine:sample_energy	file:
random_lcg	random_lcg.F90	/^module random_lcg$/;"	m
rarray3	cmfd_input.F90	/^    real(8) :: rarray3(/;"	L	subroutine:create_cmfd_tally	file:
rarray3	input_xml.F90	/^    real(8) :: rarray3(/;"	L	subroutine:read_tallies_xml	file:
reaction_clear	ace_header.F90	/^    subroutine reaction_clear(/;"	s	module:ace_header
reaction_name	endf.F90	/^  function reaction_name(/;"	f	module:endf
reactions	ace_header.F90	/^    type(Reaction), pointer :: reactions(/;"	k	type:Nuclide
read_ace_table	ace.F90	/^  subroutine read_ace_table(/;"	s	module:ace
read_angular_dist	ace.F90	/^  subroutine read_angular_dist(/;"	s	module:ace
read_cmfd_xml	cmfd_input.F90	/^  subroutine read_cmfd_xml(/;"	s	module:cmfd_input
read_command_line	initialize.F90	/^  subroutine read_command_line(/;"	s	module:initialize
read_cross_sections_xml	input_xml.F90	/^  subroutine read_cross_sections_xml(/;"	s	module:input_xml
read_double	output_interface.F90	/^  subroutine read_double(/;"	s	module:output_interface
read_double_1Darray	output_interface.F90	/^  subroutine read_double_1Darray(/;"	s	module:output_interface
read_double_2Darray	output_interface.F90	/^  subroutine read_double_2Darray(/;"	s	module:output_interface
read_double_3Darray	output_interface.F90	/^  subroutine read_double_3Darray(/;"	s	module:output_interface
read_double_4Darray	output_interface.F90	/^  subroutine read_double_4Darray(/;"	s	module:output_interface
read_energy_dist	ace.F90	/^  subroutine read_energy_dist(/;"	s	module:ace
read_esz	ace.F90	/^  subroutine read_esz(/;"	s	module:ace
read_geometry_xml	input_xml.F90	/^  subroutine read_geometry_xml(/;"	s	module:input_xml
read_input_xml	input_xml.F90	/^  subroutine read_input_xml(/;"	s	module:input_xml
read_integer	output_interface.F90	/^  subroutine read_integer(/;"	s	module:output_interface
read_integer_1Darray	output_interface.F90	/^  subroutine read_integer_1Darray(/;"	s	module:output_interface
read_integer_2Darray	output_interface.F90	/^  subroutine read_integer_2Darray(/;"	s	module:output_interface
read_integer_3Darray	output_interface.F90	/^  subroutine read_integer_3Darray(/;"	s	module:output_interface
read_integer_4Darray	output_interface.F90	/^  subroutine read_integer_4Darray(/;"	s	module:output_interface
read_long	output_interface.F90	/^  subroutine read_long(/;"	s	module:output_interface
read_materials_xml	input_xml.F90	/^  subroutine read_materials_xml(/;"	s	module:input_xml
read_nu_data	ace.F90	/^  subroutine read_nu_data(/;"	s	module:ace
read_particle_restart	particle_restart.F90	/^  subroutine read_particle_restart(/;"	s	module:particle_restart
read_plots_xml	input_xml.F90	/^  subroutine read_plots_xml(/;"	s	module:input_xml
read_reactions	ace.F90	/^  subroutine read_reactions(/;"	s	module:ace
read_settings_xml	input_xml.F90	/^  subroutine read_settings_xml(/;"	s	module:input_xml
read_source	state_point.F90	/^  subroutine read_source$/;"	s	module:state_point
read_source_bank	output_interface.F90	/^  subroutine read_source_bank(/;"	s	module:output_interface
read_string	output_interface.F90	/^  subroutine read_string(/;"	s	module:output_interface
read_tallies_xml	input_xml.F90	/^  subroutine read_tallies_xml(/;"	s	module:input_xml
read_tally_result	output_interface.F90	/^  subroutine read_tally_result(/;"	s	module:output_interface
read_thermal_data	ace.F90	/^  subroutine read_thermal_data(/;"	s	module:ace
read_unr_res	ace.F90	/^  subroutine read_unr_res(/;"	s	module:ace
read_xs	ace.F90	/^  subroutine read_xs(/;"	s	module:ace
readable	ace.F90	/^    character(7)  :: readable /;"	L	subroutine:read_ace_table	file:
real_array	state_point.F90	/^    real(8)                 :: real_array(/;"	L	subroutine:load_state_point	file:
real_bins	tally_header.F90	/^    real(8), allocatable :: real_bins(/;"	k	type:TallyFilter
real_to_str	string.F90	/^  function real_to_str(/;"	f	module:string
recl	ace_header.F90	/^    integer       :: recl /;"	k	type:XsListing
recl	input_xml.F90	/^    integer :: recl /;"	L	subroutine:read_cross_sections_xml	file:
record_length	ace.F90	/^    integer       :: record_length /;"	L	subroutine:read_ace_table	file:
red	ppmlib.F90	/^    integer, dimension(:,:), pointer :: red,/;"	k	type:Image
reduce_overlap_count	finalize.F90	/^  subroutine reduce_overlap_count(/;"	s	module:finalize
reduce_tally_results	tally.F90	/^  subroutine reduce_tally_results(/;"	s	module:tally
ref_albedo	cmfd_data.F90	/^    real(8) :: ref_albedo /;"	L	subroutine:compute_dtilde	file:
remainder	initialize.F90	/^    integer    :: remainder /;"	L	subroutine:calculate_work	file:
reorder_clusters	clustering.F90	/^  subroutine reorder_clusters(/;"	s	module:clustering
replay_batch_history	eigenvalue.F90	/^  subroutine replay_batch_history$/;"	s	module:eigenvalue
request	eigenvalue.F90	/^    integer    :: request(/;"	L	subroutine:synchronize_bank	file:
res	cmfd_data.F90	/^    real(8) :: res /;"	L	subroutine:neutron_balance	file:
res	cmfd_jfnk_solver.F90	/^    type(Vector), intent(inout) :: res /;"	L	subroutine:compute_nonlinear_residual	file:
res	solver_interface.F90	/^    type(vec), intent(inout)      :: res /;"	L	subroutine:petsc_jfnk_compute_residual	file:
res_loss	cmfd_jfnk_solver.F90	/^    type(Vector)      :: res_loss$/;"	L	subroutine:compute_nonlinear_residual	file:
res_prod	cmfd_jfnk_solver.F90	/^    type(Vector)      :: res_prod$/;"	L	subroutine:compute_nonlinear_residual	file:
reset	tally_header.F90	/^    logical :: reset /;"	k	type:TallyObject
reset_result	tally.F90	/^  elemental subroutine reset_result(/;"	s	module:tally
resnb	cmfd_header.F90	/^    real(8), allocatable :: resnb(/;"	k	type:cmfd_type
result_base_disp	initialize.F90	/^    integer(MPI_ADDRESS_KIND) :: result_base_disp /;"	L	subroutine:initialize_mpi	file:
result_blocks	initialize.F90	/^    integer                   :: result_blocks(/;"	L	subroutine:initialize_mpi	file:
result_disp	initialize.F90	/^    integer(MPI_ADDRESS_KIND) :: result_disp(/;"	L	subroutine:initialize_mpi	file:
result_double	xml_interface.F90	/^    real(8) :: result_double$/;"	L	subroutine:get_node_value_double	file:
result_double	xml_interface.F90	/^    real(8) :: result_double(/;"	L	subroutine:get_node_array_double	file:
result_int	xml_interface.F90	/^    integer :: result_int$/;"	L	subroutine:get_node_value_integer	file:
result_int	xml_interface.F90	/^    integer :: result_int(/;"	L	subroutine:get_node_array_integer	file:
result_long	xml_interface.F90	/^    integer(8) :: result_long$/;"	L	subroutine:get_node_value_long	file:
result_str	xml_interface.F90	/^    character(len=*) :: result_str$/;"	L	subroutine:get_node_value_string	file:
result_string	xml_interface.F90	/^    character(len=*) :: result_string(/;"	L	subroutine:get_node_array_string	file:
result_types	initialize.F90	/^    integer                   :: result_types(/;"	L	subroutine:initialize_mpi	file:
results	tally_header.F90	/^    type(TallyResult), allocatable :: results(/;"	k	type:TallyObject
resvec	cmfd_jfnk_solver.F90	/^  type(Vector)     :: resvec /;"	v	module:cmfd_jfnk_solver
resvec	solver_interface.F90	/^    type(Vector) :: resvec /;"	L	subroutine:petsc_jfnk_compute_residual	file:
rgb	plot.F90	/^    integer :: rgb(/;"	L	subroutine:create_3d_dump	file:
rgb	plot.F90	/^    integer :: rgb(/;"	L	subroutine:create_ppm	file:
rgb	plot.F90	/^    integer, intent(out)                  :: rgb(/;"	L	subroutine:position_rgb	file:
rgb	plot_header.F90	/^    integer :: rgb(/;"	k	type:ObjectColor
right	matrix_header.F90	/^    integer :: right /;"	L	subroutine:split	file:
rms	cmfd_data.F90	/^    real(8) :: rms /;"	L	subroutine:neutron_balance	file:
rn	math.F90	/^    real(8)             :: rn(/;"	L	function:calc_rn	file:
rotate_angle	physics.F90	/^  function rotate_angle(/;"	f	module:physics
rotated	particle_header.F90	/^    logical :: rotated /;"	k	type:LocalCoord
rotation	geometry_header.F90	/^     real(8), allocatable :: rotation(/;"	k	type:Cell
row	matrix_header.F90	/^    integer, allocatable :: row(/;"	k	type:Matrix
row_end	cmfd_slepc_solver.F90	/^    integer              :: row_end /;"	L	subroutine:extract_results	file:
row_start	cmfd_slepc_solver.F90	/^    integer              :: row_start /;"	L	subroutine:extract_results	file:
rrr_cluster	ace_header.F90	/^    logical                :: rrr_cluster /;"	k	type:Nuclide
rrr_data	ace_header.F90	/^    type(RrrData), pointer :: rrr_data /;"	k	type:Nuclide
rrrdata_clear	ace_header.F90	/^    subroutine rrrdata_clear(/;"	s	module:ace_header
rswap	matrix_header.F90	/^    real(8) :: rswap /;"	L	subroutine:split	file:
run_eigenvalue	eigenvalue.F90	/^  subroutine run_eigenvalue(/;"	s	module:eigenvalue
run_particle_restart	particle_restart.F90	/^  subroutine run_particle_restart(/;"	s	module:particle_restart
run_plot	plot.F90	/^  subroutine run_plot(/;"	s	module:plot
running	timer_header.F90	/^    logical :: running /;"	k	type:Timer
russian_roulette	physics.F90	/^  subroutine russian_roulette(/;"	s	module:physics
rxn	ace.F90	/^    type(Reaction), pointer :: rxn /;"	L	subroutine:read_angular_dist	file:
rxn	ace.F90	/^    type(Reaction), pointer :: rxn /;"	L	subroutine:read_energy_dist	file:
rxn	ace.F90	/^    type(Reaction), pointer :: rxn /;"	L	subroutine:read_reactions	file:
rxn	output.F90	/^    type(Reaction), pointer :: rxn /;"	L	subroutine:print_nuclide	file:
rxn	output.F90	/^    type(Reaction), pointer :: rxn$/;"	L	subroutine:print_reaction	file:
rxn	physics.F90	/^    type(Reaction), pointer    :: rxn /;"	L	function:sample_angle	file:
rxn	physics.F90	/^    type(Reaction), pointer :: rxn$/;"	L	function:sample_fission_energy	file:
rxn	physics.F90	/^    type(Reaction), pointer :: rxn$/;"	L	subroutine:elastic_scatter	file:
rxn	physics.F90	/^    type(Reaction), pointer :: rxn$/;"	L	subroutine:inelastic_scatter	file:
s	geometry.F90	/^    logical                       :: s /;"	L	function:sense	file:
s	geometry.F90	/^    type(Surface), pointer, sa/;"	L	function:simple_cell_contains	file:
s	output.F90	/^    type(Surface),     pointer :: s /;"	L	subroutine:print_geometry	file:
s_n	cmfd_power_solver.F90	/^  type(Vector) :: s_n /;"	v	module:cmfd_power_solver
s_o	cmfd_power_solver.F90	/^  type(Vector) :: s_o /;"	v	module:cmfd_power_solver
s_tol	cmfd_power_solver.F90	/^    real(8), intent(in), optional :: s_tol /;"	L	subroutine:cmfd_power_execute	file:
sab	cross_section.F90	/^    type(SAlphaBeta), pointer, save :: sab /;"	L	subroutine:calculate_sab_xs	file:
sab	output.F90	/^    type(SAlphaBeta), pointer :: sab$/;"	L	subroutine:print_sab_table	file:
sab	physics.F90	/^    type(SAlphaBeta), pointer, save :: sab /;"	L	subroutine:sab_scatter	file:
sab_dict	global.F90	/^  type(DictCharInt) :: sab_dict$/;"	v	module:global
sab_names	material_header.F90	/^    character(12), allocatable :: sab_names(/;"	k	type:Material
sab_scatter	physics.F90	/^  subroutine sab_scatter(/;"	s	module:physics
sab_tables	global.F90	/^  type(SAlphaBeta), allocatable, target :: sab_tables(/;"	v	module:global
sample_angle	physics.F90	/^  function sample_angle(/;"	f	module:physics
sample_energy	physics.F90	/^  recursive subroutine sample_energy(/;"	s	module:physics
sample_external_source	source.F90	/^  subroutine sample_external_source(/;"	s	module:source
sample_fission	physics.F90	/^  subroutine sample_fission(/;"	s	module:physics
sample_fission_energy	physics.F90	/^  function sample_fission_energy(/;"	f	module:physics
sample_nuclide	physics.F90	/^  function sample_nuclide(/;"	f	module:physics
sample_reaction	physics.F90	/^  subroutine sample_reaction(/;"	s	module:physics
sample_source_particle	fixed_source.F90	/^  subroutine sample_source_particle(/;"	s
sample_target_velocity	physics.F90	/^  subroutine sample_target_velocity(/;"	s	module:physics
sarray	input_xml.F90	/^    character(MAX_WORD_LEN), allocatable :: sarray(/;"	L	subroutine:read_tallies_xml	file:
scatt_mat_idx	cmfd_loss_operator.F90	/^    integer :: scatt_mat_idx /;"	L	function:preallocate_loss_matrix	file:
scatt_mat_idx	cmfd_loss_operator.F90	/^    integer :: scatt_mat_idx /;"	L	subroutine:build_loss_matrix	file:
scatter	physics.F90	/^  subroutine scatter(/;"	s	module:physics
scatter_event	endf.F90	/^    logical             :: scatter_event$/;"	L	function:is_scatter	file:
scatter_in_cm	ace_header.F90	/^    logical :: scatter_in_cm /;"	k	type:Reaction
scattering	cmfd_data.F90	/^    real(8) :: scattering /;"	L	subroutine:neutron_balance	file:
scattxs	cmfd_header.F90	/^    real(8), allocatable :: scattxs(/;"	k	type:cmfd_type
scattxsgg	cmfd_loss_operator.F90	/^    real(8) :: scattxsgg /;"	L	subroutine:build_loss_matrix	file:
scattxshg	cmfd_loss_operator.F90	/^    real(8) :: scattxshg /;"	L	subroutine:build_loss_matrix	file:
score	tally.F90	/^    real(8) :: score /;"	L	subroutine:score_all_nuclides	file:
score	tally.F90	/^    real(8) :: score /;"	L	subroutine:score_analog_tally	file:
score	tally.F90	/^    real(8) :: score /;"	L	subroutine:score_fission_eout	file:
score	tally.F90	/^    real(8) :: score /;"	L	subroutine:score_tl_on_mesh	file:
score	tally.F90	/^    real(8) :: score /;"	L	subroutine:score_tracklength_tally	file:
score_all_nuclides	tally.F90	/^  subroutine score_all_nuclides(/;"	s	module:tally
score_analog_tally	tally.F90	/^  subroutine score_analog_tally(/;"	s	module:tally
score_bin	tally.F90	/^    integer :: score_bin /;"	L	subroutine:score_all_nuclides	file:
score_bin	tally.F90	/^    integer :: score_bin /;"	L	subroutine:score_analog_tally	file:
score_bin	tally.F90	/^    integer :: score_bin /;"	L	subroutine:score_tl_on_mesh	file:
score_bin	tally.F90	/^    integer :: score_bin /;"	L	subroutine:score_tracklength_tally	file:
score_bins	tally_header.F90	/^    integer, allocatable :: score_bins(/;"	k	type:TallyObject
score_fission_eout	tally.F90	/^  subroutine score_fission_eout(/;"	s	module:tally
score_index	cmfd_data.F90	/^    integer :: score_index /;"	L	subroutine:compute_xs	file:
score_index	output.F90	/^    integer :: score_index /;"	L	subroutine:write_tallies	file:
score_index	tally.F90	/^    integer :: score_index /;"	L	subroutine:score_all_nuclides	file:
score_index	tally.F90	/^    integer :: score_index /;"	L	subroutine:score_analog_tally	file:
score_index	tally.F90	/^    integer :: score_index /;"	L	subroutine:score_tl_on_mesh	file:
score_index	tally.F90	/^    integer :: score_index /;"	L	subroutine:score_tracklength_tally	file:
score_name	input_xml.F90	/^    character(MAX_WORD_LEN) :: score_name$/;"	L	subroutine:read_tallies_xml	file:
score_name	output.F90	/^    character(36)           :: score_name /;"	L	subroutine:write_tallies	file:
score_names	output.F90	/^    character(36)           :: score_names(/;"	L	subroutine:write_tallies	file:
score_surface_current	tally.F90	/^  subroutine score_surface_current(/;"	s	module:tally
score_tl_on_mesh	tally.F90	/^  subroutine score_tl_on_mesh(/;"	s	module:tally
score_tracklength_tally	tally.F90	/^  subroutine score_tracklength_tally(/;"	s	module:tally
search	search.F90	/^module search$/;"	m
search_cells	geometry.F90	/^    integer,        optional      :: search_cells(/;"	L	subroutine:find_cell	file:
secondary_mode	ace_header.F90	/^    integer :: secondary_mode /;"	k	type:SAlphaBeta
seed	random_lcg.F90	/^    integer(8), intent(in) :: seed /;"	L	function:prn_skip_ahead	file:
sense	geometry.F90	/^  recursive function sense(/;"	f	module:geometry
seq	string.F90	/^    character(*) :: seq /;"	L	function:ends_with	file:
seq	string.F90	/^    character(*) :: seq /;"	L	function:starts_with	file:
seq_len	string.F90	/^    integer :: seq_len$/;"	L	function:ends_with	file:
seq_len	string.F90	/^    integer :: seq_len$/;"	L	function:starts_with	file:
serial	output_interface.F90	/^    logical :: serial /;"	k	type:BinaryOutput
serial	output_interface.F90	/^    logical, optional, intent(in) :: serial /;"	L	subroutine:file_create	file:
serial	output_interface.F90	/^    logical, optional, intent(in) :: serial /;"	L	subroutine:file_open	file:
serr	cmfd_power_solver.F90	/^  real(8) :: serr /;"	v	module:cmfd_power_solver
serr_v	cmfd_power_solver.F90	/^  type(Vector) :: serr_v /;"	v	module:cmfd_power_solver
set_add_char	set_header.F90	/^  subroutine set_add_char(/;"	s	module:set_header
set_add_int	set_header.F90	/^  subroutine set_add_int(/;"	s	module:set_header
set_clear_char	set_header.F90	/^  subroutine set_clear_char(/;"	s	module:set_header
set_clear_int	set_header.F90	/^  subroutine set_clear_int(/;"	s	module:set_header
set_contains_char	set_header.F90	/^  function set_contains_char(/;"	f	module:set_header
set_contains_int	set_header.F90	/^  function set_contains_int(/;"	f	module:set_header
set_coremap	cmfd_data.F90	/^  subroutine set_coremap(/;"	s	module:cmfd_data
set_get_item_char	set_header.F90	/^  function set_get_item_char(/;"	f	module:set_header
set_get_item_int	set_header.F90	/^  function set_get_item_int(/;"	f	module:set_header
set_header	set_header.F90	/^module set_header$/;"	m
set_particle_seed	random_lcg.F90	/^  subroutine set_particle_seed(/;"	s	module:random_lcg
set_pixel	ppmlib.F90	/^  subroutine set_pixel(/;"	s	module:ppmlib
set_remove_char	set_header.F90	/^  subroutine set_remove_char(/;"	s	module:set_header
set_remove_int	set_header.F90	/^  subroutine set_remove_int(/;"	s	module:set_header
set_size_char	set_header.F90	/^  function set_size_char(/;"	f	module:set_header
set_size_int	set_header.F90	/^  function set_size_int(/;"	f	module:set_header
set_up_cmfd	cmfd_data.F90	/^  subroutine set_up_cmfd(/;"	s	module:cmfd_data
setup_active_cmfdtallies	tally.F90	/^  subroutine setup_active_cmfdtallies(/;"	s	module:tally
setup_active_usertallies	tally.F90	/^  subroutine setup_active_usertallies(/;"	s	module:tally
setup_tally_arrays	tally_initialize.F90	/^  subroutine setup_tally_arrays(/;"	s	module:tally_initialize
setup_tally_maps	tally_initialize.F90	/^  subroutine setup_tally_maps(/;"	s	module:tally_initialize
shannon_entropy	eigenvalue.F90	/^  subroutine shannon_entropy(/;"	s	module:eigenvalue
shift_idx	cmfd_data.F90	/^    integer :: shift_idx /;"	L	function:get_reflector_albedo	file:
shift_idx	cmfd_data.F90	/^    integer :: shift_idx /;"	L	subroutine:compute_dhat	file:
shift_idx	cmfd_data.F90	/^    integer :: shift_idx /;"	L	subroutine:compute_dtilde	file:
shift_idx	cmfd_loss_operator.F90	/^    integer :: shift_idx /;"	L	function:preallocate_loss_matrix	file:
shift_idx	cmfd_loss_operator.F90	/^    integer :: shift_idx /;"	L	subroutine:build_loss_matrix	file:
sig_digits	string.F90	/^    integer, optional, intent(in) :: sig_digits /;"	L	function:real_to_str	file:
siga1	cmfd_data.F90	/^    real(8) :: siga1 /;"	L	subroutine:compute_effective_downscatter	file:
siga1	cmfd_data.F90	/^    real(8) :: siga1 /;"	L	subroutine:fix_neutron_balance	file:
siga2	cmfd_data.F90	/^    real(8) :: siga2 /;"	L	subroutine:compute_effective_downscatter	file:
siga2	cmfd_data.F90	/^    real(8) :: siga2 /;"	L	subroutine:fix_neutron_balance	file:
sigma	ace_header.F90	/^    real(8), allocatable :: sigma(/;"	k	type:Reaction
sigma	doppler.F90	/^    real(8)              :: sigma /;"	L	subroutine:broaden	file:
sigma	physics.F90	/^    real(8) :: sigma /;"	L	function:sample_nuclide	file:
sigmaNew	doppler.F90	/^    real(8), intent(out) :: sigmaNew(/;"	L	subroutine:broaden	file:
sigs11	cmfd_data.F90	/^    real(8) :: sigs11 /;"	L	subroutine:compute_effective_downscatter	file:
sigs11	cmfd_data.F90	/^    real(8) :: sigs11 /;"	L	subroutine:fix_neutron_balance	file:
sigs12	cmfd_data.F90	/^    real(8) :: sigs12 /;"	L	subroutine:compute_effective_downscatter	file:
sigs12	cmfd_data.F90	/^    real(8) :: sigs12 /;"	L	subroutine:fix_neutron_balance	file:
sigs12_eff	cmfd_data.F90	/^    real(8) :: sigs12_eff /;"	L	subroutine:compute_effective_downscatter	file:
sigs12_eff	cmfd_data.F90	/^    real(8) :: sigs12_eff /;"	L	subroutine:fix_neutron_balance	file:
sigs21	cmfd_data.F90	/^    real(8) :: sigs21 /;"	L	subroutine:compute_effective_downscatter	file:
sigs21	cmfd_data.F90	/^    real(8) :: sigs21 /;"	L	subroutine:fix_neutron_balance	file:
sigs22	cmfd_data.F90	/^    real(8) :: sigs22 /;"	L	subroutine:compute_effective_downscatter	file:
sigs22	cmfd_data.F90	/^    real(8) :: sigs22 /;"	L	subroutine:fix_neutron_balance	file:
sigt1	cmfd_data.F90	/^    real(8) :: sigt1 /;"	L	subroutine:compute_effective_downscatter	file:
sigt1	cmfd_data.F90	/^    real(8) :: sigt1 /;"	L	subroutine:fix_neutron_balance	file:
sigt2	cmfd_data.F90	/^    real(8) :: sigt2 /;"	L	subroutine:compute_effective_downscatter	file:
sigt2	cmfd_data.F90	/^    real(8) :: sigt2 /;"	L	subroutine:fix_neutron_balance	file:
simple_cell_contains	geometry.F90	/^  function simple_cell_contains(/;"	f	module:geometry
sinphi	physics.F90	/^    real(8) :: sinphi /;"	L	function:rotate_angle	file:
site	source.F90	/^    type(Bank), pointer :: site /;"	L	subroutine:sample_external_source	file:
sites_needed	eigenvalue.F90	/^    integer(8) :: sites_needed /;"	L	subroutine:synchronize_bank	file:
sites_outside	eigenvalue.F90	/^    logical :: sites_outside /;"	L	subroutine:count_source_for_ufs	file:
sites_outside	eigenvalue.F90	/^    logical :: sites_outside /;"	L	subroutine:shannon_entropy	file:
sites_outside	mesh.F90	/^    logical,    optional          :: sites_outside /;"	L	subroutine:count_bank_sites	file:
size_angle	hdf5_summary.F90	/^    integer        :: size_angle$/;"	L	subroutine:hdf5_write_nuclides	file:
size_angle	output.F90	/^    integer :: size_angle /;"	L	subroutine:print_nuclide	file:
size_angle_total	output.F90	/^    integer :: size_angle_total /;"	L	subroutine:print_nuclide	file:
size_bank	mesh.F90	/^    integer(8), optional          :: size_bank /;"	L	subroutine:count_bank_sites	file:
size_energy	hdf5_summary.F90	/^    integer        :: size_energy$/;"	L	subroutine:hdf5_write_nuclides	file:
size_energy	output.F90	/^    integer :: size_energy /;"	L	subroutine:print_nuclide	file:
size_energy_total	output.F90	/^    integer :: size_energy_total /;"	L	subroutine:print_nuclide	file:
size_sab	output.F90	/^    integer :: size_sab /;"	L	subroutine:print_sab_table	file:
size_total	hdf5_summary.F90	/^    integer        :: size_total$/;"	L	subroutine:hdf5_write_nuclides	file:
size_total	output.F90	/^    integer :: size_total /;"	L	subroutine:print_nuclide	file:
size_urr	output.F90	/^    integer :: size_urr /;"	L	subroutine:print_nuclide	file:
size_xs	hdf5_summary.F90	/^    integer        :: size_xs$/;"	L	subroutine:hdf5_write_nuclides	file:
size_xs	output.F90	/^    integer :: size_xs /;"	L	subroutine:print_nuclide	file:
slope	doppler.F90	/^    real(8)              :: slope /;"	L	subroutine:broaden	file:
snes_	solver_interface.F90	/^    type(snes) :: snes_ /;"	k	type:JFNKSolver
snes_	solver_interface.F90	/^    type(snes), intent(inout)     :: snes_ /;"	L	subroutine:petsc_jfnk_compute_jacobian	file:
snes_	solver_interface.F90	/^    type(snes), intent(inout)     :: snes_ /;"	L	subroutine:petsc_jfnk_compute_residual	file:
solver_interface	solver_interface.F90	/^module solver_interface$/;"	m
sort_csr	matrix_header.F90	/^  recursive subroutine sort_csr(/;"	s	module:matrix_header
source	cmfd_execute.F90	/^    real(8),allocatable :: source(/;"	L	subroutine:calc_fission_source	file:
source	source.F90	/^module source$/;"	m
source_header	source_header.F90	/^module source_header$/;"	m
source_present	state_point.F90	/^    logical                 :: source_present$/;"	L	subroutine:load_state_point	file:
source_site	fixed_source.F90	/^  type(Bank), pointer :: source_site /;"	v	module:fixed_source
sourcecounts	cmfd_header.F90	/^    real(8), allocatable :: sourcecounts(/;"	k	type:cmfd_type
sp	initialize.F90	/^    type(BinaryOutput) :: sp$/;"	L	subroutine:read_command_line	file:
sp	state_point.F90	/^    type(BinaryOutput) :: sp$/;"	L	subroutine:write_source_point	file:
sp	state_point.F90	/^  type(BinaryOutput) :: sp /;"	v	module:state_point
specified_sense	geometry.F90	/^    logical :: specified_sense /;"	L	function:simple_cell_contains	file:
speed	hdf5_summary.F90	/^    real(8)          :: speed$/;"	L	subroutine:hdf5_write_timing	file:
speed_active	output.F90	/^    real(8)       :: speed_active /;"	L	subroutine:print_runtime	file:
speed_inactive	output.F90	/^    real(8)       :: speed_inactive /;"	L	subroutine:print_runtime	file:
split	matrix_header.F90	/^  subroutine split(/;"	s	module:matrix_header
split_string	string.F90	/^  subroutine split_string(/;"	s	module:string
split_string_wl	string.F90	/^  subroutine split_string_wl(/;"	s	module:string
sqrt_pi_inv	doppler.F90	/^  real(8), parameter :: sqrt_pi_inv /;"	v	module:doppler
src	particle_restart_write.F90	/^    type(Bank), pointer     :: src /;"	L	subroutine:write_particle_restart	file:
src	source.F90	/^    type(Bank),     pointer       :: src$/;"	L	subroutine:copy_source_attributes	file:
src	source.F90	/^    type(Bank), pointer :: src /;"	L	subroutine:initialize_source	file:
src	source.F90	/^    type(Bank), pointer, save :: src /;"	L	subroutine:get_source_particle	file:
src_cmp	cmfd_header.F90	/^    real(8), allocatable :: src_cmp(/;"	k	type:cmfd_type
start	eigenvalue.F90	/^    integer(8) :: start /;"	L	subroutine:synchronize_bank	file:
start_counts	timer_header.F90	/^    integer :: start_counts /;"	k	type:Timer
start_in_mesh	tally.F90	/^    logical :: start_in_mesh /;"	L	subroutine:score_surface_current	file:
start_in_mesh	tally.F90	/^    logical :: start_in_mesh /;"	L	subroutine:score_tl_on_mesh	file:
starts_with	string.F90	/^  logical function starts_with(/;"	f	module:string
state_point	state_point.F90	/^module state_point$/;"	m
statistics_result	tally.F90	/^  elemental subroutine statistics_result(/;"	s	module:tally
status	hdf5_interface.F90	/^    logical :: status /;"	L	subroutine:hdf5_open_group	file:
stol	cmfd_power_solver.F90	/^  real(8) :: stol /;"	v	module:cmfd_power_solver
str	string.F90	/^    character(*) :: str /;"	L	function:ends_with	file:
str	string.F90	/^    character(*) :: str /;"	L	function:starts_with	file:
str	string.F90	/^    character(*), intent(in) :: str$/;"	L	function:str_to_int	file:
str	string.F90	/^    character(11) :: str$/;"	L	function:int4_to_str	file:
str	string.F90	/^    character(21) :: str$/;"	L	function:int8_to_str	file:
str_len	string.F90	/^    integer :: str_len$/;"	L	function:ends_with	file:
str_len	string.F90	/^    integer :: str_len$/;"	L	function:starts_with	file:
str_tmp	hdf5_interface.F90	/^    character(len=length), dimension(1) :: str_tmp$/;"	L	subroutine:hdf5_read_string	file:
str_tmp	hdf5_interface.F90	/^    character(len=length), dimension(1) :: str_tmp$/;"	L	subroutine:hdf5_read_string_parallel	file:
str_tmp	hdf5_interface.F90	/^    character(len=length), dimension(1) :: str_tmp$/;"	L	subroutine:hdf5_write_string	file:
str_tmp	hdf5_interface.F90	/^    character(len=length), dimension(1) :: str_tmp$/;"	L	subroutine:hdf5_write_string_parallel	file:
str_to_int	string.F90	/^  function str_to_int(/;"	f	module:string
str_to_real	string.F90	/^  function str_to_real(/;"	f	module:string
stream	random_lcg.F90	/^  integer    :: stream /;"	v	module:random_lcg
stride	clustering_kmeans.F90	/^    integer :: stride /;"	L	subroutine:kms_uniform_clust_cen	file:
stride	tally_header.F90	/^    integer, allocatable :: stride(/;"	k	type:TallyObject
string	endf.F90	/^    character(20)       :: string$/;"	L	function:reaction_name	file:
string	output.F90	/^    character(15) :: string$/;"	L	subroutine:print_runtime	file:
string	output.F90	/^    character(MAX_LINE_LEN) :: string$/;"	L	subroutine:print_cell	file:
string	output.F90	/^    character(MAX_LINE_LEN) :: string$/;"	L	subroutine:print_lattice	file:
string	output.F90	/^    character(MAX_LINE_LEN) :: string$/;"	L	subroutine:print_material	file:
string	output.F90	/^    character(MAX_LINE_LEN) :: string$/;"	L	subroutine:print_surface	file:
string	output.F90	/^    character(MAX_LINE_LEN) :: string$/;"	L	subroutine:print_tally	file:
string	output.F90	/^    character(MAX_LINE_LEN) :: string$/;"	L	subroutine:print_universe	file:
string	output.F90	/^    character(MAX_LINE_LEN) :: string$/;"	L	subroutine:write_surface_current	file:
string	string.F90	/^    character(*), intent(in)  :: string$/;"	L	subroutine:split_string	file:
string	string.F90	/^    character(*), intent(in)  :: string$/;"	L	subroutine:split_string_wl	file:
string	string.F90	/^    character(*), intent(in) :: string$/;"	L	function:str_to_real	file:
string	string.F90	/^    character(15)                 :: string /;"	L	function:real_to_str	file:
string	string.F90	/^    character(MAX_LINE_LEN)     :: string$/;"	L	function:concatenate	file:
string	string.F90	/^module string$/;"	m
strt	clustering.F90	/^    integer :: i, strt,/;"	L	subroutine:condense_one_xs	file:
sttype	cmfd_slepc_solver.F90	/^    character(LEN=20) :: epstype, sttype,/;"	L	subroutine:init_solver	file:
su	hdf5_summary.F90	/^  type(BinaryOutput) :: su$/;"	v	module:hdf5_summary
sum	tally_header.F90	/^    real(8) :: sum /;"	k	type:TallyResult
sum_density	input_xml.F90	/^    logical :: sum_density /;"	L	subroutine:read_materials_xml	file:
sum_percent	initialize.F90	/^    real(8)        :: sum_percent /;"	L	subroutine:normalize_ao	file:
sum_sq	tally_header.F90	/^    real(8) :: sum_sq /;"	k	type:TallyResult
surf	geometry.F90	/^    type(Surface),  pointer       :: surf /;"	L	function:sense	file:
surf	geometry.F90	/^    type(Surface), pointer  :: surf$/;"	L	subroutine:neighbor_lists	file:
surf	geometry.F90	/^    type(Surface), pointer, save :: surf /;"	L	subroutine:cross_surface	file:
surf	output.F90	/^    type(Surface), pointer :: surf$/;"	L	subroutine:print_surface	file:
surface	particle_header.F90	/^    integer    :: surface /;"	k	type:Particle
surface_crossed	geometry.F90	/^    integer,        intent(out)   :: surface_crossed$/;"	L	subroutine:distance_to_boundary	file:
surface_crossed	tracking.F90	/^    integer :: surface_crossed /;"	L	subroutine:transport	file:
surface_current	mesh.F90	/^    logical, optional             :: surface_current$/;"	L	function:mesh_indices_to_bin	file:
surface_dict	global.F90	/^  type(DictIntInt) :: surface_dict$/;"	v	module:global
surfaces	geometry_header.F90	/^     integer, allocatable :: & $/;"	k	type:Cell
surfaces	global.F90	/^  type(Surface),   allocatable, target :: surfaces(/;"	v	module:global
synchronize_bank	eigenvalue.F90	/^  subroutine synchronize_bank(/;"	s	module:eigenvalue
synchronize_tallies	tally.F90	/^  subroutine synchronize_tallies(/;"	s	module:tally
t	cmfd_data.F90	/^    ty/;"	L	subroutine:compute_xs	file:
t	cmfd_input.F90	/^    ty/;"	L	subroutine:create_cmfd_tally	file:
t	math.F90	/^    real(8)             :: t /;"	L	function:t_percentile	file:
t	output.F90	/^    ty/;"	L	function:get_label	file:
t	output.F90	/^    ty/;"	L	subroutine:print_tally	file:
t	output.F90	/^    ty/;"	L	subroutine:write_surface_current	file:
t	output.F90	/^    ty/;"	L	subroutine:write_tallies	file:
t	state_point.F90	/^    ty/;"	L	subroutine:load_state_point	file:
t	state_point.F90	/^    ty/;"	L	subroutine:write_state_point	file:
t	state_point.F90	/^    ty/;"	L	subroutine:write_tally_results_nr	file:
t	tally.F90	/^    ty/;"	L	subroutine:accumulate_tally	file:
t	tally.F90	/^    ty/;"	L	subroutine:get_scoring_bins	file:
t	tally.F90	/^    ty/;"	L	subroutine:reduce_tally_results	file:
t	tally.F90	/^    ty/;"	L	subroutine:score_all_nuclides	file:
t	tally.F90	/^    ty/;"	L	subroutine:score_analog_tally	file:
t	tally.F90	/^    ty/;"	L	subroutine:score_fission_eout	file:
t	tally.F90	/^    ty/;"	L	subroutine:score_surface_current	file:
t	tally.F90	/^    ty/;"	L	subroutine:score_tl_on_mesh	file:
t	tally.F90	/^    ty/;"	L	subroutine:score_tracklength_tally	file:
t	tally.F90	/^    ty/;"	L	subroutine:tally_statistics	file:
t	tally_initialize.F90	/^    ty/;"	L	subroutine:setup_tally_arrays	file:
t	tally_initialize.F90	/^    ty/;"	L	subroutine:setup_tally_maps	file:
t_percentile	math.F90	/^  function t_percentile(/;"	f	module:math
t_value	eigenvalue.F90	/^    real(8) :: t_value /;"	L	subroutine:calculate_average_keff	file:
t_value	output.F90	/^    real(8) :: t_value /;"	L	subroutine:print_results	file:
t_value	output.F90	/^    real(8) :: t_value /;"	L	subroutine:write_tallies	file:
tab1_clear	endf_header.F90	/^    subroutine tab1_clear(/;"	s	module:endf_header
table	ace.F90	/^    type(SAlphaBeta), pointer :: table$/;"	L	subroutine:read_thermal_data	file:
table	dict_header.F90	/^    type(HashListCI), pointer :: table(/;"	k	type:DictCharInt
table	dict_header.F90	/^    type(HashListII), pointer :: table(/;"	k	type:DictIntInt
tail	list_header.F90	/^    type(ListElemChar), public, pointer :: tail /;"	k	type:ListChar
tail	list_header.F90	/^    type(ListElemInt), public, pointer :: tail /;"	k	type:ListInt
tail	list_header.F90	/^    type(ListElemReal), public, pointer :: tail /;"	k	type:ListReal
tallies	global.F90	/^  type(TallyObject),    allocatable, target :: tallies(/;"	v	module:global
tally	tally.F90	/^module tally$/;"	m
tally_dict	global.F90	/^  type(DictIntInt) :: tally_dict$/;"	v	module:global
tally_group	tally_initialize.F90	/^    character(*), intent(in) :: tally_group /;"	L	subroutine:add_tallies	file:
tally_header	tally_header.F90	/^module tally_header$/;"	m
tally_initialize	tally_initialize.F90	/^module tally_initialize$/;"	m
tally_statistics	tally.F90	/^  subroutine tally_statistics(/;"	s	module:tally
tally_temp	state_point.F90	/^    real(8), allocatable :: tally_temp(/;"	L	subroutine:write_tally_results_nr	file:
tally_temp	tally.F90	/^    real(8), allocatable :: tally_temp(/;"	L	subroutine:reduce_tally_results	file:
tallyfilter_clear	tally_header.F90	/^    subroutine tallyfilter_clear(/;"	s	module:tally_header
tallyobject_clear	tally_header.F90	/^    subroutine tallyobject_clear(/;"	s	module:tally_header
temp	tally_initialize.F90	/^    type(TallyMapElement), allocatable :: temp(/;"	L	subroutine:add_map_element	file:
temp	tally_initialize.F90	/^    type(TallyObject), allocatable :: temp(/;"	L	subroutine:add_tallies	file:
temp_array	hdf5_summary.F90	/^    integer, allocatable :: temp_array(/;"	L	subroutine:hdf5_write_tallies	file:
temp_array	state_point.F90	/^    integer, allocatable    :: temp_array(/;"	L	subroutine:load_state_point	file:
temp_array	state_point.F90	/^    integer, allocatable    :: temp_array(/;"	L	subroutine:write_state_point	file:
temp_dble	input_xml.F90	/^    real(8) :: temp_dble /;"	L	subroutine:read_materials_xml	file:
temp_int	input_xml.F90	/^    integer :: temp_int$/;"	L	subroutine:read_settings_xml	file:
temp_int_array	input_xml.F90	/^    integer, allocatable :: temp_int_array(/;"	L	subroutine:read_geometry_xml	file:
temp_int_array	input_xml.F90	/^    integer, allocatable :: temp_int_array(/;"	L	subroutine:read_settings_xml	file:
temp_int_array3	input_xml.F90	/^    integer :: temp_int_array3(/;"	L	subroutine:read_geometry_xml	file:
temp_int_array3	input_xml.F90	/^    integer :: temp_int_array3(/;"	L	subroutine:read_settings_xml	file:
temp_long	input_xml.F90	/^    integer(8) :: temp_long$/;"	L	subroutine:read_settings_xml	file:
temp_nuclide	ace.F90	/^    integer :: temp_nuclide /;"	L	subroutine:read_xs	file:
temp_ptr	xml_interface.F90	/^    type(Node), pointer :: temp_ptr$/;"	L	function:check_for_node	file:
temp_ptr	xml_interface.F90	/^    type(Node), pointer :: temp_ptr$/;"	L	function:get_arraysize_double	file:
temp_ptr	xml_interface.F90	/^    type(Node), pointer :: temp_ptr$/;"	L	function:get_arraysize_integer	file:
temp_ptr	xml_interface.F90	/^    type(Node), pointer :: temp_ptr$/;"	L	function:get_arraysize_string	file:
temp_ptr	xml_interface.F90	/^    type(Node), pointer :: temp_ptr$/;"	L	subroutine:get_node_array_double	file:
temp_ptr	xml_interface.F90	/^    type(Node), pointer :: temp_ptr$/;"	L	subroutine:get_node_array_integer	file:
temp_ptr	xml_interface.F90	/^    type(Node), pointer :: temp_ptr$/;"	L	subroutine:get_node_array_string	file:
temp_ptr	xml_interface.F90	/^    type(Node), pointer :: temp_ptr$/;"	L	subroutine:get_node_value_double	file:
temp_ptr	xml_interface.F90	/^    type(Node), pointer :: temp_ptr$/;"	L	subroutine:get_node_value_integer	file:
temp_ptr	xml_interface.F90	/^    type(Node), pointer :: temp_ptr$/;"	L	subroutine:get_node_value_long	file:
temp_ptr	xml_interface.F90	/^    type(Node), pointer :: temp_ptr$/;"	L	subroutine:get_node_value_string	file:
temp_sites	eigenvalue.F90	/^    type(Bank), save, allocatable :: &$/;"	L	subroutine:synchronize_bank	file:
temp_str	cmfd_input.F90	/^    character(MAX_LINE_LEN) :: temp_str /;"	L	subroutine:create_cmfd_tally	file:
temp_str	cmfd_input.F90	/^    character(MAX_LINE_LEN) :: temp_str$/;"	L	subroutine:read_cmfd_xml	file:
temp_str	input_xml.F90	/^    character(MAX_LINE_LEN)  :: temp_str$/;"	L	subroutine:read_cross_sections_xml	file:
temp_str	input_xml.F90	/^    character(MAX_LINE_LEN) :: temp_str /;"	L	subroutine:read_materials_xml	file:
temp_str	input_xml.F90	/^    character(MAX_LINE_LEN) :: temp_str$/;"	L	subroutine:read_plots_xml	file:
temp_str	input_xml.F90	/^    character(MAX_LINE_LEN) :: temp_str$/;"	L	subroutine:read_settings_xml	file:
temp_str	input_xml.F90	/^    character(MAX_WORD_LEN) :: temp_str$/;"	L	subroutine:read_tallies_xml	file:
temp_table	ace.F90	/^    integer :: temp_table /;"	L	subroutine:read_xs	file:
temp_type	initialize.F90	/^    integer                   :: temp_type /;"	L	subroutine:initialize_mpi	file:
testval	search.F90	/^    real(8) :: testval$/;"	L	function:binary_search_int4	file:
testval	search.F90	/^    real(8) :: testval$/;"	L	function:binary_search_int8	file:
testval	search.F90	/^    real(8) :: testval$/;"	L	function:binary_search_real	file:
theta	input_xml.F90	/^    real(8) :: phi, theta,/;"	L	subroutine:read_geometry_xml	file:
thin_energy_grid	clustering.F90	/^  subroutine thin_energy_grid(/;"	s	module:clustering
this	cmfd_header.F90	/^    type(cmfd_type), intent(inout) :: this /;"	L	subroutine:allocate_cmfd	file:
this	cmfd_header.F90	/^    type(cmfd_type), intent(inout) :: this /;"	L	subroutine:deallocate_cmfd	file:
this	tally.F90	/^    type(TallyResult), intent(inout) :: this$/;"	L	subroutine:accumulate_result	file:
this	tally.F90	/^    type(TallyResult), intent(inout) :: this$/;"	L	subroutine:reset_result	file:
this	tally.F90	/^    type(TallyResult), intent(inout) :: this$/;"	L	subroutine:statistics_result	file:
threshold	ace_header.F90	/^    integer :: threshold /;"	k	type:Reaction
threshold_elastic	ace_header.F90	/^    real(8) :: threshold_elastic /;"	k	type:SAlphaBeta
threshold_inelastic	ace_header.F90	/^    real(8) :: threshold_inelastic$/;"	k	type:SAlphaBeta
time_	output.F90	/^    character(10) :: time_ /;"	L	function:time_stamp	file:
time_stamp	output.F90	/^  function time_stamp(/;"	f	module:output
timer_get_value	timer_header.F90	/^  function timer_get_value(/;"	f	module:timer_header
timer_header	timer_header.F90	/^module timer_header$/;"	m
timer_reset	timer_header.F90	/^  subroutine timer_reset(/;"	s	module:timer_header
timer_start	timer_header.F90	/^  subroutine timer_start(/;"	s	module:timer_header
timer_stop	timer_header.F90	/^  subroutine timer_stop(/;"	s	module:timer_header
title	output.F90	/^  subroutine title(/;"	s	module:output
tmp	geometry.F90	/^    real(8) :: tmp /;"	L	subroutine:distance_to_boundary	file:
tmp	initialize.F90	/^    type(TallyResult), target :: tmp(/;"	L	subroutine:hdf5_initialize	file:
tmpb	initialize.F90	/^    type(Bank),        target :: tmpb(/;"	L	subroutine:hdf5_initialize	file:
to_str	string.F90	/^  interface to_str$/;"	i	module:string
tol	clustering_kmeans.F90	/^    real(8), intent(in) :: tol /;"	L	subroutine:perform_kms	file:
tol	clustering_kmeans.F90	/^    real(8), intent(in) :: tol /;"	L	subroutine:print_kms	file:
total	ace_header.F90	/^    real(8) :: total /;"	k	type:MaterialMacroXS
total	ace_header.F90	/^    real(8) :: total /;"	k	type:NuclideMicroXS
total	ace_header.F90	/^    real(8), allocatable :: total(/;"	k	type:Nuclide
total	eigenvalue.F90	/^    integer(8) :: total /;"	L	subroutine:join_bank_from_threads	file:
total	eigenvalue.F90	/^    integer(8) :: total /;"	L	subroutine:synchronize_bank	file:
total	eigenvalue.F90	/^    real(8) :: total /;"	L	subroutine:count_source_for_ufs	file:
total_filter_bins	tally_header.F90	/^    integer :: total_filter_bins$/;"	k	type:TallyObject
total_particles	hdf5_summary.F90	/^    integer(8)       :: total_particles$/;"	L	subroutine:hdf5_write_timing	file:
total_score_bins	tally_header.F90	/^    integer :: total_score_bins$/;"	k	type:TallyObject
totalxs	cmfd_header.F90	/^    real(8), allocatable :: totalxs(/;"	k	type:cmfd_type
totxs	cmfd_loss_operator.F90	/^    real(8) :: totxs /;"	L	subroutine:build_loss_matrix	file:
tr	initialize.F90	/^    type(TallyResult) :: tr$/;"	L	subroutine:initialize_mpi	file:
track_output	track_output.F90	/^module track_output$/;"	m
tracking	tracking.F90	/^module tracking$/;"	m
translation	geometry_header.F90	/^     real(8), allocatable :: translation(/;"	k	type:Cell
transport	tracking.F90	/^  subroutine transport(/;"	s	module:tracking
type	ace_header.F90	/^    integer       :: type /;"	k	type:XsListing
type	ace_header.F90	/^    integer, allocatable :: type(/;"	k	type:DistAngle
type	geometry_header.F90	/^     integer :: type /;"	k	type:Cell
type	geometry_header.F90	/^     integer :: type /;"	k	type:Lattice
type	geometry_header.F90	/^     integer :: type /;"	k	type:Surface
type	geometry_header.F90	/^     integer :: type /;"	k	type:Universe
type	input_xml.F90	/^    character(MAX_WORD_LEN) :: type$/;"	L	subroutine:read_settings_xml	file:
type	mesh_header.F90	/^    integer :: type /;"	k	type:StructuredMesh
type	output.F90	/^    integer :: type /;"	L	subroutine:write_tallies	file:
type	particle_header.F90	/^    integer    :: type /;"	k	type:Particle
type	physics.F90	/^    integer        :: type /;"	L	function:sample_angle	file:
type	plot_header.F90	/^    integer :: type /;"	k	type:ObjectPlot
type	tally_header.F90	/^    integer :: type /;"	k	type:TallyFilter
type	tally_header.F90	/^    integer :: type /;"	k	type:TallyObject
type	tally_initialize.F90	/^    integer :: type /;"	L	subroutine:setup_tally_maps	file:
type_angle	source_header.F90	/^    integer :: type_angle /;"	k	type:ExtSource
type_energy	source_header.F90	/^    integer :: type_energy /;"	k	type:ExtSource
type_space	source_header.F90	/^    integer :: type_space /;"	k	type:ExtSource
u	geometry.F90	/^    real(8) :: u /;"	L	subroutine:cross_surface	file:
u	geometry.F90	/^    real(8) :: u,/;"	L	subroutine:distance_to_boundary	file:
u	output.F90	/^    type(Universe), pointer :: u /;"	L	subroutine:print_cell	file:
u0	physics.F90	/^    real(8) :: u0 /;"	L	function:rotate_angle	file:
union_energy	energy_grid.F90	/^    real(8) :: union_energy /;"	L	subroutine:grid_pointers	file:
union_grid_index	cross_section.F90	/^  integer :: union_grid_index$/;"	v	module:cross_section
unionized_grid	energy_grid.F90	/^  subroutine unionized_grid(/;"	s	module:energy_grid
unit	output.F90	/^    integer,          optional :: unit$/;"	L	subroutine:print_tally	file:
unit	output.F90	/^    integer,         optional :: unit$/;"	L	subroutine:print_sab_table	file:
unit	output.F90	/^    integer,       optional :: unit$/;"	L	subroutine:print_material	file:
unit	output.F90	/^    integer,       optional :: unit$/;"	L	subroutine:print_universe	file:
unit	output.F90	/^    integer,      optional :: unit /;"	L	subroutine:print_surface	file:
unit	output.F90	/^    integer,      optional :: unit$/;"	L	subroutine:print_lattice	file:
unit	output.F90	/^    integer,      optional :: unit$/;"	L	subroutine:print_nuclide	file:
unit	output.F90	/^    integer,   optional :: unit /;"	L	subroutine:print_cell	file:
unit	output.F90	/^    integer, optional :: unit /;"	L	subroutine:header	file:
unit_	output.F90	/^    integer :: unit_ /;"	L	subroutine:header	file:
unit_	output.F90	/^    integer :: unit_ /;"	L	subroutine:print_cell	file:
unit_	output.F90	/^    integer :: unit_ /;"	L	subroutine:print_lattice	file:
unit_	output.F90	/^    integer :: unit_ /;"	L	subroutine:print_material	file:
unit_	output.F90	/^    integer :: unit_ /;"	L	subroutine:print_nuclide	file:
unit_	output.F90	/^    integer :: unit_ /;"	L	subroutine:print_sab_table	file:
unit_	output.F90	/^    integer :: unit_ /;"	L	subroutine:print_surface	file:
unit_	output.F90	/^    integer :: unit_ /;"	L	subroutine:print_tally	file:
unit_	output.F90	/^    integer :: unit_ /;"	L	subroutine:print_universe	file:
unit_fh	output_interface.F90	/^    integer :: unit_fh$/;"	k	type:BinaryOutput
units	input_xml.F90	/^    character(MAX_WORD_LEN) :: units /;"	L	subroutine:read_materials_xml	file:
univ	output.F90	/^    type(Universe), pointer :: univ$/;"	L	subroutine:print_universe	file:
universe	geometry_header.F90	/^     integer :: universe /;"	k	type:Cell
universe	particle_header.F90	/^    integer :: universe /;"	k	type:LocalCoord
universe_dict	global.F90	/^  type(DictIntInt) :: universe_dict$/;"	v	module:global
universe_num	input_xml.F90	/^    integer :: universe_num$/;"	L	subroutine:read_geometry_xml	file:
universes	geometry_header.F90	/^     integer, allocatable :: universes(/;"	k	type:Lattice
universes	global.F90	/^  type(Universe),  allocatable, target :: universes(/;"	v	module:global
upper_case	string.F90	/^  elemental subroutine upper_case(/;"	s	module:string
upper_right	geometry.F90	/^    real(8) :: upper_right(/;"	L	subroutine:find_cell	file:
upper_right	mesh_header.F90	/^    real(8), allocatable :: upper_right(/;"	k	type:StructuredMesh
urr	cross_section.F90	/^    type(UrrData),  pointer, save :: urr /;"	L	subroutine:calculate_urr_xs	file:
urr_data	ace_header.F90	/^    type(UrrData), pointer :: urr_data /;"	k	type:Nuclide
urr_inelastic	ace_header.F90	/^    integer                :: urr_inelastic$/;"	k	type:Nuclide
urr_present	ace_header.F90	/^    logical                :: urr_present$/;"	k	type:Nuclide
urr_ptables_on	global.F90	/^  logical :: urr_ptables_on /;"	v	module:global
urrdata_clear	ace_header.F90	/^    subroutine urrdata_clear(/;"	s	module:ace_header
use_ptable	ace_header.F90	/^    logical :: use_ptable /;"	k	type:NuclideMicroXS
use_search_cells	geometry.F90	/^    logical :: use_search_cells /;"	L	subroutine:find_cell	file:
user_tallies	global.F90	/^  type(TallyObject), pointer :: user_tallies(/;"	v	module:global
uvw	bank_header.F90	/^    real(8)    :: uvw(/;"	k	type:Bank
uvw	math.F90	/^    real(8), intent(in) :: uvw(/;"	L	function:calc_rn	file:
uvw	particle_header.F90	/^    real(8) :: uvw(/;"	k	type:LocalCoord
uvw	physics.F90	/^    real(8)             :: uvw(/;"	L	function:rotate_angle	file:
uvw	physics.F90	/^    real(8), intent(in)     :: uvw(/;"	L	subroutine:sample_target_velocity	file:
uvw	physics.F90	/^    real(8), intent(inout)  :: uvw(/;"	L	subroutine:elastic_scatter	file:
uvw	physics.F90	/^    real(8), intent(inout)  :: uvw(/;"	L	subroutine:inelastic_scatter	file:
uvw	physics.F90	/^    real(8), intent(inout)  :: uvw(/;"	L	subroutine:sab_scatter	file:
uvw	tally.F90	/^    real(8) :: uvw(/;"	L	subroutine:score_surface_current	file:
uvw	tally.F90	/^    real(8) :: uvw(/;"	L	subroutine:score_tl_on_mesh	file:
uvw0	physics.F90	/^    real(8), intent(in) :: uvw0(/;"	L	function:rotate_angle	file:
uvw_cm	physics.F90	/^    real(8) :: uvw_cm(/;"	L	subroutine:elastic_scatter	file:
v	geometry.F90	/^    real(8) :: u,v,/;"	L	subroutine:distance_to_boundary	file:
v	geometry.F90	/^    real(8) :: v /;"	L	subroutine:cross_surface	file:
v	physics.F90	/^    real(8) :: x, y, v /;"	L	subroutine:sample_energy	file:
v0	physics.F90	/^    real(8) :: v0 /;"	L	function:rotate_angle	file:
v_cm	physics.F90	/^    real(8) :: v_cm(/;"	L	subroutine:elastic_scatter	file:
v_n	physics.F90	/^    real(8) :: v_n(/;"	L	subroutine:elastic_scatter	file:
v_t	physics.F90	/^    real(8) :: v_t(/;"	L	subroutine:elastic_scatter	file:
v_target	physics.F90	/^    real(8), intent(out)    :: v_target(/;"	L	subroutine:sample_target_velocity	file:
val	clustering.F90	/^    real(8), intent(in) :: val /;"	L	function:find_grid_index	file:
val	cmfd_jfnk_solver.F90	/^    real(8)      :: val /;"	L	subroutine:build_jacobian_matrix	file:
val	cmfd_loss_operator.F90	/^    real(8) :: val /;"	L	subroutine:build_loss_matrix	file:
val	cmfd_prod_operator.F90	/^    real(8) :: val /;"	L	subroutine:build_prod_matrix	file:
val	dict_header.F90	/^    integer                  :: val$/;"	L	function:dict_hash_key_ci	file:
val	dict_header.F90	/^    integer             :: val$/;"	L	function:dict_hash_key_ii	file:
val	input_xml.F90	/^    real(8) :: val /;"	L	subroutine:read_materials_xml	file:
val	matrix_header.F90	/^    real(8) :: val(/;"	L	subroutine:sort_csr	file:
val	matrix_header.F90	/^    real(8) :: val(/;"	L	subroutine:split	file:
val	matrix_header.F90	/^    real(8), allocatable :: val(/;"	k	type:Matrix
val	matrix_header.F90	/^    real(8), intent(in) :: val /;"	L	subroutine:matrix_add_value	file:
val	search.F90	/^    integer(8), intent(in) :: val$/;"	L	function:binary_search_int8	file:
val	search.F90	/^    integer, intent(in) :: val$/;"	L	function:binary_search_int4	file:
val	search.F90	/^    real(8), intent(in) :: val$/;"	L	function:binary_search_real	file:
val	tally.F90	/^    real(8) :: val$/;"	L	subroutine:accumulate_result	file:
val	vector_header.F90	/^    real(8), intent(in)          :: val /;"	L	subroutine:vector_add_value	file:
val	vector_header.F90	/^    real(8), pointer :: val(/;"	k	type:Vector
val0	matrix_header.F90	/^    real(8) :: val0 /;"	L	subroutine:split	file:
valid	ppmlib.F90	/^    logical                 :: valid$/;"	L	function:valid_image	file:
valid_image	ppmlib.F90	/^  function valid_image(/;"	f	module:ppmlib
value	dict_header.F90	/^    integer                        :: value$/;"	k	type:ElemKeyValueCI
value	dict_header.F90	/^    integer :: value$/;"	k	type:ElemKeyValueII
value	tally_header.F90	/^    real(8) :: value /;"	k	type:TallyResult
var	hdf5_interface.F90	/^    character(*),   intent(in) :: var /;"	L	subroutine:hdf5_write_attribute_string	file:
var	output_interface.F90	/^    character(*), intent(in)           :: var /;"	L	subroutine:write_attribute_string	file:
vector_add_value	vector_header.F90	/^  subroutine vector_add_value(/;"	s	module:vector_header
vector_create	vector_header.F90	/^  subroutine vector_create(/;"	s	module:vector_header
vector_destroy	vector_header.F90	/^  subroutine vector_destroy(/;"	s	module:vector_header
vector_header	vector_header.F90	/^module vector_header$/;"	m
vector_setup_petsc	vector_header.F90	/^  subroutine vector_setup_petsc(/;"	s	module:vector_header
vector_write_petsc_binary	vector_header.F90	/^  subroutine vector_write_petsc_binary(/;"	s	module:vector_header
vel	physics.F90	/^    real(8) :: vel /;"	L	subroutine:elastic_scatter	file:
vol	cmfd_execute.F90	/^    real(8) :: vol /;"	L	subroutine:calc_fission_source	file:
volume	tally_header.F90	/^    real(8) :: volume /;"	k	type:TallyObject
volume_frac	mesh_header.F90	/^    real(8) :: volume_frac /;"	k	type:StructuredMesh
vox	plot.F90	/^    real(8) :: vox(/;"	L	subroutine:create_3d_dump	file:
vt	physics.F90	/^    real(8) :: vt /;"	L	subroutine:sample_target_velocity	file:
w	geometry.F90	/^    real(8) :: u,v,w /;"	L	subroutine:distance_to_boundary	file:
w	geometry.F90	/^    real(8) :: w /;"	L	subroutine:cross_surface	file:
w	math.F90	/^    real(8) :: phi, w /;"	L	function:calc_rn	file:
w	math.F90	/^    real(8) :: w /;"	L	function:watt_spectrum	file:
w	ppmlib.F90	/^    integer,     intent(in)    :: w /;"	L	subroutine:allocate_image	file:
w	string.F90	/^    integer      :: w$/;"	L	function:str_to_int	file:
w0	physics.F90	/^    real(8) :: w0 /;"	L	function:rotate_angle	file:
w2m1	math.F90	/^    real(8) :: w2m1 /;"	L	function:calc_rn	file:
warning	error.F90	/^  subroutine warning(/;"	s	module:error
watt_spectrum	math.F90	/^  function watt_spectrum(/;"	f	module:math
weight	physics.F90	/^    real(8) :: weight /;"	L	subroutine:create_fission_sites	file:
weightfactors	cmfd_header.F90	/^    real(8), allocatable :: weightfactors(/;"	k	type:cmfd_type
wgt	bank_header.F90	/^    real(8)    :: wgt /;"	k	type:Bank
wgt	clustering.F90	/^    integer :: wgt /;"	L	subroutine:condense_one_xs	file:
wgt	particle_header.F90	/^    real(8)    :: wgt /;"	k	type:Particle
wgt	physics.F90	/^    real(8), intent(inout)  :: wgt /;"	L	subroutine:inelastic_scatter	file:
wgt	tally.F90	/^    real(8) :: wgt /;"	L	subroutine:score_analog_tally	file:
wgt_bank	particle_header.F90	/^    real(8)    :: wgt_bank /;"	k	type:Particle
width	geometry_header.F90	/^     real(8), allocatable :: width(/;"	k	type:Lattice
width	mesh_header.F90	/^    real(8), allocatable :: width(/;"	k	type:StructuredMesh
width	plot_header.F90	/^    real(8) :: width(/;"	k	type:ObjectPlot
width	ppmlib.F90	/^    integer                          :: width,/;"	k	type:Image
width	string.F90	/^    integer      :: width /;"	L	function:real_to_str	file:
word	input_xml.F90	/^    character(MAX_WORD_LEN) :: word$/;"	L	subroutine:read_geometry_xml	file:
word	input_xml.F90	/^    character(MAX_WORD_LEN) :: word$/;"	L	subroutine:read_tallies_xml	file:
word	string.F90	/^    character(*), intent(in) :: word$/;"	L	function:is_number	file:
word	string.F90	/^    character(*), intent(inout) :: word$/;"	L	subroutine:lower_case	file:
word	string.F90	/^    character(*), intent(inout) :: word$/;"	L	subroutine:upper_case	file:
words	string.F90	/^    character(*),   intent(in)  :: words(/;"	L	function:concatenate	file:
words	string.F90	/^    character(*), intent(out) :: words(/;"	L	subroutine:split_string	file:
words	string.F90	/^    character(*), intent(out) :: words(/;"	L	subroutine:split_string_wl	file:
work_i	initialize.F90	/^    integer(8) :: work_i /;"	L	subroutine:calculate_work	file:
write_attribute_string	output_interface.F90	/^  subroutine write_attribute_string(/;"	s	module:output_interface
write_clustering	clustering.F90	/^  subroutine write_clustering(/;"	s	module:clustering
write_double	output_interface.F90	/^  subroutine write_double(/;"	s	module:output_interface
write_double_1Darray	output_interface.F90	/^  subroutine write_double_1Darray(/;"	s	module:output_interface
write_double_2Darray	output_interface.F90	/^  subroutine write_double_2Darray(/;"	s	module:output_interface
write_double_3Darray	output_interface.F90	/^  subroutine write_double_3Darray(/;"	s	module:output_interface
write_double_4Darray	output_interface.F90	/^  subroutine write_double_4Darray(/;"	s	module:output_interface
write_integer	output_interface.F90	/^  subroutine write_integer(/;"	s	module:output_interface
write_integer_1Darray	output_interface.F90	/^  subroutine write_integer_1Darray(/;"	s	module:output_interface
write_integer_2Darray	output_interface.F90	/^  subroutine write_integer_2Darray(/;"	s	module:output_interface
write_integer_3Darray	output_interface.F90	/^  subroutine write_integer_3Darray(/;"	s	module:output_interface
write_integer_4Darray	output_interface.F90	/^  subroutine write_integer_4Darray(/;"	s	module:output_interface
write_long	output_interface.F90	/^  subroutine write_long(/;"	s	module:output_interface
write_message	output.F90	/^  subroutine write_message(/;"	s	module:output
write_particle_restart	particle_restart_write.F90	/^  subroutine write_particle_restart(/;"	s	module:particle_restart_write
write_particle_track	track_output.F90	/^  subroutine write_particle_track(/;"	s	module:track_output
write_source_bank	output_interface.F90	/^  subroutine write_source_bank(/;"	s	module:output_interface
write_source_point	state_point.F90	/^  subroutine write_source_point(/;"	s	module:state_point
write_state_point	state_point.F90	/^  subroutine write_state_point(/;"	s	module:state_point
write_string	output_interface.F90	/^  subroutine write_string(/;"	s	module:output_interface
write_summary	output.F90	/^  subroutine write_summary(/;"	s	module:output
write_surface_current	output.F90	/^  subroutine write_surface_current(/;"	s	module:output
write_tallies	output.F90	/^  subroutine write_tallies(/;"	s	module:output
write_tally_result	output_interface.F90	/^  subroutine write_tally_result(/;"	s	module:output_interface
write_tally_results_nr	state_point.F90	/^  subroutine write_tally_results_nr(/;"	s	module:state_point
write_track	particle_header.F90	/^    logical    :: write_track /;"	k	type:Particle
write_xs_summary	output.F90	/^  subroutine write_xs_summary(/;"	s	module:output
x	cmfd_jfnk_solver.F90	/^    type(Vector), intent(in)    :: x /;"	L	subroutine:compute_nonlinear_residual	file:
x	cmfd_jfnk_solver.F90	/^    type(Vector), intent(in) :: x /;"	L	subroutine:build_jacobian_matrix	file:
x	doppler.F90	/^    real(8), allocatable :: x(/;"	L	subroutine:broaden	file:
x	endf_header.F90	/^    real(8), allocatable :: x(/;"	k	type:Tab1
x	geometry.F90	/^    real(8) :: x /;"	L	subroutine:cross_surface	file:
x	geometry.F90	/^    real(8) :: x,/;"	L	function:sense	file:
x	geometry.F90	/^    real(8) :: x,/;"	L	subroutine:distance_to_boundary	file:
x	initialize.F90	/^    real(8)        :: x /;"	L	subroutine:normalize_ao	file:
x	interpolation.F90	/^    real(8),    intent(in) :: x /;"	L	function:interpolate_tab1_object	file:
x	interpolation.F90	/^    real(8), intent(in)           :: x /;"	L	function:interpolate_tab1_array	file:
x	math.F90	/^    real(8), intent(in) :: x /;"	L	function:calc_pn	file:
x	physics.F90	/^    real(8) :: x,/;"	L	subroutine:sample_energy	file:
x	plot.F90	/^    integer :: x,/;"	L	subroutine:create_3d_dump	file:
x	plot.F90	/^    integer :: x,/;"	L	subroutine:create_ppm	file:
x	ppmlib.F90	/^    integer,     intent(in)    :: x,/;"	L	subroutine:set_pixel	file:
x	ppmlib.F90	/^    integer,     intent(in) :: x,/;"	L	function:inside_image	file:
x	solver_interface.F90	/^    type(vec), intent(inout)      :: x /;"	L	subroutine:petsc_jfnk_compute_jacobian	file:
x	solver_interface.F90	/^    type(vec), intent(inout)      :: x /;"	L	subroutine:petsc_jfnk_compute_residual	file:
x0	geometry.F90	/^    real(8) :: x0,/;"	L	function:sense	file:
x0	geometry.F90	/^    real(8) :: x0,/;"	L	subroutine:cross_lattice	file:
x0	geometry.F90	/^    real(8) :: x0,/;"	L	subroutine:distance_to_boundary	file:
x0	geometry_header.F90	/^     real(8) :: x0 /;"	k	type:Universe
x0	interpolation.F90	/^    real(8) :: x0,/;"	L	function:interpolate_tab1_array	file:
x0	interpolation.F90	/^    real(8) :: x0,/;"	L	function:interpolate_tab1_object	file:
x0	mesh.F90	/^    real(8) :: x0,/;"	L	function:mesh_intersects_2d	file:
x0	mesh.F90	/^    real(8) :: x0,/;"	L	function:mesh_intersects_3d	file:
x1	interpolation.F90	/^    real(8) :: x0, x1 /;"	L	function:interpolate_tab1_array	file:
x1	interpolation.F90	/^    real(8) :: x0, x1 /;"	L	function:interpolate_tab1_object	file:
x1	mesh.F90	/^    real(8) :: x1,/;"	L	function:mesh_intersects_2d	file:
x1	mesh.F90	/^    real(8) :: x1,/;"	L	function:mesh_intersects_3d	file:
x_same	tally.F90	/^    logical :: x_same /;"	L	subroutine:score_surface_current	file:
xi	mesh.F90	/^    real(8) :: xi,/;"	L	function:mesh_intersects_2d	file:
xi	mesh.F90	/^    real(8) :: xi,/;"	L	function:mesh_intersects_3d	file:
xi	physics.F90	/^    real(8)        :: xi /;"	L	function:sample_angle	file:
xi	physics.F90	/^    real(8) :: xi /;"	L	function:sample_fission_energy	file:
xm0	mesh.F90	/^    real(8) :: xm0,/;"	L	function:mesh_intersects_2d	file:
xm0	mesh.F90	/^    real(8) :: xm0,/;"	L	function:mesh_intersects_3d	file:
xm1	mesh.F90	/^    real(8) :: xm1,/;"	L	function:mesh_intersects_2d	file:
xm1	mesh.F90	/^    real(8) :: xm1,/;"	L	function:mesh_intersects_3d	file:
xml_interface	xml_interface.F90	/^module xml_interface$/;"	m
xs	clustering.F90	/^    real(8), allocatable, intent(inout) :: xs(/;"	L	subroutine:condense_one_xs	file:
xs	doppler.F90	/^    real(8), intent(in)  :: xs(/;"	L	subroutine:broaden	file:
xs	input_xml.F90	/^    character(*),   intent(in)    :: xs$/;"	L	subroutine:expand_natural_element	file:
xs_listing_dict	global.F90	/^  type(DictCharInt) :: xs_listing_dict$/;"	v	module:global
xs_listings	global.F90	/^  type(XsListing),  allocatable, target :: xs_listings(/;"	v	module:global
xs_norm	clustering.F90	/^    integer, allocatable :: xs_norm(/;"	L	subroutine:condense_one_xs	file:
xs_scratch	clustering.F90	/^    real(8), allocatable :: xs_scratch(/;"	L	subroutine:condense_one_xs	file:
xvec	cmfd_jfnk_solver.F90	/^  type(Vector)     :: xvec /;"	v	module:cmfd_jfnk_solver
xvec	solver_interface.F90	/^    type(Vector) :: xvec /;"	L	subroutine:petsc_jfnk_compute_jacobian	file:
xvec	solver_interface.F90	/^    type(Vector) :: xvec /;"	L	subroutine:petsc_jfnk_compute_residual	file:
xyz	bank_header.F90	/^    real(8)    :: xyz(/;"	k	type:Bank
xyz	geometry.F90	/^    real(8) :: xyz(/;"	L	subroutine:find_cell	file:
xyz	mesh.F90	/^    real(8), intent(in)           :: xyz(/;"	L	subroutine:get_mesh_bin	file:
xyz	mesh.F90	/^    real(8), intent(in)           :: xyz(/;"	L	subroutine:get_mesh_indices	file:
xyz	particle_header.F90	/^    real(8) :: xyz(/;"	k	type:LocalCoord
xyz	plot.F90	/^    real(8) :: xyz(/;"	L	subroutine:create_ppm	file:
xyz0	mesh.F90	/^    real(8), intent(in) :: xyz0(/;"	L	function:mesh_intersects_2d	file:
xyz0	mesh.F90	/^    real(8), intent(in) :: xyz0(/;"	L	function:mesh_intersects_3d	file:
xyz0	tally.F90	/^    real(8) :: xyz0(/;"	L	subroutine:score_surface_current	file:
xyz0	tally.F90	/^    real(8) :: xyz0(/;"	L	subroutine:score_tl_on_mesh	file:
xyz1	mesh.F90	/^    real(8), intent(in) :: xyz1(/;"	L	function:mesh_intersects_2d	file:
xyz1	mesh.F90	/^    real(8), intent(in) :: xyz1(/;"	L	function:mesh_intersects_3d	file:
xyz1	tally.F90	/^    real(8) :: xyz1(/;"	L	subroutine:score_surface_current	file:
xyz1	tally.F90	/^    real(8) :: xyz1(/;"	L	subroutine:score_tl_on_mesh	file:
xyz_cross	tally.F90	/^    real(8) :: xyz_cross(/;"	L	subroutine:score_surface_current	file:
xyz_cross	tally.F90	/^    real(8) :: xyz_cross(/;"	L	subroutine:score_tl_on_mesh	file:
xyz_idx	cmfd_data.F90	/^    integer :: xyz_idx /;"	L	subroutine:compute_dhat	file:
xyz_idx	cmfd_data.F90	/^    integer :: xyz_idx /;"	L	subroutine:compute_dtilde	file:
xyz_idx	cmfd_loss_operator.F90	/^    integer :: xyz_idx /;"	L	function:preallocate_loss_matrix	file:
xyz_idx	cmfd_loss_operator.F90	/^    integer :: xyz_idx /;"	L	subroutine:build_loss_matrix	file:
y	doppler.F90	/^    real(8)              :: y /;"	L	subroutine:broaden	file:
y	endf_header.F90	/^    real(8), allocatable :: y(/;"	k	type:Tab1
y	geometry.F90	/^    real(8) :: x,y,/;"	L	function:sense	file:
y	geometry.F90	/^    real(8) :: x,y,/;"	L	subroutine:distance_to_boundary	file:
y	geometry.F90	/^    real(8) :: y /;"	L	subroutine:cross_surface	file:
y	interpolation.F90	/^    real(8)                       :: y /;"	L	function:interpolate_tab1_array	file:
y	interpolation.F90	/^    real(8)                :: y /;"	L	function:interpolate_tab1_object	file:
y	physics.F90	/^    real(8) :: x, y,/;"	L	subroutine:sample_energy	file:
y	plot.F90	/^    integer :: x, y /;"	L	subroutine:create_ppm	file:
y	plot.F90	/^    integer :: x, y,/;"	L	subroutine:create_3d_dump	file:
y	ppmlib.F90	/^    integer,     intent(in)    :: x, y /;"	L	subroutine:set_pixel	file:
y	ppmlib.F90	/^    integer,     intent(in) :: x, y$/;"	L	function:inside_image	file:
y0	geometry.F90	/^    real(8) :: x0, y0,/;"	L	subroutine:cross_lattice	file:
y0	geometry.F90	/^    real(8) :: x0,y0,/;"	L	function:sense	file:
y0	geometry.F90	/^    real(8) :: x0,y0,/;"	L	subroutine:distance_to_boundary	file:
y0	geometry_header.F90	/^     real(8) :: y0 /;"	k	type:Universe
y0	interpolation.F90	/^    real(8) :: y0,/;"	L	function:interpolate_tab1_array	file:
y0	interpolation.F90	/^    real(8) :: y0,/;"	L	function:interpolate_tab1_object	file:
y0	mesh.F90	/^    real(8) :: x0, y0 /;"	L	function:mesh_intersects_2d	file:
y0	mesh.F90	/^    real(8) :: x0, y0,/;"	L	function:mesh_intersects_3d	file:
y1	interpolation.F90	/^    real(8) :: y0, y1 /;"	L	function:interpolate_tab1_array	file:
y1	interpolation.F90	/^    real(8) :: y0, y1 /;"	L	function:interpolate_tab1_object	file:
y1	mesh.F90	/^    real(8) :: x1, y1 /;"	L	function:mesh_intersects_2d	file:
y1	mesh.F90	/^    real(8) :: x1, y1,/;"	L	function:mesh_intersects_3d	file:
y_inv	doppler.F90	/^    real(8)              :: y_inv /;"	L	subroutine:broaden	file:
y_inv_sq	doppler.F90	/^    real(8)              :: y_inv_sq /;"	L	subroutine:broaden	file:
y_same	tally.F90	/^    logical :: y_same /;"	L	subroutine:score_surface_current	file:
y_sq	doppler.F90	/^    real(8)              :: y_sq /;"	L	subroutine:broaden	file:
yi	mesh.F90	/^    real(8) :: xi, yi /;"	L	function:mesh_intersects_2d	file:
yi	mesh.F90	/^    real(8) :: xi, yi,/;"	L	function:mesh_intersects_3d	file:
yield	physics.F90	/^    real(8) :: yield /;"	L	function:sample_fission_energy	file:
ym0	mesh.F90	/^    real(8) :: xm0, ym0 /;"	L	function:mesh_intersects_2d	file:
ym0	mesh.F90	/^    real(8) :: xm0, ym0,/;"	L	function:mesh_intersects_3d	file:
ym1	mesh.F90	/^    real(8) :: xm1, ym1 /;"	L	function:mesh_intersects_2d	file:
ym1	mesh.F90	/^    real(8) :: xm1, ym1,/;"	L	function:mesh_intersects_3d	file:
z	geometry.F90	/^    real(8) :: x,y,z /;"	L	function:sense	file:
z	geometry.F90	/^    real(8) :: x,y,z /;"	L	subroutine:distance_to_boundary	file:
z	geometry.F90	/^    real(8) :: z /;"	L	subroutine:cross_surface	file:
z	math.F90	/^    real(8)             :: z /;"	L	function:normal_percentile	file:
z	math.F90	/^    real(8)            :: z /;"	L	function:t_percentile	file:
z	plot.F90	/^    integer :: x, y, z /;"	L	subroutine:create_3d_dump	file:
z0	geometry.F90	/^    real(8) :: x0, y0, z0 /;"	L	subroutine:cross_lattice	file:
z0	geometry.F90	/^    real(8) :: x0,y0,z0 /;"	L	function:sense	file:
z0	geometry.F90	/^    real(8) :: x0,y0,z0 /;"	L	subroutine:distance_to_boundary	file:
z0	geometry_header.F90	/^     real(8) :: z0 /;"	k	type:Universe
z0	mesh.F90	/^    real(8) :: x0, y0, z0 /;"	L	function:mesh_intersects_3d	file:
z1	mesh.F90	/^    real(8) :: x1, y1, z1 /;"	L	function:mesh_intersects_3d	file:
z2	math.F90	/^    real(8)            :: z2 /;"	L	function:t_percentile	file:
z_same	tally.F90	/^    logical :: z_same /;"	L	subroutine:score_surface_current	file:
zaid	ace_header.F90	/^    integer       :: zaid /;"	k	type:Nuclide
zaid	ace_header.F90	/^    integer       :: zaid /;"	k	type:XsListing
zaid	ace_header.F90	/^    integer, allocatable :: zaid(/;"	k	type:SAlphaBeta
zaids	ace.F90	/^    integer       :: zaids(/;"	L	subroutine:read_ace_table	file:
zaids	hdf5_summary.F90	/^    integer, allocatable :: zaids(/;"	L	subroutine:hdf5_write_materials	file:
zi	mesh.F90	/^    real(8) :: xi, yi, zi /;"	L	function:mesh_intersects_3d	file:
zm0	mesh.F90	/^    real(8) :: xm0, ym0, zm0 /;"	L	function:mesh_intersects_3d	file:
zm1	mesh.F90	/^    real(8) :: xm1, ym1, zm1 /;"	L	function:mesh_intersects_3d	file:
